# Installing Grafana on AKS with Azure DevOps CI/CD Pipeline

This guide will walk you through deploying Grafana on an AKS cluster using Helm charts in a CI/CD approach with Azure DevOps, while securely managing credentials through Azure Key Vault.

## Prerequisites

- Azure Kubernetes Service (AKS) cluster
- Azure DevOps organization and project
- Azure Key Vault configured with required secrets
- Helm installed on your local machine (for testing)
- kubectl configured to access your AKS cluster

## Step 1: Set Up Azure Key Vault Secrets

Store the following credentials in Azure Key Vault:

1. Application Insights credentials:
   - `appinsights-instrumentation-key`
   - `appinsights-application-id`
   - `appinsights-api-key` (optional for additional access)

2. Grafana admin credentials:
   - `grafana-admin-user`
   - `grafana-admin-password`

3. Any other sensitive data needed for your deployment

## Step 2: Create Azure DevOps Pipeline

### 2.1. Create a new pipeline YAML file

```yaml
trigger:
- main

resources:
- repo: self

variables:
  clusterName: 'your-aks-cluster'
  resourceGroup: 'your-resource-group'
  namespace: 'monitoring'
  helmReleaseName: 'grafana'
  keyVaultName: 'your-key-vault-name'

stages:
- stage: DeployGrafana
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'your-azure-service-connection'
        KeyVaultName: '$(keyVaultName)'
        SecretsFilter: '*'
        RunAsPreJob: true

    - task: Kubernetes@1
      displayName: 'Create namespace if not exists'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'your-azure-service-connection'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(clusterName)'
        command: 'apply'
        arguments: '-f namespace.yaml'
        secretType: 'dockerRegistry'
        
    - task: HelmDeploy@0
      displayName: 'Install Grafana'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'your-azure-service-connection'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(clusterName)'
        namespace: '$(namespace)'
        command: 'upgrade'
        chartType: 'name'
        chartName: 'grafana/grafana'
        releaseName: '$(helmReleaseName)'
        overrideValues: 'grafana.ingress.enabled=true,grafana.ingress.hosts[0]=grafana.yourdomain.com,service.type=LoadBalancer'
        valueFile: 'values.yaml'
        secretValues: |
          admin.user=$(grafana-admin-user)
          admin.password=$(grafana-admin-password)
          datasources.datasources_yaml.apiVersion=1
          datasources.datasources_yaml.datasources[0].name=AppInsights
          datasources.datasources_yaml.datasources[0].type=grafana-azure-monitor-datasource
          datasources.datasources_yaml.datasources[0].jsonData.appInsightsAppId=$(appinsights-application-id)
          datasources.datasources_yaml.datasources[0].jsonData.appInsightsApiKey=$(appinsights-api-key)
          datasources.datasources_yaml.datasources[0].secureJsonData.appInsightsApiKey=$(appinsights-api-key)
```

### 2.2. Create namespace.yaml file

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
```

### 2.3. Create values.yaml file

```yaml
# values.yaml
image:
  repository: grafana/grafana
  tag: latest

persistence:
  enabled: true
  storageClassName: default
  accessModes:
    - ReadWriteOnce
  size: 10Gi

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - grafana.yourdomain.com
  tls:
    - secretName: grafana-tls
      hosts:
        - grafana.yourdomain.com

plugins:
  - grafana-azure-monitor-datasource

grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
```

## Step 3: Configure Azure DevOps Service Connection

1. In Azure DevOps, go to Project Settings > Service connections
2. Create a new service connection of type "Azure Resource Manager"
3. Configure it with the appropriate permissions to access your AKS cluster and Key Vault

## Step 4: Configure Kubernetes RBAC

Create a role and role binding for the service account that will deploy Grafana:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-deployer
  namespace: monitoring
rules:
- apiGroups: ["", "extensions", "apps"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-deployer-binding
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana-deployer
subjects:
- kind: ServiceAccount
  name: default
  namespace: monitoring
```

## Step 5: Run the Pipeline

Commit and push your files to the repository. The pipeline should trigger automatically and deploy Grafana to your AKS cluster with Application Insights configured as a data source.

## Verification

After deployment:
1. Get the external IP:
   ```bash
   kubectl get svc -n monitoring
   ```
2. Access Grafana using the external IP or configured domain
3. Verify that the Application Insights data source is properly configured

## Additional Considerations

1. **Security**: Consider adding network policies to restrict access to Grafana
2. **Monitoring**: Set up monitoring for Grafana itself
3. **Backup**: Implement regular backups of Grafana dashboards and configuration
4. **Updates**: Set up a pipeline to regularly update Grafana and its plugins
5. **Scaling**: Configure horizontal pod autoscaling for Grafana if needed

This approach provides a secure, automated way to deploy Grafana on AKS with all credentials managed through Azure Key Vault and deployment automated through Azure DevOps.
