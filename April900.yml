@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
LAYOUT_WITH_LEGEND()
title Dedicated Observability Platform Diagram 

Person(user, "Developer\nSRE", "SSO" , "Corporate user accessing observability dashboards via Azure AD SSO")

System_Boundary(aks_cluster, "Dedicated AKS Cluster") {
    System(grafana, "Grafana Service", "Unified dashboard for observability data visualization")
    System(otel, "OTel Collector Service", "Collects, processes, and routes telemetry data")
    System(prometheus, "Prometheus", "Time-series database for metrics storage")
    System(loki, "Loki", "Log aggregation system")
    System(jaeger, "Jaeger", "Distributed tracing system")
    System(ingress, "Internal NGINX Ingress Controller", "load Balancer" "Routes incoming telemetry data")
}

'System(app_pods, "Application Pods", "Source applications generating telemetry data")
System(vm_agents, "Non-Prod AKS Clusters (DEV + FT)", "AKS" ,"workloads emitting telemetry signal")
System(blob_storage, "Storage", "Azure Blob Storage", "Cloud storage for long-term data retention")
System_Ext(aad, , "AAD", "Azure AD", "Provides SSO authentication")

' Define relationships
'Rel(app_pods, ingress, "Sends OTLP/gRPC (metrics, logs, traces)")
Rel(vm_agents, ingress, "Sends OTLP/gRPC (metrics, logs, traces)")
Rel(ingress, otel, "Routes traffic")
Rel(otel, prometheus, "Sends metrics")
Rel(otel, loki, "Sends logs")
Rel(otel, jaeger, "Sends traces")
Rel(prometheus, grafana, "Queried for metrics")
Rel(loki, grafana, "Queried for logs")
Rel(jaeger, grafana, "Queried for traces")
Rel(prometheus, blob_storage, "Exports metrics snapshot for retention")
Rel(loki, blob_storage, "Exports log data for retention")
Rel(user, grafana, "Accesses via browser", "HTTPS")
Rel(user, aad, "Authenticates with")
Rel(aad, grafana, "Validates token for", "OAuth/OIDC")

@enduml
