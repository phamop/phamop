Error from server (InternalError): error when applying patch:
{"spec":{"ports":[{"name":"otlp-grpc","port":4317,"protocol":"TCP"},{"name":"otlp-http","port":4318,"protocol":"TCP"},{"name":"jaeger-grpc","port":14250,"protocol":"TCP"},{"name":"jaeger-thrift-c","port":6831,"protocol":"TCP"},{"name":"jaeger-thrift-h","port":14268,"protocol":"TCP"},{"name":"metrics","port":8888,"protocol":"TCP"},{"name":"prom-metrics","port":8889,"protocol":"TCP"},{"name":"health","port":13133,"protocol":"TCP"}],"resources":{"limits":{"cpu":"1000m"}}}}
to:
Resource: "opentelemetry.io/v1beta1, Resource=opentelemetrycollectors", GroupVersionKind: "opentelemetry.io/v1beta1, Kind=OpenTelemetryCollector"
Name: "otel-collector", Namespace: "monitoring"
for: "/azp/agent/_work/25/s/kustomize/overlays/EDIT/05opentelemetry/kustomization-output.yaml": error when patching "/azp/agent/_work/25/s/kustomize/overlays/EDIT/05opentelemetry/kustomization-output.yaml": Internal error occurred: failed calling webhook "mopentelemetrycollectorbeta.kb.io": failed to call webhook: Post "https://opentelemetry-operator-webhook.monitoring.svc:443/mutate-opentelemetry-io-v1beta1-opentelemetrycollector?timeout=10s": tls: failed to verify certificate: x509: certificate is valid for opentelemetry-operator-webhook.eddv-bld.svc, opentelemetry-operator-webhook.eddv-bld.svc.cluster.local, not opentelemetry-operator-webhook.monitoring.svc
*** Done



apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector  
# namespace: monitoring
  labels:
    app: opentelemetry-collector
spec:
  mode: deployment
  image: otel/opentelemetry-collector-contrib:0.128.0
  serviceAccount: opentelemetry-collector
  replicas: 2
  
  ports:
    - name: otlp-grpc
      port: 4317
      protocol: TCP
    - name: otlp-http
      port: 4318
      protocol: TCP
    - name: jaeger-grpc
      port: 14250
      protocol: TCP
    - name: jaeger-thrift-c  
      port: 6831
      protocol: TCP
    - name: jaeger-thrift-h  
      port: 14268
      protocol: TCP
    - name: metrics
      port: 8888
      protocol: TCP
    - name: prom-metrics
      port: 8889
      protocol: TCP
    - name: health
      port: 13133
      protocol: TCP

  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: K8S_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: K8S_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: K8S_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP

  resources:
    requests:
      cpu: 500m
      memory: 800Mi
    limits:
      cpu: 1000m
      memory: 1600Mi

  config:
    extensions:
      health_check:
        endpoint: "0.0.0.0:13133"
      pprof:
        endpoint: "0.0.0.0:1777"
      zpages:
        endpoint: "0.0.0.0:55679"

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
          http:
            endpoint: "0.0.0.0:4318"
      jaeger:
        protocols:
          grpc:
            endpoint: "0.0.0.0:14250"
          thrift_compact:
            endpoint: "0.0.0.0:6831"
          thrift_http:
            endpoint: "0.0.0.0:14268"
      loki:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
          http:
            endpoint: "0.0.0.0:4318"
            include_metadata: true
        use_incoming_timestamp: true
      prometheus/node:
        config:
          scrape_configs:
            - job_name: 'node-exporter'
              scrape_interval: 10s
              static_configs:
                - targets: ['prometheus-prometheus-node-exporter.monitoring.svc:9100']
                  labels:
                    job: 'node-exporter'
                    cluster: 'clustername'

    processors:
      batch:
        timeout: 200ms
        send_batch_size: 1024
        send_batch_max_size: 4096
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_mib: 64
        limit_mib: 512
      groupbytrace: {}
      resource:
        attributes:
          - key: service.name
            from_attribute: service.name
            action: insert
          - key: k8s.container.name
            from_attribute: k8s.container.name
            action: insert
          - key: k8s.namespace.name
            from_attribute: k8s.namespace.name
            action: insert
          - key: k8s.pod.name
            from_attribute: k8s.pod.name
            action: insert
          - key: k8s.node.name
            from_attribute: k8s.node.name
            action: insert
          - key: host.name
            from_attribute: host.name
            action: insert
          - key: service.name
            from_attribute: service.name
            action: upsert
          - key: service.namespace
            from_attribute: service.namespace
            action: upsert
          - key: cluster.name
            value: clustername
            action: insert
          - key: exporter
            value: "node-exporter"
            action: insert
      resourcedetection:
        detectors: [env, system]
        override: false
        timeout: 2s
      transform:
        log_statements:
          - context: log
            statements:
              - set(attributes["processing.note"], "Log enriched with resource and trace context")
              - set(attributes["service.name"], resource.attributes["service.name"])
              - set(attributes["k8s.pod.name"], resource.attributes["k8s.pod.name"])
              - set(attributes["k8s.node.name"], resource.attributes["k8s.node.name"])
              - set(attributes["host.name"], resource.attributes["host.name"])
              - set(attributes["cluster.name"], resource.attributes["cluster.name"])
              - set(attributes["trace_id"], trace_id)
              - set(attributes["span_id"], span_id)
      metricstransform:
        transforms:
          - include: system.cpu.usage
            action: update
            operations:
              - action: add_label
                new_label: host.name
                new_value: host.name
              - action: add_label
                new_label: cluster.name
                new_value: clustername
          - include: system.memory.usage
            action: update
            operations:
              - action: add_label
                new_label: host.name
                new_value: host.name
              - action: add_label
                new_label: cluster.name
                new_value: clustername

    exporters:
      debug:
        verbosity: detailed
      otlphttp:
        endpoint: http://loki-write.monitoring.svc.cluster.local:3100/otlp
        tls:
          insecure: true
        headers:
          X-Scope-OrgID: tenant-1
      prometheus:
        endpoint: "0.0.0.0:8889"  
        namespace: monitoring
        const_labels:
          k8s_cluster: clustername
        send_timestamps: true
        enable_open_metrics: true
      otlp/jaeger:
        endpoint: jaeger-collector.monitoring.svc.cluster.local:4317
        tls:
          insecure: true

    service:
      telemetry:
        metrics:
          level: detailed
      extensions: [health_check, pprof, zpages]
      pipelines:
        metrics:
          receivers: [otlp, prometheus/node]
          processors: [memory_limiter, resourcedetection, resource, metricstransform, batch]
          exporters: [debug, prometheus]
        traces:
          receivers: [otlp, jaeger]
          processors: [memory_limiter, resourcedetection, resource, groupbytrace, batch]
          exporters: [debug, otlp/jaeger]
        logs:
          receivers: [otlp, loki]
          processors: [memory_limiter, resourcedetection, resource, transform, batch]
          exporters: [debug, otlphttp]

---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: opentelemetry-operator-mutating-webhook-configuration
  annotations:
    cert-manager.io/inject-ca-from: monitoring/opentelemetry-operator-service-cert

















---
namespace: monitoring

resources:
- opentelemetry-certificate.yaml
- ../../../base/opentelemetry-operator
- clusterrolebinding.yaml

patches:
- opentelemetry-webhook-patch.yaml

cluster/
├── base
│   ├── cert-manager-operator
│   │   ├── kustomization.yaml
│   │   └── namespace.yaml
│   ├── eck-elasticsearch-operator
│   │   ├── kustomization.yaml
│   │   └── namespace.yaml
│   ├── jaeger-operator
│   │   ├── kustomization.yaml
│   │   └── namespace.yaml
│   └── opentelemetry-operator
│       ├── clusterroles.yaml
│       ├── kustomization.yaml
│       ├── namespace.yaml
│       └── serviceaccount.yaml
└── overlays
    ├── EDDV
    │   ├── cert-manager-operator
    │   │   └── kustomization.yaml
    │   └── opentelemetry-operator
    │       └── kustomization.yaml
    └── EDIT
        ├── cert-manager-operator
        │   └── kustomization.yaml
        ├── eck-elasticsearch-operator
        │   └── kustomization.yaml
        ├── jaeger-operator
        │   └── kustomization.yaml
        └── opentelemetry-operator
            ├── clusterrolebinding.yaml
            ├── kustomization.yaml
            ├── opentelemetry-certificate.yaml
            └── opentelemetry-webhook-patch.yaml



# cluster/overlays/EDIT/certs/opentelemetry-certificate.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: otel-selfsigned-issuer
  namespace: monitoring
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: opentelemetry-operator-service-cert
  namespace: monitoring
spec:
  dnsNames:
    - opentelemetry-operator-webhook-service.monitoring.svc
    - opentelemetry-operator-webhook-service.monitoring.svc.cluster.local
    - opentelemetry-operator-webhook-service.eddv-bld.svc
    - opentelemetry-operator-webhook-service.eddv-bld.svc.cluster.local
  secretName: opentelemetry-operator-service-cert
  issuerRef:
    name: otel-selfsigned-issuer
    kind: Issuer



#cluster/overlays/EDIT/certs/opentelemetry-webhook-patch.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: opentelemetry-operator-mutating-webhook-configuration
  annotations:
    cert-manager.io/inject-ca-from: monitoring/opentelemetry-operator-service-cert
