# GitLab 17.7 Migration from RHEL 7 to RHEL 9

## Overview
This guide covers migrating GitLab 17.7 from Red Hat Enterprise Linux 7 to RHEL 9. This process involves setting up a new RHEL 9 server and migrating all GitLab data, configurations, and dependencies.

## Prerequisites
- Current GitLab 17.7 running on RHEL 7
- New RHEL 9 server with adequate resources
- Administrative access to both systems
- Network connectivity between source and destination
- Sufficient storage for backup files

## Phase 1: Pre-Migration Planning

### 1.1 Document Current Environment
```bash
# On RHEL 7 source system
gitlab-rake gitlab:env:info
gitlab-rake gitlab:check
systemctl status gitlab-runsvdir
df -h
free -m
```

### 1.2 Check GitLab Configuration
```bash
# Review current configuration
cat /etc/gitlab/gitlab.rb
gitlab-ctl show-config
```

### 1.3 Verify System Resources
- CPU: Minimum 4 cores recommended
- RAM: Minimum 8GB, 16GB+ recommended
- Storage: Plan for 2x current data size during migration
- Network: Stable connection between systems

## Phase 2: Backup Current GitLab Instance

### 2.1 Create Full Backup
```bash
# Stop GitLab services except PostgreSQL and Redis
gitlab-ctl stop unicorn
gitlab-ctl stop puma
gitlab-ctl stop sidekiq
gitlab-ctl stop nginx
gitlab-ctl stop gitlab-workhorse
gitlab-ctl stop gitaly

# Create backup
gitlab-backup create BACKUP=full_migration_$(date +%Y%m%d_%H%M%S)

# Backup configuration files
tar -czf gitlab-config-backup-$(date +%Y%m%d_%H%M%S).tar.gz /etc/gitlab/

# Note the backup filename for later use
ls -la /var/opt/gitlab/backups/
```

### 2.2 Export Additional Data
```bash
# Export SSL certificates if using custom certs
cp -r /etc/gitlab/ssl/ ~/ssl-backup/

# Export any custom scripts or hooks
find /var/opt/gitlab -name "*.sh" -o -name "*hook*" | xargs tar -czf custom-scripts-backup.tar.gz

# Document external integrations
gitlab-rails console -e production
# In console: puts Gitlab.config.omniauth.providers.map(&:name)
```

## Phase 3: Prepare RHEL 9 Target System

### 3.1 System Updates and Prerequisites
```bash
# Update RHEL 9 system
dnf update -y

# Install required packages
dnf install -y curl policycoreutils openssh-server perl
dnf install -y postfix
systemctl enable postfix
systemctl start postfix

# Configure firewall
firewall-cmd --permanent --add-http
firewall-cmd --permanent --add-https
firewall-cmd --permanent --add-service=ssh
firewall-cmd --reload
```

### 3.2 Install GitLab Repository
```bash
# Add GitLab repository
curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | bash

# Or for Community Edition:
curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | bash
```

### 3.3 Install Specific GitLab Version
```bash
# Install GitLab 17.7.x (match source version exactly)
dnf install -y gitlab-ee-17.7.0

# Or for Community Edition:
dnf install -y gitlab-ce-17.7.0

# Prevent automatic updates during migration
dnf versionlock gitlab-ee
```

## Phase 4: Transfer and Restore Data

### 4.1 Transfer Backup Files
```bash
# From RHEL 7 source to RHEL 9 target
scp /var/opt/gitlab/backups/full_migration_*.tar root@rhel9-target:/var/opt/gitlab/backups/
scp gitlab-config-backup-*.tar.gz root@rhel9-target:/tmp/
scp -r ~/ssl-backup root@rhel9-target:/tmp/
```

### 4.2 Restore Configuration
```bash
# On RHEL 9 target system
cd /tmp
tar -xzf gitlab-config-backup-*.tar.gz

# Copy configuration (review before applying)
cp -r etc/gitlab/* /etc/gitlab/

# Review and modify gitlab.rb for new system
vim /etc/gitlab/gitlab.rb
# Update any RHEL 7 specific paths or configurations
# Verify external_url is correct
# Check database and Redis configurations
```

### 4.3 Configure GitLab
```bash
# Initial configuration without starting services
gitlab-ctl reconfigure

# Stop all services before restore
gitlab-ctl stop
```

### 4.4 Restore Data
```bash
# Set correct permissions
chown git:git /var/opt/gitlab/backups/full_migration_*.tar
chmod 600 /var/opt/gitlab/backups/full_migration_*.tar

# Restore from backup
gitlab-backup restore BACKUP=full_migration_YYYYMMDD_HHMMSS

# Follow prompts and confirm restoration
```

## Phase 5: Post-Migration Configuration

### 5.1 SSL Certificate Setup
```bash
# If using custom SSL certificates
cp -r /tmp/ssl-backup/* /etc/gitlab/ssl/
chown root:root /etc/gitlab/ssl/*
chmod 600 /etc/gitlab/ssl/*.key
chmod 644 /etc/gitlab/ssl/*.crt
```

### 5.2 Start and Verify Services
```bash
# Reconfigure GitLab
gitlab-ctl reconfigure

# Start all services
gitlab-ctl start

# Check service status
gitlab-ctl status

# Verify GitLab health
gitlab-rake gitlab:check
gitlab-rake gitlab:doctor:secrets
```

### 5.3 Database Migration Tasks
```bash
# Run database migrations if needed
gitlab-rake db:migrate

# Clear cache
gitlab-rake cache:clear

# Reindex Elasticsearch if used
gitlab-rake gitlab:elastic:index
```

## Phase 6: Testing and Validation

### 6.1 Functional Testing
```bash
# Test GitLab components
gitlab-rake gitlab:check SANITIZE=true

# Test email functionality
gitlab-rails console -e production
# In console: Notify.test_email('admin@example.com', 'Test', 'Test message').deliver_now
```

### 6.2 Application Testing
- Log in via web interface
- Test Git operations (clone, push, pull)
- Verify CI/CD pipelines
- Check integrations (LDAP, OAuth, etc.)
- Test backup functionality
- Verify GitLab Pages (if used)
- Test Container Registry (if used)

### 6.3 Performance Verification
```bash
# Monitor system resources
htop
iotop
gitlab-ctl tail

# Check GitLab performance
gitlab-rake gitlab:check:performance
```

## Phase 7: DNS and Traffic Cutover

### 7.1 Update DNS Records
```bash
# Update A records to point to new RHEL 9 server
# Update any CNAME records
# Consider using lower TTL during migration
```

### 7.2 Load Balancer Configuration
```bash
# If using load balancer, update backend servers
# Test health checks
# Gradually shift traffic
```

## Phase 8: Post-Migration Cleanup

### 8.1 Final Verification
```bash
# Full system check
gitlab-rake gitlab:check

# Verify all data migrated correctly
# Check project repositories
# Verify user accounts and permissions
# Test all integrations
```

### 8.2 Update Monitoring
```bash
# Update monitoring configurations
# Update backup scripts for new paths
# Update any automation scripts
```

### 8.3 Documentation Update
- Update system documentation
- Record new server details
- Document any configuration changes
- Update disaster recovery procedures

## Phase 9: Decommissioning Old System

### 9.1 Final Backup
```bash
# Create final backup of RHEL 7 system
gitlab-backup create BACKUP=final_rhel7_$(date +%Y%m%d_%H%M%S)

# Store backup securely offsite
```

### 9.2 System Shutdown
```bash
# After confirming successful migration (wait 1-2 weeks)
# Stop GitLab services
gitlab-ctl stop

# Power down RHEL 7 system
# Keep system available for rollback if needed
```

## Troubleshooting Common Issues

### Database Connection Issues
```bash
# Check PostgreSQL status
gitlab-ctl status postgresql

# Review database logs
gitlab-ctl tail postgresql

# Reset database connection
gitlab-ctl restart postgresql
gitlab-ctl reconfigure
```

### Permission Issues
```bash
# Fix GitLab file permissions
gitlab-ctl reconfigure
gitlab-rake gitlab:check

# Manual permission fix if needed
chown -R git:git /var/opt/gitlab/git-data/
```

### Service Startup Issues
```bash
# Check service logs
gitlab-ctl tail

# Restart individual services
gitlab-ctl restart unicorn
gitlab-ctl restart sidekiq

# Full restart
gitlab-ctl restart
```

## Rollback Procedure

If migration fails, rollback to RHEL 7:

1. Stop GitLab on RHEL 9
2. Update DNS to point back to RHEL 7
3. Start services on RHEL 7 system
4. Verify functionality
5. Plan migration retry with lessons learned

## Best Practices

- **Test in staging environment first**
- **Plan for maintenance window**
- **Communicate with users about downtime**
- **Keep RHEL 7 system available for rollback**
- **Document all changes and configurations**
- **Monitor system closely after migration**
- **Update backup and monitoring procedures**

## Migration Checklist

- [ ] Current system documented and backed up
- [ ] RHEL 9 system prepared and configured
- [ ] GitLab 17.7 installed on target system
- [ ] Data backup transferred and restored
- [ ] SSL certificates configured
- [ ] All services started and verified
- [ ] Functional testing completed
- [ ] DNS updated
- [ ] Users notified of completion
- [ ] Old system safely decommissioned

This migration process should be thoroughly tested in a staging environment before executing in production.





#############################################


# Detailed Process for Migrating GitLab 17.7 from RHEL7 to RHEL9

This guide outlines the step-by-step process for migrating GitLab 17.7 from RHEL7 to RHEL9. The migration involves backup, new server setup, data transfer, and verification.

## Prerequisites

- Maintenance window for downtime
- Sufficient storage for backups
- RHEL9 server with similar or better specifications
- Root access to both systems
- Current GitLab version is 17.7 (verify with `gitlab-rake gitlab:env:info`)

## Phase 1: Preparation

### 1.1 Verify Current Installation
```bash
# Check current version
sudo gitlab-rake gitlab:env:info

# Check database size
sudo -u gitlab-psql /opt/gitlab/embedded/bin/psql -h /var/opt/gitlab/postgresql -d gitlabhq_production -c "SELECT pg_size_pretty(pg_database_size('gitlabhq_production'));"

# Check repository storage usage
du -sh /var/opt/gitlab/git-data/repositories
```

### 1.2 Prepare RHEL9 Server
```bash
# Register system with subscription manager
sudo subscription-manager register --username <your_username> --password <your_password>
sudo subscription-manager attach --auto

# Enable required repositories
sudo subscription-manager repos --enable=rhel-9-for-x86_64-baseos-rpms
sudo subscription-manager repos --enable=rhel-9-for-x86_64-appstream-rpms
```

### 1.3 Install Dependencies on RHEL9
```bash
# Install required packages
sudo dnf install -y curl policycoreutils openssh-server postfix

# Enable and start services
sudo systemctl enable sshd
sudo systemctl start sshd
sudo systemctl enable postfix
sudo systemctl start postfix
```

## Phase 2: Backup on RHEL7

### 2.1 Create Full Backup
```bash
# Create backup (this will pause GitLab services)
sudo gitlab-backup create STRATEGY=copy

# Backup configuration files
sudo tar -czvf /tmp/gitlab_config_backup.tar.gz /etc/gitlab /var/opt/gitlab/nginx/conf /var/opt/gitlab/gitlab-rails/etc
```

### 2.2 Verify Backup
```bash
# List backup files
sudo ls -lh /var/opt/gitlab/backups/

# Check backup integrity (optional but recommended)
sudo gitlab-rake gitlab:backup:verify
```

## Phase 3: Install GitLab on RHEL9

### 3.1 Install GitLab 17.7 on RHEL9
```bash
# Add GitLab repository
curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash

# Install specific version (17.7)
sudo EXTERNAL_URL="http://gitlab.example.com" dnf install -y gitlab-ee-17.7.0-ee.0.el9.x86_64
```

### 3.2 Restore Configuration
```bash
# Copy backup files to new server (from RHEL7 to RHEL9)
scp /var/opt/gitlab/backups/<timestamp>_gitlab_backup.tar root@new-server:/var/opt/gitlab/backups/
scp /tmp/gitlab_config_backup.tar.gz root@new-server:/tmp/

# On RHEL9 server, extract configuration
sudo tar -xzvf /tmp/gitlab_config_backup.tar.gz -C /
```

### 3.3 Restore Backup
```bash
# Stop services
sudo gitlab-ctl stop unicorn
sudo gitlab-ctl stop sidekiq

# Restore backup (use same timestamp as backup file)
sudo gitlab-backup restore BACKUP=<timestamp>

# Reconfigure GitLab
sudo gitlab-ctl reconfigure
sudo gitlab-ctl restart
```

## Phase 4: Post-Migration Verification

### 4.1 Verify Data Integrity
```bash
# Check version
sudo gitlab-rake gitlab:env:info

# Verify repositories
sudo gitlab-rake gitlab:check

# Run integrity checks
sudo gitlab-rake gitlab:artifacts:check
sudo gitlab-rake gitlab:lfs:check
sudo gitlab-rake gitlab:uploads:check
```

### 4.2 Test Functionality
- Log in as admin and verify projects
- Test repository push/pull operations
- Verify CI/CD pipelines
- Check integrations and webhooks

## Phase 5: Finalization

### 5.1 Update DNS/Network Configuration
```bash
# Update external URL if needed
sudo vi /etc/gitlab/gitlab.rb
sudo gitlab-ctl reconfigure
```

### 5.2 Enable Regular Backups
```bash
# Set up backup cron job
sudo crontab -e
# Add line: 0 2 * * * /opt/gitlab/bin/gitlab-backup create CRON=1
```

### 5.3 Monitor System
```bash
# Check logs for errors
sudo gitlab-ctl tail

# Monitor performance
sudo gitlab-ctl status
top
```

## Troubleshooting Tips

1. **Permission Issues**: Run `sudo gitlab-ctl reconfigure` and `sudo gitlab-ctl restart`
2. **Database Problems**: Check PostgreSQL logs at `/var/log/gitlab/postgresql/`
3. **Missing Repositories**: Verify `/etc/gitlab/gitlab.rb` storage paths match original
4. **SMTP Issues**: Reconfigure email settings in `/etc/gitlab/gitlab.rb`

## Rollback Procedure

If migration fails:
1. Keep RHEL7 server running
2. Restore from backup on RHEL7 if needed
3. Revert DNS changes to point back to RHEL7 server

This comprehensive process ensures a smooth migration of your GitLab instance from RHEL7 to RHEL9 while minimizing downtime and data loss risks.

                           
