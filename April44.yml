@startuml Observability_AKS_C4_L3_Dedicated
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
LAYOUT_TOP_DOWN()

title <color:#0078D4>Observability AKS Platform – Component View (L3)</color>\n<size:12>Dedicated Observability AKS Cluster managing FT & DEV telemetry</size>

' =========================
' GLOBAL STYLE
' =========================
skinparam defaultFontColor #000000
skinparam rectangleFontColor #000000
skinparam arrowFontColor #000000
skinparam noteFontColor #000000
skinparam shadowing true
skinparam arrowThickness 2
skinparam arrowColor #444444
skinparam backgroundColor #FFFFFF

' =========================
' EXTERNAL ACTORS
' =========================
Person(dev, "Developer/SRE", "Monitors both DEV & FT") #B3E5FC/Black
System_Ext(ingress, "Azure Load Balancer / Ingress", "External traffic entry point") #FFE0B2/Black
System_Ext(blob, "Azure Blob Storage", "Long-term storage") #DDDDDD/Black

' =========================
' DEV + FT CLUSTERS (Telemetry Sources)
' =========================
Container_Boundary(aks_sources, "FT & DEV AKS Clusters (Telemetry Sources)") #F1F8E9 {

  Container_Boundary(aks_dev, "AKS DEV Cluster") #E8F5E9 {
    Component(dev_apps, "DEV Applications", "Microservices, APIs") #C8E6C9
    Component(dev_kube, "Kubernetes Components", "kubelet, kube-proxy, API server") #C8E6C9
    Component(dev_nodes, "Node Metrics", "CPU, Memory, Disk, Network") #C8E6C9
    Component(dev_otel_agent, "OTel Agent", "DaemonSet collector") #A5D6A7
  }

  Container_Boundary(aks_ft, "AKS FT Cluster") #E3F2FD {
    Component(ft_apps, "FT Applications", "Test Services, Load Tests") #BBDEFB
    Component(ft_kube, "Kubernetes Components", "kubelet, kube-proxy, API server") #BBDEFB
    Component(ft_nodes, "Node Metrics", "CPU, Memory, Disk, Network") #BBDEFB
    Component(ft_otel_agent, "OTel Agent", "DaemonSet collector") #90CAF9
  }
}

' =========================
' DEDICATED OBSERVABILITY AKS CLUSTER
' =========================
Container_Boundary(obs_aks, "Dedicated Observability AKS Cluster") #FFF3E0 {

  ' ---- OTel Collector ----
  Container_Boundary(otel_collector, "OTel Collector Pod") #FFF9C4 {
    Component(otel_rcv, "Receivers", "OTLP, Prometheus, Jaeger, K8s") #FFF59D
    Component(otel_proc, "Processors", "Batch, Resource, Transform, Enrich") #FFF59D
    Component(otel_exp, "Exporters", "Prometheus, Loki, Jaeger, Azure Monitor") #FFEB3B
  }

  ' ---- Mimir Stack ----
  Container_Boundary(mimir_stack, "Mimir") #FBE9E7 {
    Component(mimir_dist, "Mimir Distributor", "Receives Remote Write") #FFAB91
    Component(mimir_ing, "Mimir Ingester", "Stores TSDB Blocks") #FF8A65
    Component(mimir_query, "Mimir Query Frontend", "PromQL Queries") #FF7043
    Component(mimir_querier, "Mimir Querier", "Executes Queries") #FF6F00
    Component(mimir_store, "Mimir Store Gateway", "Long-term Storage Access") #FF5722
    Component(mimir_compact, "Mimir Compactor", "Block Compaction") #E65100
  }

  ' ---- Loki ----
  Container_Boundary(loki_stack, "Loki") #E0F7FA {
    Component(loki_dist, "Distributor", "Receives Logs") #B2EBF2
    Component(loki_ing, "Ingester", "Stores Chunks") #80DEEA
    Component(loki_q, "Querier", "Executes LogQL") #4DD0E1
  }

  ' ---- Jaeger ----
  Container_Boundary(jaeger_stack, "Jaeger") #F3E5F5 {
    Component(jaeger_col, "Collector", "Receives Spans") #E1BEE7
    Component(jaeger_ing, "Ingester", "Stores Spans") #CE93D8
    Component(jaeger_q, "Query Service", "Trace Query API") #BA68C8
  }

  ' ---- Grafana ----
  Container_Boundary(grafana_pod, "Grafana Pod") #E8EAF6 {
    Component(gf_core, "Grafana Core", "Dashboards, Alerts") #C5CAE9
    Component(gf_ds, "Data Sources", "Prometheus, Loki, Jaeger") #9FA8DA
    Component(gf_alert, "Alerting Engine", "Rules & Notifications") #7986CB
    Component(gf_auth, "OAuth2 Proxy", "Azure AD SSO") #5C6BC0
  }
}

' =========================
' TELEMETRY FLOWS
' =========================

' DEV cluster signals (green arrows)
Rel(dev_apps, dev_otel_agent, "📊📜🔍 Telemetry", "OTLP") #388E3C
Rel(dev_kube, dev_otel_agent, "📊 API Metrics", "HTTP") #388E3C
Rel(dev_nodes, dev_otel_agent, "📊 Node Metrics", "HTTP") #388E3C
Rel(dev_otel_agent, otel_rcv, "DEV → Telemetry", "OTLP gRPC") #388E3C

' FT cluster signals (blue arrows)
Rel(ft_apps, ft_otel_agent, "📊📜🔍 Telemetry", "OTLP") #1565C0
Rel(ft_kube, ft_otel_agent, "📊 API Metrics", "HTTP") #1565C0
Rel(ft_nodes, ft_otel_agent, "📊 Node Metrics", "HTTP") #1565C0
Rel(ft_otel_agent, otel_rcv, "FT → Telemetry", "OTLP gRPC") #1565C0

' Ingress telemetry (grey arrows)
Rel(ingress, otel_rcv, "📜 Ingress Logs", "HTTP") #666666

' Collector → processing → exporters
Rel(otel_rcv, otel_proc, "Raw telemetry", "Internal") #F57F17
Rel(otel_proc, otel_exp, "Processed telemetry", "Internal") #F57F17
Rel(otel_exp, mimir_dist, "📊 Metrics", "Remote Write") #E64A19
Rel(otel_exp, loki_dist, "📜 Logs", "HTTP Push") #00838F
Rel(otel_exp, jaeger_col, "🔍 Traces", "OTLP gRPC") #6A1B9A

' Mimir internal flow
Rel(mimir_dist, mimir_ing, "📊 Metrics", "gRPC") #D84315
Rel(mimir_ing, blob, "📊 TSDB Blocks", "HTTPS") #D84315
Rel(mimir_compact, blob, "📊 Compacted Blocks", "HTTPS") #D84315
Rel(mimir_store, blob, "📊 Long-term Storage", "HTTPS") #D84315
Rel(mimir_query, mimir_querier, "📊 Query Execution", "gRPC") #D84315
Rel(mimir_querier, mimir_ing, "📊 Recent Data", "gRPC") #D84315
Rel(mimir_querier, mimir_store, "📊 Historical Data", "gRPC") #D84315

' Other backends → Blob
Rel(loki_ing, blob, "📜 Log Chunks", "HTTPS") #006064
Rel(jaeger_ing, blob, "🔍 Spans", "HTTPS") #4A148C

' Grafana queries
Rel(dev, gf_auth, "Access Dashboards", "HTTPS/SSO")
Rel(gf_auth, gf_core, "Auth Tokens")
Rel(gf_core, gf_ds, "Data Queries")
Rel(gf_ds, mimir_query, "📊 PromQL Queries")
Rel(gf_ds, loki_q, "📜 LogQL Queries")
Rel(gf_ds, jaeger_q, "🔍 Trace Queries")
Rel(gf_core, gf_alert, "Execute Alerts")

SHOW_LEGEND()
@enduml
