# AKS Environment Inventory and Mapping Plan

## Problem Statement

**Challenge**: Lack of centralized visibility into the Azure Kubernetes Service (AKS) environment in DEV, leading to challenges in dependency mapping, network security validation, and service inventory management.

## Expected Outcome

A detailed and comprehensive inventory report containing:

- All AKS-related resources within the DEV environment
- Descriptions of resource utilization and purpose
- List of existing microservices deployed on AKS
- Identification and detailed mapping of network resources, including:
  - Ingress Controllers
  - Network Security Groups (NSGs)
- Clear visualization or documentation of how each component connects and interacts with others

## Implementation Approach

### Phase 1: Azure Resource Discovery and Inventory

#### 1.1 AKS Cluster Discovery
Use Azure CLI to identify and catalog all AKS clusters in the DEV environment:

```bash
# List all AKS clusters in DEV resource groups
az aks list --resource-group <dev-resource-group> --output table

# Get detailed information for each cluster
az aks show --name <cluster-name> --resource-group <resource-group> --output json
```

**Inventory Items to Capture:**
- Cluster name and resource group
- Kubernetes version
- Node pool configurations
- Network configuration (CNI, DNS, service CIDR)
- Authentication and authorization settings
- Monitoring and logging configuration

#### 1.2 Network Infrastructure Mapping
Identify and document all network-related resources:

**Virtual Networks (VNETs):**
```bash
# List all VNETs associated with AKS
az network vnet list --resource-group <dev-resource-group> --output table

# Get subnet information
az network vnet subnet list --resource-group <resource-group> --vnet-name <vnet-name>
```

**Network Security Groups (NSGs):**
```bash
# List all NSGs
az network nsg list --resource-group <dev-resource-group> --output table

# Get NSG rules
az network nsg rule list --resource-group <resource-group> --nsg-name <nsg-name>
```

**Load Balancers:**
```bash
# List load balancers
az network lb list --resource-group <dev-resource-group> --output table

# Get load balancer details
az network lb show --name <lb-name> --resource-group <resource-group>
```

#### 1.3 Ingress Controller Discovery

**Azure Ingress Controllers:**
```bash
# List Application Gateways
az network application-gateway list --resource-group <dev-resource-group> --output table

# Get Application Gateway Ingress Controller (AGIC) configuration
kubectl get ingress --all-namespaces
kubectl get ingressclass
```

**NGINX Ingress Controllers:**
```bash
# Identify NGINX ingress controllers
kubectl get pods -n ingress-nginx
kubectl get services -n ingress-nginx
```

### Phase 2: Microservice Discovery and Documentation

#### 2.1 Service Inventory
Document each microservice within AKS clusters:

```bash
# List all services across namespaces
kubectl get services --all-namespaces

# Get detailed service information
kubectl describe service <service-name> -n <namespace>

# List all deployments
kubectl get deployments --all-namespaces

# Get deployment details
kubectl describe deployment <deployment-name> -n <namespace>
```

**Information to Capture for Each Service:**
- Service name and namespace
- Description of the service and functionality
- Team or stakeholders utilizing each microservice
- Resource requirements (CPU, memory, storage)
- Environment variables and configuration
- Exposed ports and endpoints
- Health check configurations

#### 2.2 Application Discovery
Identify and catalog all applications and workloads:

```bash
# List all pods
kubectl get pods --all-namespaces

# Get pod details including labels and annotations
kubectl get pods --all-namespaces --show-labels

# List all ingress resources
kubectl get ingress --all-namespaces
```

### Phase 3: Dependency Mapping and Relationship Documentation

#### 3.1 Network Dependency Mapping
Map relationships between AKS clusters and network components:

**Service-to-Service Communication:**
- Document internal service communication patterns
- Identify external service dependencies
- Map network policies and security rules

**Ingress Traffic Flow:**
- Document how external traffic reaches services
- Map ingress controller configurations
- Identify load balancer relationships

#### 3.2 Data Flow Documentation
Create comprehensive data flow diagrams showing:
- External client requests → Load Balancer → Ingress Controller → Services
- Inter-service communication patterns
- Database and external API connections
- Network security checkpoints

### Phase 4: Automated Inventory Script Development

#### 4.1 Comprehensive Discovery Script
Create a consolidated script to automate the inventory process:

```bash
#!/bin/bash
# AKS Environment Inventory Script

RESOURCE_GROUP="<dev-resource-group>"
OUTPUT_DIR="./aks-inventory"

# Create output directory
mkdir -p $OUTPUT_DIR

# Export AKS resources
az aks list --resource-group $RESOURCE_GROUP --output json > $OUTPUT_DIR/aks-clusters.json

# Export network resources
az network vnet list --resource-group $RESOURCE_GROUP --output json > $OUTPUT_DIR/vnets.json
az network nsg list --resource-group $RESOURCE_GROUP --output json > $OUTPUT_DIR/nsgs.json
az network lb list --resource-group $RESOURCE_GROUP --output json > $OUTPUT_DIR/load-balancers.json

# Export Kubernetes resources
kubectl get all --all-namespaces -o json > $OUTPUT_DIR/k8s-resources.json
kubectl get ingress --all-namespaces -o json > $OUTPUT_DIR/ingress-resources.json
```

#### 4.2 Regular Inventory Updates
Implement scheduled inventory updates:
- Weekly automated resource discovery
- Change detection and alerting
- Inventory drift reporting

## Deliverables

### 1. Infrastructure Inventory Report
**Format**: Excel spreadsheet with multiple tabs
**Contents**:
- AKS Clusters tab: Cluster details, configuration, and status
- Network Resources tab: VNETs, NSGs, Load Balancers
- Ingress Controllers tab: All ingress configurations and routing rules

### 2. Microservice Catalog
**Format**: Structured documentation (Markdown/Wiki)
**Contents**:
- Service registry with descriptions
- Team ownership mapping
- Resource utilization metrics
- Inter-service dependencies

### 3. Network Architecture Diagram
**Format**: Visio/Draw.io diagrams
**Contents**:
- High-level network topology
- Traffic flow diagrams
- Security boundary documentation
- Component relationship mapping

### 4. Dependency Matrix
**Format**: Interactive dashboard or spreadsheet
**Contents**:
- Service-to-service dependencies
- Network security rule mappings
- External dependency tracking
- Impact analysis matrix

## Implementation Timeline

**Week 1-2**: Resource discovery and initial inventory
**Week 3**: Microservice cataloging and documentation
**Week 4**: Dependency mapping and relationship analysis
**Week 5**: Documentation consolidation and visualization creation
**Week 6**: Automation script development and testing

## Tools and Technologies

**Azure CLI**: Resource discovery and management
**kubectl**: Kubernetes resource inspection
**PowerShell/Bash**: Automation scripting
**Excel/CSV**: Data organization and reporting
**Draw.io/Visio**: Network diagrams and visualization
**Markdown**: Documentation format
**Git**: Version control for scripts and documentation

## Success Metrics

- Complete inventory of all AKS resources in DEV environment
- 100% microservice cataloging with ownership information
- Clear network dependency mapping
- Automated inventory refresh capability
- Reduced time to resolve network and service issues by 50%
- Improved security posture through visibility into NSG rules and network flows

## Maintenance and Updates

**Monthly Reviews**: Validate inventory accuracy and update documentation
**Quarterly Assessments**: Review dependency mappings and update network diagrams
**Continuous Monitoring**: Implement alerting for new resource deployments
**Documentation Updates**: Maintain current service descriptions and team ownership information

## Risk Mitigation

**Access Requirements**: Ensure proper Azure and Kubernetes permissions
**Data Sensitivity**: Classify and protect sensitive configuration information
**Change Management**: Implement approval process for inventory script modifications
**Backup Strategy**: Regular backups of inventory data and documentation










































Description:

Lack of centralized visibility into the Azure Kubernetes Service (AKS) environment in DEV, leading to challenges in dependency mapping, network security validation, and service inventory management.


Expected Outcome:

A detailed and comprehensive inventory report containing:

All AKS-related resources within the DEV environment.

Descriptions of resource utilization and purpose.

List of existing microservices deployed on AKS.

Identification and detailed mapping of network resources, including:

Ingress Controllers

Network Security Groups (NSGs)

Clear visualization or documentation of how each component connects and interacts with others.

Implementation Approach:

Use Azure CLI (az resource list) to export AKS resources and related components.

Filter and list inventory to include:

AKS Clusters

VNETs

Network Security Groups (NSGs)

Azure Ingress Controllers

Application Gateway Ingress Controllers (AGIC)

Load Balancers

Document each microservice within AKS:

Service name and namespace

Description of the service and functionality

Team or stakeholders utilizing each microservice

Map and document dependencies between AKS clusters and network components clearly.

Value & Priority:

Impact:

N/A

Priority:

Standard

Done Criteria:

Validation:

Inventory report accurately reflects resources and configurations visible in the Azure Portal.

Microservices documentation matches active deployments within AKS.

Network security groups (NSGs) and ingress controllers correctly documented and verified.


















# Azure Monitor Insights Integration with Grafana on AKS: Implementation Guide

This guide provides a detailed implementation plan for integrating Azure Monitor Insights metrics with Grafana on an existing AKS cluster, using Azure Key Vault for secrets management, without Istio or Azure DevOps CICD pipelines, using Helm charts and CRDs.

## Architecture Overview

```
Azure Monitor Insights → AKS Cluster → Grafana (Helm) → Azure Key Vault (Secrets)
```

## Prerequisites

1. Existing AKS cluster
2. Existing Azure Monitor workspace
3. Existing Azure Key Vault (Goodvault)
4. Helm installed and configured for AKS
5. kubectl configured to access your AKS cluster

## Implementation Steps

### 1. Set Up Azure Monitor Data Source in Grafana

#### Create Helm Values File (`grafana-values.yaml`)

```yaml
# grafana-values.yaml
grafana:
  env:
    GF_AUTH_DISABLE_LOGIN_FORM: "false"
    GF_AUTH_ANONYMOUS_ENABLED: "false"
    
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: AzureMonitor
        type: grafana-azure-monitor-datasource
        access: proxy
        orgId: 1
        jsonData:
          subscriptionId: "$__env{AZURE_SUBSCRIPTION_ID}"
          cloudName: azuremonitor
          azureAuthType: clientsecret
          tenantId: "$__env{AZURE_TENANT_ID}"
          clientId: "$__env{AZURE_CLIENT_ID}"
        secureJsonData:
          clientSecret: "$__env{AZURE_CLIENT_SECRET}"
        version: 1
        editable: true
```

### 2. Store Secrets in Azure Key Vault

Add these secrets to your Goodvault:
- `grafana-admin-user` - Grafana admin username
- `grafana-admin-password` - Grafana admin password
- `azure-client-id` - Azure AD App Client ID
- `azure-client-secret` - Azure AD App Client Secret
- `azure-tenant-id` - Azure AD Tenant ID
- `azure-subscription-id` - Azure Subscription ID

### 3. Create Kubernetes Secrets from Key Vault

Create a script `create-secrets.sh`:

```bash
#!/bin/bash

# Get secrets from Azure Key Vault
GRAFANA_USER=$(az keyvault secret show --vault-name Goodvault --name grafana-admin-user --query value -o tsv)
GRAFANA_PASSWORD=$(az keyvault secret show --vault-name Goodvault --name grafana-admin-password --query value -o tsv)
AZURE_CLIENT_ID=$(az keyvault secret show --vault-name Goodvault --name azure-client-id --query value -o tsv)
AZURE_CLIENT_SECRET=$(az keyvault secret show --vault-name Goodvault --name azure-client-secret --query value -o tsv)
AZURE_TENANT_ID=$(az keyvault secret show --vault-name Goodvault --name azure-tenant-id --query value -o tsv)
AZURE_SUBSCRIPTION_ID=$(az keyvault secret show --vault-name Goodvault --name azure-subscription-id --query value -o tsv)

# Create Kubernetes secret for Grafana
kubectl create secret generic grafana-env-secrets \
  --from-literal=GF_SECURITY_ADMIN_USER=$GRAFANA_USER \
  --from-literal=GF_SECURITY_ADMIN_PASSWORD=$GRAFANA_PASSWORD \
  --from-literal=AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
  --from-literal=AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
  --from-literal=AZURE_TENANT_ID=$AZURE_TENANT_ID \
  --from-literal=AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID
```

### 4. Deploy Grafana with Helm

Create a Helm deployment script `deploy-grafana.sh`:

```bash
#!/bin/bash

# Add Grafana Helm repo
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update

# Install Grafana
helm upgrade --install grafana grafana/grafana \
  --namespace monitoring \
  --create-namespace \
  -f grafana-values.yaml \
  --set "grafana.envFrom[0].secretRef.name=grafana-env-secrets"
```

### 5. Configure Azure Monitor Integration

Create a ConfigMap for Azure Monitor dashboards (`azure-monitor-dashboards.yaml`):

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: azure-monitor-dashboards
  namespace: monitoring
  labels:
    grafana_dashboard: "1"
data:
  azure-monitor-overview.json: |-
    {
      "title": "Azure Monitor Overview",
      "description": "Dashboard for Azure Monitor metrics",
      "tags": ["azure", "monitor"],
      "style": "dark",
      "timezone": "browser",
      "editable": true,
      "panels": [...]
    }
```

Apply with:
```bash
kubectl apply -f azure-monitor-dashboards.yaml
```

### 6. Create Azure DevOps Pipelines

#### Pipeline 1: Grafana Creation Pipeline (`grafana-creation-pipeline.yml`)

```yaml
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - charts/grafana/*

variables:
  - group: global-vars
  - name: environment
    value: dev

stages:
- stage: DeployGrafana
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: 'scripts/deploy-grafana.sh'
```

#### Pipeline 2: Azure Monitor Integration Pipeline (`azure-monitor-integration-pipeline.yml`)

```yaml
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - config/azure-monitor/*

variables:
  - group: global-vars
  - name: environment
    value: dev

stages:
- stage: IntegrateAzureMonitor
  jobs:
  - job: Integrate
    steps:
    - task: AzureKeyVault@1
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        KeyVaultName: 'Goodvault'
        SecretsFilter: '*'
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Create Kubernetes secrets
          ./scripts/create-secrets.sh
          
          # Apply Azure Monitor dashboards
          kubectl apply -f config/azure-monitor-dashboards.yaml
```

### 7. Environment Configuration

Create parameter files for different environments:

#### `dev-values.yaml`
```yaml
grafana:
  ingress:
    enabled: true
    hosts:
      - grafana-dev.$(clusterName).internal
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
```

#### `prod-values.yaml`
```yaml
grafana:
  ingress:
    enabled: true
    hosts:
      - grafana.prod.company.com
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.prod.company.com
```

### 8. Deployment Without DNS and TLS for Dev

For development environment without DNS and TLS:

1. Modify the ingress configuration in `dev-values.yaml`:
```yaml
grafana:
  ingress:
    enabled: true
    hosts:
      - grafana.local
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
```

2. Access Grafana using port-forwarding during development:
```bash
kubectl port-forward svc/grafana 3000:80 -n monitoring
```

### 9. Verification Steps

1. Check Grafana pods are running:
```bash
kubectl get pods -n monitoring -l app.kubernetes.io/name=grafana
```

2. Verify Azure Monitor data source is configured:
```bash
kubectl exec -it -n monitoring $(kubectl get pods -n monitoring -l app.kubernetes.io/name=grafana -o jsonpath='{.items[0].metadata.name}') -- grafana-cli plugins ls
```

3. Check dashboards are imported:
```bash
kubectl get configmap -n monitoring -l grafana_dashboard=1
```

## Maintenance and Monitoring

1. Set up alerts in Azure Monitor for Grafana availability
2. Monitor Grafana logs:
```bash
kubectl logs -n monitoring -l app.kubernetes.io/name=grafana
```

3. Regularly update Helm charts:
```bash
helm repo update
helm upgrade grafana grafana/grafana -n monitoring -f grafana-values.yaml
```

This implementation provides a secure, scalable solution for integrating Azure Monitor Insights with Grafana on AKS, leveraging Azure Key Vault for secrets management and Helm for deployment, without requiring Istio or complex CICD pipelines.
