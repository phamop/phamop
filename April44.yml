@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title <color:#0078D4>Dedicated Observability Platform with OSS Security Stack - Component View (L3)</color>\n<size:12>Security Hardened AKS Cluster with Mimir Metrics Storage</size>

Person(user, "Developer/\nSRE", "Corporate user accessing observability dashboards")

System_Boundary(aks_cluster, "Dedicated AKS Cluster - Security Hardened") {
    
    ' === Security Layer ===
    Container_Boundary(security_layer, "Security & Gateway Layer") #FFE0B2 {
        Component(oauth2_proxy, "OAuth2 Proxy", "OAuth2 Proxy", "Handles authentication and authorization with OIDC") #FFCC80
        Component(ingress, "NGINX Ingress", "NGINX + ModSecurity", "Routes traffic with WAF protection") #FFB74D
        Component(cert_manager, "Cert Manager", "cert-manager", "Automated TLS certificate management with AKV integration") #FFA726
        Component(opa, "OPA Gatekeeper", "Open Policy Agent", "Enforces security policies and compliance") #FF9800
    }
    
    ' === Processing Layer ===
    Container_Boundary(processing_layer, "Telemetry Processing Layer") #FFF9C4 {
        Component(otel_rcv, "OTel Receivers", "OTLP, Prometheus, K8s", "Receives telemetry from sources") #FFF59D
        Component(otel_proc, "OTel Processors", "Batch, Resource, Transform", "Processes and enriches telemetry") #FFEE58
        Component(otel_exp, "OTel Exporters", "Remote Write, HTTP Push", "Exports to storage backends") #FFEB3B
    }
    
    ' === Mimir Stack ===
    Container_Boundary(mimir_stack, "Mimir Metrics Platform") #FBE9E7 {
        Component(mimir_dist, "Mimir Distributor", "Load Balancer", "Receives metrics via remote write with authentication") #FFCCBC
        Component(mimir_ing, "Mimir Ingester", "TSDB Engine", "Stores recent metrics in memory and creates blocks") #FFAB91
        Component(mimir_query_fe, "Mimir Query Frontend", "Query Coordinator", "Handles PromQL queries with caching") #FF8A65
        Component(mimir_querier, "Mimir Querier", "Query Engine", "Executes queries against ingester and store-gateway") #FF7043
        Component(mimir_store, "Mimir Store Gateway", "Block Reader", "Provides access to long-term storage blocks") #FF5722
        Component(mimir_compact, "Mimir Compactor", "Block Manager", "Compacts and manages TSDB blocks lifecycle") #E65100
    }
    
    ' === Storage Layer ===
    Container_Boundary(storage_layer, "Log & Trace Storage") #E0F7FA {
        Component(loki_dist, "Loki Distributor", "Log Router", "Receives logs with multi-tenant authentication") #B2EBF2
        Component(loki_ing, "Loki Ingester", "Log Storage", "Stores log chunks with encryption") #80DEEA
        Component(loki_query, "Loki Querier", "LogQL Engine", "Executes LogQL queries") #4DD0E1
        Component(jaeger_col, "Jaeger Collector", "Span Receiver", "Receives traces with storage plugins") #E1BEE7
        Component(jaeger_query, "Jaeger Query", "Trace API", "Provides trace query interface") #CE93D8
    }
    
    ' === Visualization Layer ===
    Container_Boundary(viz_layer, "Visualization & Alerting") #E8EAF6 {
        Component(grafana_core, "Grafana Core", "Dashboard Engine", "Unified dashboard with RBAC") #C5CAE9
        Component(grafana_auth, "Grafana Auth", "Azure AD Integration", "SSO authentication and RBAC") #9FA8DA
        Component(grafana_alert, "Grafana Alerting", "Alert Manager", "Alert rules and notifications") #7986CB
        Component(grafana_ds, "Data Sources", "Query Adapters", "Connects to Mimir, Loki, Jaeger") #5C6BC0
    }
    
    ' === Internal Storage ===
    Container_Boundary(storage_backends, "Encrypted Storage Backends") #F1F8E9 {
        ComponentDb(mimir_blocks, "Mimir Blocks", "TSDB Blocks", "Encrypted metrics storage") #C8E6C9
        ComponentDb(loki_chunks, "Loki Chunks", "Object Storage", "Encrypted log chunks") #A5D6A7
        ComponentDb(jaeger_spans, "Jaeger Backend", "Elasticsearch", "Encrypted trace storage") #81C784
    }
    
    ' === Security Components ===
    Container_Boundary(security_services, "Security Services") #FCE4EC {
        Component(akv, "Azure Key Vault", "EDDV-APP-EIKV01", "Manages secrets, certificates, and keys") #F8BBD9
        Component(akv_csi, "AKV CSI Driver", "Secret Provider", "Mounts secrets as volumes") #F48FB1
    }
}

' === External Systems ===
Container(vm_agents, "Non-Prod AKS\n(DEV + FT Pods)", "OTel Agents", "Source applications with OTLP instrumentation and mTLS") #B3E5FC
ComponentDb(blob_storage, "Azure Blob Storage", "Cloud Storage", "Long-term encrypted data retention") #E0E0E0
System_Ext(aad, "Azure AD", "Microsoft Entra ID", "OIDC provider for SSO authentication") #90CAF9

' === Security Relationships ===
Rel(user, ingress, "Accesses Grafana", "HTTPS/TLS 1.3")
Rel(ingress, oauth2_proxy, "Validates auth", "JWT validation")
Rel(oauth2_proxy, aad, "OIDC auth", "OAuth2/OIDC")
Rel(cert_manager, akv, "Gets certificates", "mTLS")
Rel(akv_csi, akv, "Mounts secrets", "API/CSI")
Rel(opa, aks_cluster, "Enforces policies", "Admission control")

' === Data Ingestion Flow ===
Rel(vm_agents, ingress, "OTLP telemetry", "mTLS encrypted")
Rel(ingress, otel_rcv, "Routes traffic", "HTTPS/WAF")
Rel(otel_rcv, otel_proc, "Raw telemetry", "Internal")
Rel(otel_proc, otel_exp, "Processed data", "Internal")

' === Mimir Data Flow ===
Rel(otel_exp, mimir_dist, "Metrics", "Remote Write/HTTPS")
Rel(mimir_dist, mimir_ing, "Metrics", "gRPC/mTLS")
Rel(mimir_ing, mimir_blocks, "TSDB blocks", "Encrypted")
Rel(mimir_compact, mimir_blocks, "Block compaction", "Encrypted")
Rel(mimir_blocks, blob_storage, "Long-term storage", "Azure SAS")

' === Query Flow - Mimir ===
Rel(grafana_ds, mimir_query_fe, "PromQL queries", "HTTPS/Auth")
Rel(mimir_query_fe, mimir_querier, "Query execution", "gRPC")
Rel(mimir_querier, mimir_ing, "Recent data", "gRPC")
Rel(mimir_querier, mimir_store, "Historical data", "gRPC")
Rel(mimir_store, mimir_blocks, "Block queries", "Encrypted")

' === Log & Trace Flow ===
Rel(otel_exp, loki_dist, "Logs", "HTTP Push/Auth")
Rel(otel_exp, jaeger_col, "Traces", "OTLP/gRPC")
Rel(loki_dist, loki_ing, "Log streams", "gRPC")
Rel(loki_ing, loki_chunks, "Log chunks", "Encrypted")
Rel(jaeger_col, jaeger_spans, "Span data", "Encrypted")
Rel(loki_chunks, blob_storage, "Log export", "Azure SAS")

' === Grafana Integration ===
Rel(oauth2_proxy, grafana_auth, "Auth tokens", "JWT")
Rel(grafana_auth, grafana_core, "User context", "Internal")
Rel(grafana_core, grafana_ds, "Data queries", "Internal")
Rel(grafana_ds, loki_query, "LogQL queries", "HTTPS/Auth")
Rel(grafana_ds, jaeger_query, "Trace queries", "HTTPS/Auth")
Rel(grafana_core, grafana_alert, "Alert rules", "Internal")

' === Security Integration ===
Rel(akv_csi, mimir_dist, "TLS certs", "Volume mount")
Rel(akv_csi, mimir_ing, "Auth tokens", "Volume mount")
Rel(akv_csi, loki_dist, "Credentials", "Volume mount")
Rel(akv_csi, jaeger_col, "DB credentials", "Volume mount")
Rel(akv_csi, grafana_core, "Secrets", "Volume mount")

@enduml
