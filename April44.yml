@startuml Observability_AKS_C4_L3_Appealing
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
LAYOUT_TOP_DOWN()

title <color:#0078D4>Dedicated AKS Observability Platform – Component View (L3)</color>\n<size:12></size>

skinparam backgroundColor #F8F9FA
skinparam shadowing true
skinparam rectangleFontColor white
skinparam arrowThickness 2
skinparam arrowFontSize 11

' =========================
' CLUSTERS AT TOP
' =========================
Container_Boundary(aks_dev, "AKS DEV Cluster") #D5E8D4 {
  Component(dev_apps, "DEV Applications", "Microservices, APIs")
  Component(dev_kube, "Kubernetes Components", "kubelet, kube-proxy, API server")
  Component(dev_nodes, "Node Metrics", "CPU, Memory, Disk, Network")
  Component(dev_otel_agent, "OTel Agent", "DaemonSet collector")
}

Container_Boundary(aks_ft, "AKS FT Cluster") #DAE8FC {
  Component(ft_apps, "FT Applications", "Test Services, Load Tests")
  Component(ft_kube, "Kubernetes Components", "kubelet, kube-proxy, API server")
  Component(ft_nodes, "Node Metrics", "CPU, Memory, Disk, Network")
  Component(ft_otel_agent, "OTel Agent", "DaemonSet collector")
}

System_Ext(ingress, "Ingress/Load Balancer", "External traffic entry") #EEEEEE

' =========================
' OTEL COLLECTOR CENTER
' =========================
Container_Boundary(otel_collector, "OTel Collector Pod") #F5F5F5 {
  Component(otel_rcv, "Receivers", "OTLP, Prometheus, Jaeger, K8s")
  Component(otel_proc, "Processors", "Batch, Resource, Transform, Enrich (DEV/FT labels)")
  Component(otel_exp, "Exporters", "Prometheus, Loki, Jaeger, Azure Monitor")
}

' =========================
' STORAGE BACKENDS (BOTTOM)
' =========================
Container_Boundary(prometheus_stack, "Prometheus + Thanos") #FFF3E0 {
  Component(prom_srv, "Prometheus Server", "Scrapes Metrics")
  Component(thanos_side, "Thanos Sidecar", "Upload to Blob")
  Component(thanos_query, "Thanos Query", "Long-term Queries")
}

Container_Boundary(loki_stack, "Loki") #E0F7FA {
  Component(loki_dist, "Distributor", "Receives Logs")
  Component(loki_ing, "Ingester", "Stores Chunks")
  Component(loki_q, "Querier", "Executes LogQL")
}

Container_Boundary(jaeger_stack, "Jaeger") #F3E5F5 {
  Component(jaeger_col, "Collector", "Receives Spans")
  Component(jaeger_ing, "Ingester", "Stores Spans")
  Component(jaeger_q, "Query Service", "Trace Query API")
}

System_Ext(blob, "Azure Blob Storage", "Long-term storage") #DDDDDD

' =========================
' GRAFANA TO THE RIGHT
' =========================
Container_Boundary(grafana_pod, "Grafana Pod") #1565C0 {
  Component(gf_core, "Grafana Core", "Dashboards, Alerts")
  Component(gf_ds, "Data Sources", "Prometheus, Loki, Jaeger")
  Component(gf_alert, "Alerting Engine", "Rules & Notifications")
  Component(gf_auth, "OAuth2 Proxy", "Azure AD SSO")
}

Person(dev, "Developer/SRE", "Monitors both DEV & FT")

' =========================
' TELEMETRY SIGNAL FLOWS
' =========================

' DEV cluster signals (green arrows)
Rel(dev_apps, dev_otel_agent, "📊📜🔍 Telemetry", "OTLP") #008000
Rel(dev_kube, dev_otel_agent, "📊 API Metrics", "HTTP") #008000
Rel(dev_nodes, dev_otel_agent, "📊 Node Metrics", "HTTP") #008000
Rel(dev_otel_agent, otel_rcv, "All Telemetry", "OTLP gRPC") #008000

' FT cluster signals (blue arrows)
Rel(ft_apps, ft_otel_agent, "📊📜🔍 Telemetry", "OTLP") #1565C0
Rel(ft_kube, ft_otel_agent, "📊 API Metrics", "HTTP") #1565C0
Rel(ft_nodes, ft_otel_agent, "📊 Node Metrics", "HTTP") #1565C0
Rel(ft_otel_agent, otel_rcv, "All Telemetry", "OTLP gRPC") #1565C0

' Ingress telemetry (grey arrows)
Rel(ingress, otel_rcv, "📜 Ingress Logs", "HTTP") #666666

' Collector to backends
Rel(otel_rcv, otel_proc, "Raw telemetry")
Rel(otel_proc, otel_exp, "Processed telemetry")
Rel(otel_exp, prom_srv, "📊 Metrics", "Remote Write")
Rel(otel_exp, loki_dist, "📜 Logs", "HTTP Push")
Rel(otel_exp, jaeger_col, "🔍 Traces", "OTLP gRPC")

' Backends → Blob
Rel(thanos_side, blob, "📊 Metrics Store", "HTTPS")
Rel(loki_ing, blob, "📜 Log Chunks", "HTTPS")
Rel(jaeger_ing, blob, "🔍 Spans", "HTTPS")

' Grafana queries
Rel(dev, gf_auth, "HTTPS/SSO")
Rel(gf_auth, gf_core, "Auth")
Rel(gf_core, gf_ds, "Data queries")
Rel(gf_ds, prom_srv, "📊 PromQL")
Rel(gf_ds, thanos_query, "📊 Long-term metrics")
Rel(gf_ds, loki_q, "📜 LogQL")
Rel(gf_ds, jaeger_q, "🔍 Traces")
Rel(gf_core, gf_alert, "Alert Rules")

SHOW_LEGEND()
@enduml

