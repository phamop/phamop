# Creating an Azure AD Application for Grafana Integration

Here's a complete guide to create an Azure AD application for Grafana with the necessary permissions to access Azure Monitor metrics:

## Step 1: Create the Azure AD Application

```bash
# Create the application registration
GRAFANA_APP_NAME="Grafana-Azure-Monitor"
APP_ID=$(az ad app create \
  --display-name "$GRAFANA_APP_NAME" \
  --query appId \
  --output tsv)

echo "Application created with ID: $APP_ID"
```

## Step 2: Create a Service Principal

```bash
# Create service principal for the application
SP_ID=$(az ad sp create --id "$APP_ID" --query id --output tsv)
echo "Service Principal created with ID: $SP_ID"
```

## Step 3: Create Client Secret

```bash
# Create client secret (valid for 1 year)
CLIENT_SECRET=$(az ad app credential reset \
  --id "$APP_ID" \
  --years 1 \
  --query password \
  --output tsv)

echo "Client Secret: $CLIENT_SECRET"
```

## Step 4: Assign Required Permissions

```bash
# Get your Azure subscription ID
SUBSCRIPTION_ID=$(az account show --query id --output tsv)

# Assign Monitoring Reader role at subscription level
az role assignment create \
  --assignee "$APP_ID" \
  --role "Monitoring Reader" \
  --scope "/subscriptions/$SUBSCRIPTION_ID"

# Assign Reader role at subscription level (if needed)
az role assignment create \
  --assignee "$APP_ID" \
  --role "Reader" \
  --scope "/subscriptions/$SUBSCRIPTION_ID"
```

## Step 5: Store Credentials in Azure Key Vault

```bash
KEY_VAULT_NAME="Goodvault"

# Store client ID
az keyvault secret set \
  --vault-name "$KEY_VAULT_NAME" \
  --name "grafana-azure-client-id" \
  --value "$APP_ID"

# Store client secret
az keyvault secret set \
  --vault-name "$KEY_VAULT_NAME" \
  --name "grafana-azure-client-secret" \
  --value "$CLIENT_SECRET"

# Store tenant ID (same as directory ID)
TENANT_ID=$(az account show --query tenantId --output tsv)
az keyvault secret set \
  --vault-name "$KEY_VAULT_NAME" \
  --name "grafana-azure-tenant-id" \
  --value "$TENANT_ID"

# Store subscription ID
az keyvault secret set \
  --vault-name "$KEY_VAULT_NAME" \
  --name "grafana-azure-subscription-id" \
  --value "$SUBSCRIPTION_ID"
```

## Step 6: Configure API Permissions (Optional)

If you need additional permissions:

```bash
# Add Azure Active Directory Graph API permissions
az ad app permission add \
  --id "$APP_ID" \
  --api 00000002-0000-0000-c000-000000000000 \
  --api-permissions 311a71cc-e848-46a1-bdf8-97ff7156d8e6=Scope

# Grant admin consent
az ad app permission admin-consent --id "$APP_ID"
```

## Step 7: Verify the Application

```bash
# Check application registration
az ad app show --id "$APP_ID"

# Check service principal
az ad sp show --id "$APP_ID"

# Check role assignments
az role assignment list --assignee "$APP_ID"
```

## Step 8: Configure Grafana with These Values

Use these values in your Grafana configuration:

- **Azure AD Tenant ID**: `$TENANT_ID`
- **Client ID**: `$APP_ID`
- **Client Secret**: `$CLIENT_SECRET`
- **Subscription ID**: `$SUBSCRIPTION_ID`

## Security Recommendations
 Firtsly, Run the following manually before running the pipeline.
```bash
# Login to Azure CLI
az login

# Create Azure AD application
az ad app create --display-name "Grafana-Azure-Monitor" \
  --reply-urls "https://grafana.yourdomain.com/login/generic_oauth" \
  --required-resource-accesses @grafana-permissions.json

# Create service principal
az ad sp create --id $(az ad app list --display-name "Grafana-Azure-Monitor" --query [].appId -o tsv)

# Get application details
APP_ID=$(az ad app list --display-name "Grafana-Azure-Monitor" --query [].appId -o tsv)
TENANT_ID=$(az account show --query tenantId -o tsv)

# Create client secret (valid for 1 year)
CLIENT_SECRET=$(az ad app credential reset --id $APP_ID --years 1 --query password -o tsv)

# Assign Monitoring Reader role
SUBSCRIPTION_ID=$(az account show --query id -o tsv)
az role assignment create --assignee $APP_ID \
  --role "Monitoring Reader" \
  --scope "/subscriptions/$SUBSCRIPTION_ID"
```

Create `grafana-permissions.json`:
```json
{
  "resourceAppId": "00000003-0000-0000-c000-000000000000",
  "resourceAccess": [
    {
      "id": "7ab1d382-f21e-4acd-a863-ba3e13f7da61",
      "type": "Role"
    }
  ]
}
```

## 2. Store Secrets in Azure Key Vault

```bash
# Store in Key Vault
az keyvault secret set --vault-name YourKeyVault --name "grafana-client-id" --value $APP_ID
az keyvault secret set --vault-name YourKeyVault --name "grafana-tenant-id" --value $TENANT_ID
az keyvault secret set --vault-name YourKeyVault --name "grafana-client-secret" --value $CLIENT_SECRET
az keyvault secret set --vault-name YourKeyVault --name "grafana-subscription-id" --value $SUBSCRIPTION_ID
```

Pipeline for step1 are the following 

## 3. Azure DevOps Pipeline Implementation

Create a new pipeline file `azure-pipelines-grafana.yml`:

```yaml
trigger:
- main

variables:
  - group: 'Grafana-Settings'
  - name: 'keyVaultName'
    value: 'YourKeyVault'
  - name: 'namespace'
    value: 'monitoring'

stages:
- stage: DeployGrafana
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      displayName: 'Get Azure AD Secrets'
      inputs:
        azureSubscription: 'Your-Azure-Service-Connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get secrets from Key Vault
          CLIENT_ID=$(az keyvault secret show --vault-name $(keyVaultName) --name grafana-client-id --query value -o tsv)
          CLIENT_SECRET=$(az keyvault secret show --vault-name $(keyVaultName) --name grafana-client-secret --query value -o tsv)
          TENANT_ID=$(az keyvault secret show --vault-name $(keyVaultName) --name grafana-tenant-id --query value -o tsv)
          SUBSCRIPTION_ID=$(az keyvault secret show --vault-name $(keyVaultName) --name grafana-subscription-id --query value -o tsv)
          
          # Set pipeline variables for subsequent tasks
          echo "##vso[task.setvariable variable=CLIENT_ID;issecret=true]$CLIENT_ID"
          echo "##vso[task.setvariable variable=CLIENT_SECRET;issecret=true]$CLIENT_SECRET"
          echo "##vso[task.setvariable variable=TENANT_ID]$TENANT_ID"
          echo "##vso[task.setvariable variable=SUBSCRIPTION_ID]$SUBSCRIPTION_ID"

    - task: HelmDeploy@0
      displayName: 'Deploy Grafana with Azure Monitor'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: 'Your-Azure-Service-Connection'
        azureResourceGroup: 'Your-Resource-Group'
        kubernetesCluster: 'Your-AKS-Cluster'
        namespace: '$(namespace)'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '$(System.DefaultWorkingDirectory)/charts/grafana'
        releaseName: 'grafana'
        overrideValues: |
          env.GF_AUTH_GENERIC_OAUTH_ENABLED=true
          env.GF_AUTH_GENERIC_OAUTH_CLIENT_ID=$(CLIENT_ID)
          env.GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=$(CLIENT_SECRET)
          env.GF_AUTH_GENERIC_OAUTH_AUTH_URL=https://login.microsoftonline.com/$(TENANT_ID)/oauth2/authorize
          env.GF_AUTH_GENERIC_OAUTH_TOKEN_URL=https://login.microsoftonline.com/$(TENANT_ID)/oauth2/token
          datasources.datasources_yaml.datasources[0].jsonData.subscriptionId=$(SUBSCRIPTION_ID)
          datasources.datasources_yaml.datasources[0].jsonData.tenantId=$(TENANT_ID)
          datasources.datasources_yaml.datasources[0].jsonData.clientId=$(CLIENT_ID)
          datasources.datasources_yaml.datasources[0].secureJsonData.clientSecret=$(CLIENT_SECRET)
```


## 5. Grafana Helm Chart Configuration

Ensure your Grafana Helm chart has these values configured:

```yaml
# values.yaml
grafana.ini:
  auth.generic_oauth:
    enabled: true
    name: Azure AD
    client_id: "$__file{/etc/grafana/secrets/oauth/client_id}"
    client_secret: "$__file{/etc/grafana/secrets/oauth/client_secret}"
    scopes: "openid email profile"
    auth_url: "https://login.microsoftonline.com/$__file{/etc/grafana/secrets/oauth/tenant_id}/oauth2/authorize"
    token_url: "https://login.microsoftonline.com/$__file{/etc/grafana/secrets/oauth/tenant_id}/oauth2/token"
    api_url: ""
    allowed_domains: "yourdomain.com"
    allow_sign_up: true

datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: AzureMonitor
      type: grafana-azure-monitor-datasource
      jsonData:
        subscriptionId: "$__file{/etc/grafana/secrets/azure/subscription_id}"
        cloudName: azuremonitor
        azureAuthType: clientsecret
        tenantId: "$__file{/etc/grafana/secrets/azure/tenant_id}"
        clientId: "$__file{/etc/grafana/secrets/azure/client_id}"
      secureJsonData:
        clientSecret: "$__file{/etc/grafana/secrets/azure/client_secret}"
```


grafana-aks/
├── Chart.yaml
├── values.yaml
├── templates/
│   ├── deployment.yaml
│   ├── service.yaml
│   ├── ingress.yaml
│   ├── configmap.yaml
│   ├── secrets.yaml
│   └── serviceaccount.yaml
└── crds/
    └── grafana-dashboard-crd.yaml

values.yaml files 
image:
  repository: grafana/grafana
  tag: 9.0.0
  pullPolicy: IfNotPresent

service:
  type: LoadBalancer
  port: 3000
  annotations: {}

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: grafana.yourdomain.com
      paths:
        - path: /
          pathType: Prefix

persistence:
  enabled: true
  storageClassName: default
  accessModes:
    - ReadWriteOnce
  size: 10Gi

env:
  GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
  GF_AUTH_GENERIC_OAUTH_NAME: "Azure AD"
  GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "$__file{/etc/grafana/secrets/azure/client_id}"
  GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "$__file{/etc/grafana/secrets/azure/client_secret}"
  GF_AUTH_GENERIC_OAUTH_SCOPES: "openid email profile"
  GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://login.microsoftonline.com/$__file{/etc/grafana/secrets/azure/tenant_id}/oauth2/authorize"
  GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://login.microsoftonline.com/$__file{/etc/grafana/secrets/azure/tenant_id}/oauth2/token"

datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: AzureMonitor
      type: grafana-azure-monitor-datasource
      orgId: 1
      typeLogoUrl: public/plugins/grafana-azure-monitor-datasource/img/logo.svg
      access: proxy
      url: /api/datasources/proxy/1
      jsonData:
        subscriptionId: "$__file{/etc/grafana/secrets/azure/subscription_id}"
        cloudName: azuremonitor
        azureAuthType: clientsecret
        tenantId: "$__file{/etc/grafana/secrets/azure/tenant_id}"
        clientId: "$__file{/etc/grafana/secrets/azure/client_id}"
      secureJsonData:
        clientSecret: "$__file{/etc/grafana/secrets/azure/client_secret}"
      version: 1
      editable: true

templates/secrets.yaml files
 apiVersion: v1
kind: Secret
metadata:
  name: grafana-azure-secrets
type: Opaque
stringData:
  client_id: |
    {{ .Values.azure.clientId }}
  client_secret: |
    {{ .Values.azure.clientSecret }}
  tenant_id: |
    {{ .Values.azure.tenantId }}
  subscription_id: |
    {{ .Values.azure.subscriptionId }}

grafana-creation-pipeline.yaml


  trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'grafana-aks/*'

variables:
  - group: 'grafana-aks-config'
  - name: 'namespace'
    value: 'monitoring'

stages:
- stage: DeployGrafana
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'your-azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get secrets from Key Vault
          clientId=$(az keyvault secret show --vault-name Goodvault --name grafana-azure-client-id --query value -o tsv)
          clientSecret=$(az keyvault secret show --vault-name Goodvault --name grafana-azure-client-secret --query value -o tsv)
          tenantId=$(az keyvault secret show --vault-name Goodvault --name grafana-azure-tenant-id --query value -o tsv)
          subscriptionId=$(az keyvault secret show --vault-name Goodvault --name grafana-azure-subscription-id --query value -o tsv)
          
          # Helm install/upgrade
          helm upgrade --install grafana grafana-aks/ \
            --namespace $(namespace) \
            --set azure.clientId="$clientId" \
            --set azure.clientSecret="$clientSecret" \
            --set azure.tenantId="$tenantId" \
            --set azure.subscriptionId="$subscriptionId" \
            --values grafana-aks/values.yaml

azure-monitor-integration-pipeline.yaml files 


trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'azure-monitor-config/*'

variables:
  - group: 'azure-monitor-config'
  - name: 'namespace'
    value: 'monitoring'

stages:
- stage: ConfigureAzureMonitor
  jobs:
  - job: Configure
    steps:
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        namespace: '$(namespace)'
        manifests: |
          azure-monitor-config/azure-monitor-configmap.yaml
          azure-monitor-config/azure-monitor-dashboards.yaml
        strategy: 'kubectl'

alert-dashboard-pipeline.yaml

 trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'dashboards/*'
      - 'alerts/*'

variables:
  - group: 'grafana-alerts-config'
  - name: 'namespace'
    value: 'monitoring'

stages:
- stage: DeployDashboardsAndAlerts
  jobs:
  - job: Deploy
    steps:
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        namespace: '$(namespace)'
        manifests: |
          dashboards/*.yaml
          alerts/*.yaml
        strategy: 'kubectl'

## 4. Required Pipeli
This setup provides Grafana with the necessary permissions to read monitoring data from Azure Monitor while following security best practices.
Error


Error: Unable to continue with install: could not get information about the resource CustomResourceDefinition "acraccesstokens.generators.external-secrets.io" in namespace "": customresourcedefinitions.apiextensions.k8s.io "acraccesstokens.generators.external-secrets.io" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "customresourcedefinitions" in API group "apiextensions.k8s.io" at the cluster scope
2025-04-15T15:29:03.7358389Z Release "external-secrets" does not exist. Installing it now.
2025-04-15T15:29:03.7395140Z ##[error]Error: Unable to continue with install: could not get information about the resource CustomResourceDefinition "acraccesstokens.generators.external-secrets.io" in namespace "": customresourcedefinitions.apiextensions.k8s.io "acraccesstokens.generators.external-secrets.io" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "customresourcedefinitions" in API group "apiextensions.k8s.io" at the cluster scope

2025-04-15T15:29:03.7447557Z ##[section]Finishing: Deploy ESO Helm Chart



######


/azp/agent/_work/_tool/helm/3.17.3/x64/linux-amd64/helm upgrade --namespace eddv3-hbt --install --wait --timeout 10m0s --create-namespace external-secrets external-secrets/external-secrets --version 0.9.0
Error: Unable to continue with install: could not get information about the resource CustomResourceDefinition "acraccesstokens.generators.external-secrets.io" in namespace "": customresourcedefinitions.apiextensions.k8s.io "acraccesstokens.generators.external-secrets.io" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "customresourcedefinitions" in API group "apiextensions.k8s.io" at the cluster scope
Release "external-secrets" does not exist. Installing it now.
##[error]Error: Unable to continue with install: could not get information about the resource CustomResourceDefinition "acraccesstokens.generators.external-secrets.io" in namespace "": customresourcedefinitions.apiextensions.k8s.io "acraccesstokens.generators.external-secrets.io" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "customresourcedefinitions" in API group "apiextensions.k8s.io" at the cluster scope

