az ad sp list --filter "displayName eq 'Azure Monitor'" --query "[].{Name:displayName, ObjectId:objectId, AppId:appId}" --output table


az ad app list --query "[].{appId:appId, displayName:displayName}" -o table


# For a specific application (replace with your app name)
clientId=$(az ad app list --display-name "YourAppName" --query [].appId -o tsv)
echo "Client ID: $clientId"

# List all applications and their client IDs
az ad app list --query '[].{displayName:displayName, appId:appId}' -o table


# Assign Key Vault access to AKS cluster's managed identity
az keyvault set-policy --name Goodvault --object-id $(az aks show -g <resource-group> -n <aks-name> --query identity.principalId -o tsv) --secret-permissions get list

#########

Identify the AKS Cluster's Managed Identity
First, determine the principal ID of your AKS cluster's managed identity:
Assign Key Vault Access Policy
Grant the necessary permissions to the managed identity:
Verify the Access Policy
Confirm the policy was applied correctly:
Configure AKS to Use Key Vault Secrets (Optional)
If you want to use Azure Key Vault Provider for Secrets Store CSI Driver:


# Get the principal ID of the AKS cluster's managed identity
AKS_RESOURCE_GROUP="your-aks-resource-group"
AKS_NAME="your-aks-cluster-name"

PRINCIPAL_ID=$(az aks show \
  --resource-group $AKS_RESOURCE_GROUP \
  --name $AKS_NAME \
  --query "identity.principalId" \
  --output tsv)

echo "Principal ID: $PRINCIPAL_ID"

###Grant the necessary permissions to the managed identity:

KEY_VAULT_NAME="Goodvault"
KEY_VAULT_RESOURCE_GROUP="your-keyvault-resource-group"

# Assign get and list permissions for secrets
az keyvault set-policy \
  --name $KEY_VAULT_NAME \
  --resource-group $KEY_VAULT_RESOURCE_GROUP \
  --object-id $PRINCIPAL_ID \
  --secret-permissions get list

### Confirm the policy was applied correctly:

az keyvault show \
  --name $KEY_VAULT_NAME \
  --resource-group $KEY_VAULT_RESOURCE_GROUP \
  --query "properties.accessPolicies[?objectId=='$PRINCIPAL_ID']"


#########################
Grafana deployment issue

Error: Unable to continue with install: could not get information about the resource ClusterRole "grafana-clusterrole" in namespace "": clusterroles.rbac.authoriz


2025-04-17T01:30:02.1374653Z [command]/azp/agent/_work/_tool/helm/3.17.3/x64/linux-amd64/helm upgrade --namespace eddv3-hbt --install --values /azp/agent/_work/56/s/devops/helm-charts/grafana-monitor/grafana-values-dev.yaml --wait --timeout 10m0s --create-namespace grafana grafana/grafana --version 8.11.4
2025-04-17T01:30:03.4488065Z Error: Unable to continue with install: could not get information about the resource ClusterRole "grafana-clusterrole" in namespace "": clusterroles.rbac.authorization.k8s.io "grafana-clusterrole" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "clusterroles" in API group "rbac.authorization.k8s.io" at the cluster scope
2025-04-17T01:30:03.4488528Z Release "grafana" does not exist. Installing it now.
2025-04-17T01:30:03.4524145Z ##[error]Error: Unable to continue with install: could not get information about the resource ClusterRole "grafana-clusterrole" in namespace "": clusterroles.rbac.authorization.k8s.io "grafana-clusterrole" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "clusterroles" in API group "rbac.authorization.k8s.io" at the cluster scope

2025-04-17T01:30:03.4633833Z ##[section]Finishing: Deploy Grafana Helm Chart

new issue
=========



/azp/agent/_work/_tool/helm/3.17.3/x64/linux-amd64/helm upgrade --namespace eddv3-hbt --install --values /azp/agent/_work/67/s/devops/helm-charts/grafana-monitor/grafana-values-dev.yaml --wait --timeout 10m0s --create-namespace grafana grafana/grafana --version 8.11.4
Error: Unable to continue with install: could not get information about the resource ClusterRole "grafana-clusterrole" in namespace "": clusterroles.rbac.authorization.k8s.io "grafana-clusterrole" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "clusterroles" in API group "rbac.authorization.k8s.io" at the cluster scope
Release "grafana" does not exist. Installing it now.
##[error]Error: Unable to continue with install: could not get information about the resource ClusterRole "grafana-clusterrole" in namespace "": clusterroles.rbac.authorization.k8s.io "grafana-clusterrole" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "clusterroles" in API group "rbac.authorization.k8s.io" at the cluster scope

Finishing: Deploy Grafana Helm Chart

####
new sol
#######

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-installer-role
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps", "secrets", "services"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
EOF

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-installer-binding
subjects:
- kind: User
  name: "SP"  # This is your service principal's name
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: grafana-installer-role
  apiGroup: rbac.authorization.k8s.io
EOF

Solution
========


# Create RBAC resources for External Secrets
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-access
rules:
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "externalsecrets", "clustersecretstores"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-binding
subjects:
- kind: ServiceAccount
  name: SP
  namespace: comm-dev
roleRef:
  kind: ClusterRole
  name: external-secrets-access
  apiGroup: rbac.authorization.k8s.io
EOF

issue3
======
Error: Unable to continue with install: could not get information about the resource Role "grafana" in namespace "eddv3-hbt": roles.rbac.authorization.k8s.io "grafana" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "roles" in API group "rbac.authorization.k8s.io" in the namespace "eddv3-hbt"
Release "grafana" does not exist. Installing it now.
##[error]Error: Unable to continue with install: could not get information about the resource Role "grafana" in namespace "eddv3-hbt": roles.rbac.authorization.k8s.io "grafana" is forbidden: User "e524bd2f-9cc8-4a65-8a5c-d7407061fc82" cannot get resource "roles" in API group "rbac.authorization.k8s.io" in the namespace "eddv3-hbt"

solution3
=========

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-installer-namespace-role
  namespace: comm-dev
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["configmaps", "secrets", "services", "pods", "serviceaccounts"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
EOF

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-installer-binding
  namespace: comm-dev
subjects:
- kind: User
  name: "SP"
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: grafana-installer-namespace-role
  apiGroup: rbac.authorization.k8s.io
EOF


+++++++
sol4
=====


- script: |
    # Verify secrets exist in Key Vault
    az keyvault secret show --name grafana-azure-monitor-client-secret --vault-name YOUR-VAULT-NAME
    az keyvault secret show --name grafana-azure-monitor-app-id --vault-name YOUR-VAULT-NAME
    az keyvault secret show --name grafana-azure-monitor-sub-id --vault-name YOUR-VAULT-NAME
    az keyvault secret show --name grafana-azure-monitor-tenant-id --vault-name YOUR-VAULT-NAME
  displayName: 'Verify Key Vault Secrets Exist'

- script: |
    kubectl apply -f externalsecret.yaml -n monitoring
    # Wait for secret to be created
    kubectl wait --for=condition=Ready externalsecret/azure-monitor-secrets -n monitoring --timeout=60s
    # Verify secret was created
    kubectl get secret azure-monitor-secrets -n monitoring
  displayName: 'Apply ExternalSecret and Verify'
