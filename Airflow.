APIM → NGINX Ingress IP (ILB) → Ingress Rule → ClusterIP service → Pod
User → APIM (external) → Internal Load Balancer (ILB) Ingress Controller → NGINX Ingress Controller → Kubernetes Service (ClusterIP) → Pod


https://us04web.zoom.us/j/78985446518?pwd=65M1mLDyJcwejNbULMWUJ3aZJtioiD.1

The application has two Kubernetes services: a ClusterIP for internal traffic and a LoadBalancer to allow Azure services like APIM to access the ingress controller. However, the microservice is currently mapped only to the ClusterIP, which suggests that its external exposure via APIM is happening indirectly. The identified gap is a missing or unclear routing configuration between the Ingress controller and APIM, as the service itself is not directly exposed externally

There is an ongoing session regarding this issue, but it remains unresolved. We are still awaiting an update since configuring the AKS ingress, as we are currently unable to access the Grafana URL as expected


If APIM calls the LoadBalancer IP on port 443, the traffic is forwarded by the ingress-nginx-controller-internal service to the NGINX ingress controller pod's https port.




<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
    <!-- Throttle, authorize, validate, cache, or transform the requests -->
    <inbound>
        <base />
    </inbound>
    <!-- Control if and how the requests are forwarded to services  -->
    <backend>
        <base />
    </backend>
    <!-- Customize the responses -->
    <outbound>
        <base />
    </outbound>
    <!-- Handle exceptions and customize error responses  -->
    <on-error>
        <base />
    </on-error>
</policies>










apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: eddv3-hbt
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    # Replaced configuration-snippet with standard annotations
    nginx.ingress.kubernetes.io/proxy-set-headers: "eddv3-hbt/grafana-proxy-headers"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
  - host: eddv3-hbt
    http:
      paths:
      - path: /grafana(/|$)(.*)  # Fixed path pattern
        pathType: Prefix
        backend:
          service:
            name: grafana-proxy
            port:
              number: 80


apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-proxy-headers
  namespace: eddv3-hbt
data:
  Host: "$host"
  X-Real-IP: "$remote_addr"
  X-Forwarded-Proto: "$scheme"
  X-Forwarded-For: "$proxy_add_x_forwarded_for"
