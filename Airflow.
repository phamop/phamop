target_config:
  compactor:
    working_directory: /tmp/loki/compactor
    shared_store: filesystem
  distributor:
    ring:
      kvstore:
        store: inmemory
  ingester:
    lifecycler:
      ring:
        kvstore:
          store: inmemory
      replication_factor: 1
    chunk_idle_period: 1h
    max_transfer_retries: 0
  querier:
    query_ingesters_within: 3h






You could add or update a Geo node database record, setting the name to match this machine's Geo node name 

you could set this machine's Geo node name to match the name of an existing database record: 

https://www.bing.com/search?pglt=2083&q=OpenTelemetry+Operator+AKS&cvid=222e1e2d1a024e788327f7908f5ecb46&gs_lcrp=EgRlZGdlKgYIABBFGDkyBggAEEUYOTIGCAEQABhAMggIAhDpBxj8VdIBCDMwNDlqMGoxqAIAsAIA&FORM=ANNAB1&PC=U531

https://www.yuribacciarini.com/secrets-store-csi-driver-vs-external-secrets-in-a-nutshel/

https://learn.microsoft.com/en-us/azure/aks/aksarc/secrets-store-csi-driver

https://github.com/kubernetes-sigs/secrets-store-csi-driver/blob/main/test/bats/tests/azure/azure_v1_secretproviderclass_ns.yaml

https://azure.github.io/secrets-store-csi-driver-provider-azure/docs/configurations/sync-with-k8s-secrets/


 gitlab-backup create STRATEGY=copy BACKUP=$(date "+%Y-%m-%d_%H.%M.%S")



FROM alpine:3.19 AS certs
RUN apk --update add ca-certificates

FROM golang:1.23.6 AS build-stage
WORKDIR /usr/bin/otelcol

COPY collector/manifest.yaml manifest.yaml
COPY collector/config.yaml config.yaml
COPY protos/ protos
COPY processors/ processors
COPY extensions/ extensions
RUN --mount=type=cache,target=/root/.cache/go-build GO111MODULE=on go install go.opentelemetry.io/collector/cmd/builder@v0.120.0
RUN --mount=type=cache,target=/root/.cache/go-build builder --config manifest.yaml

RUN --mount=type=cache,target=/root/.cache/go-build ./_build/col validate --config config.yaml

FROM gcr.io/distroless/base:latest

ARG USER_UID=10001
USER ${USER_UID}

COPY --from=build-stage /usr/bin/otelcol/config.yaml /etc/otelcol/config.yaml
COPY --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --chmod=755 --from=build-stage /usr/bin/otelcol/_build/col /otelcol

ENTRYPOINT ["/otelcol"]
CMD ["--config", "/etc/otelcol/config.yaml"]
# `4137` and `4318`: OTLP
# `12001`: remotettap
EXPOSE 4317 4318 12001






Due to current environmental constraints, the recommended solution cannot be implemented at this time. The existing CSI driver has a known limitation, as the SecretSync functionality does not appear to be enabled. Enabling this feature may require significant time and effort.

As a result, we will proceed with an alternative solution. A risk will be formally documented to highlight this environmental limitation and its implications.






https://azure.github.io/secrets-store-csi-driver-provider-azure/docs/configurations/sync-with-k8s-secrets/
https://github.com/kubernetes-sigs/secrets-store-csi-driver/blob/main/test/bats/tests/azure/azure_v1_secretproviderclass_ns.yaml
https://stackoverflow.com/questions/70154936/secret-is-not-creating-in-aks-after-fetching-it-with-csi-driver
https://github.com/kubernetes-sigs/secrets-store-csi-driver/blob/main/test/bats/tests/vault/pod-vault-inline-volume-secretproviderclass.yaml
https://learn.microsoft.com/en-us/azure/aks/aksarc/secrets-store-csi-driver







During the integration of the Azure Key Vault Provider for Secrets Store CSI Driver, I deployed a SecretProviderClass resource using the azure provider to fetch secrets from Key Vault. These secrets are intended to be used as environment variables for the Grafana Helm chart deployment.

As part of the process, I confirmed that the secrets are successfully pulled and mounted into a pod, which indicates that the SecretProviderClass is functional. However, the expected Kubernetes Secret resource is not being created, even though the secretObjects section is defined in the secrestore.yaml file.

After reviewing the documentation (Azure CSI Provider: Sync with K8s Secrets), I believe the current Helm setup might be missing the following critical configuration:

secrets-store-csi-driver.syncSecret.enabled=true

This setting is required to enable the secret sync controller and to ensure that the Helm release provisions the necessary ClusterRole and ClusterRoleBinding for managing and syncing secrets from Azure Key Vault to native Kubernetes Secrets.

Using only volume-mounted secrets is not suitable in this case because:
* Grafana is deployed via Helm and configured using environment variables.
* The secrets need to be available as native Kubernetes secrets to be referenced by the Helm chart as envFrom.secretRef, rather than being mounted into the pod’s filesystem.

Action Request:
Please review and update the Helm release values to explicitly enable secret syncing by setting:

syncSecret:
  enabled: true

This should resolve the issue and ensure secrets are properly synced and consumable by Grafana as environment variables.

Thanks,















We’re excited to share that we’ve successfully deployed the External Secrets Operator (ESO) in our environment, leveraging Federated Identity Credentials (FIC) backed by Microsoft Entra ID for authentication.

Key Benefits:
✅ Eliminates long-lived secrets: No more manual rotation or exposure risks of static credentials.
✅ Secure by design: Uses short-lived, auto-rotated tokens via Microsoft’s identity platform.
✅ Compliance-friendly: Aligns with zero-trust principles and audit requirements (e.g., SOC 2, ISO 27001).

This approach simplifies secret management while enhancing security. We’d appreciate your formal consent to adopt this as our standard for secret management.

Next Steps:
Review: Documentation/architecture is available [link to Confluence/SharePoint].

Feedback: Share concerns or questions by [date].

Consent: Reply to this thread with your approval or schedule a discussion.

Thanks for your collaboration!









RUN apk update && apk add --no-cache \
bash \
gcc \
musl-dev \
postgresql-dev \
libffi-dev \
openssl-dev \
build-base \
python3-dev \
py3-pip \
abseil-cpp-dev \
re2
   

# Install Python packages
RUN pip install --no-cache-dir \
psycopg2-binary \
pytz \
pybind11 \
apache-airflow

