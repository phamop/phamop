# Implementing Azure Monitor Insights Metrics for Grafana on AKS

I'll provide a detailed implementation plan for setting up Azure Monitor Insights metrics for Grafana on your existing AKS cluster, using your Goodvault for secrets management and Azure DevOps pipelines for deployment.

## Architecture Overview

1. Existing AKS cluster
2. Azure Monitor Insights as the metrics source
3. Grafana deployed via Helm charts
4. Azure KeyVault (Goodvault) for secrets management
5. Azure DevOps pipelines for CI/CD

## Implementation Steps

### 1. Prerequisites Setup

- Ensure Azure CLI, kubectl, and Helm are installed on your build agents
- Configure service principal with appropriate permissions to:
  - Access Azure Monitor
  - Access KeyVault (Goodvault)
  - Manage AKS resources

### 2. KeyVault Integration

First, we need to access secrets from your existing Goodvault:

```bash
# Create a service principal identity for Grafana
az ad sp create-for-rbac --name "grafana-sp" --role contributor

# Assign permissions to access KeyVault
az keyvault set-policy --name "Goodvault" \
  --spn [service-principal-id] \
  --secret-permissions get list
```

### 3. Grafana Helm Chart Configuration

Create a base `values.yaml` for Grafana Helm chart:

```yaml
grafana:
  adminPassword: "${GRAFANA_ADMIN_PASSWORD}"
  
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: AzureMonitor
        type: grafana-azure-monitor-datasource
        access: proxy
        isDefault: true
        jsonData:
          azureAuthType: clientsecret
          clientId: "${AZURE_SP_CLIENT_ID}"
          cloudName: azuremonitor
          subscriptionId: "${AZURE_SUBSCRIPTION_ID}"
          tenantId: "${AZURE_TENANT_ID}"
        secureJsonData:
          clientSecret: "${AZURE_SP_CLIENT_SECRET}"

  service:
    type: ClusterIP

persistence:
  enabled: true
  storageClassName: default
  size: 10Gi
```

### 4. Environment-specific Variables

Create environment parameter files:

**dev-params.yaml**:
```yaml
environment: dev
grafana:
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  ingress:
    enabled: true
    tls: false  # No TLS for dev as specified
```

**prod-params.yaml**:
```yaml
environment: prod
grafana:
  replicas: 2
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  ingress:
    enabled: true
    tls: true
```

### 5. Custom Resource Definitions (CRDs)

Create a directory for Grafana CRDs:

**grafana-dashboard-crd.yaml**:
```yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: grafanadashboards.grafana.com
spec:
  group: grafana.com
  names:
    kind: GrafanaDashboard
    plural: grafanadashboards
    singular: grafanadashboard
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                json:
                  type: string
                datasources:
                  type: array
                  items:
                    type: string
```

### 6. Azure DevOps Pipeline for Grafana Deployment

Create a pipeline for Grafana deployment:

**azure-pipelines-grafana.yaml**:
```yaml
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - grafana/**

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: environment
  displayName: Environment
  type: string
  default: dev
  values:
  - dev
  - test
  - prod

variables:
- group: azuremonitor-grafana-variables
- name: paramFile
  value: '${{ parameters.environment }}-params.yaml'

stages:
- stage: DeployGrafana
  displayName: Deploy Grafana
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: 'YourServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az aks get-credentials --resource-group $(AKS_RESOURCE_GROUP) --name $(AKS_CLUSTER_NAME)
          
    - task: AzureKeyVault@2
      displayName: 'Get secrets from KeyVault'
      inputs:
        azureSubscription: 'YourServiceConnection'
        KeyVaultName: 'Goodvault'
        SecretsFilter: 'grafana-admin-password,azure-sp-client-id,azure-sp-client-secret'
        
    - task: HelmDeploy@0
      displayName: 'Deploy Grafana using Helm'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: 'your-k8s-connection'
        namespace: 'monitoring'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: './grafana/helm'
        releaseName: 'grafana'
        valueFile: |
          ./grafana/values.yaml
          ./grafana/$(paramFile)
        overrideValues: |
          grafana.adminPassword=$(grafana-admin-password)
          grafana.datasources.datasources\.yaml.datasources[0].jsonData.clientId=$(azure-sp-client-id)
          grafana.datasources.datasources\.yaml.datasources[0].jsonData.subscriptionId=$(AZURE_SUBSCRIPTION_ID)
          grafana.datasources.datasources\.yaml.datasources[0].jsonData.tenantId=$(AZURE_TENANT_ID)
          grafana.datasources.datasources\.yaml.datasources[0].secureJsonData.clientSecret=$(azure-sp-client-secret)
        install: true
```

### 7. Azure DevOps Pipeline for Azure Monitor Integration

Create a pipeline for Azure Monitor integration with Grafana:

**azure-pipelines-monitor-integration.yaml**:
```yaml
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - monitoring/dashboards/**

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: environment
  displayName: Environment
  type: string
  default: dev
  values:
  - dev
  - test
  - prod

variables:
- group: azuremonitor-grafana-variables
- name: paramFile
  value: '${{ parameters.environment }}-params.yaml'

stages:
- stage: ConfigureMonitoring
  displayName: Configure Azure Monitor Dashboards
  jobs:
  - job: DeployDashboards
    steps:
    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: 'YourServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az aks get-credentials --resource-group $(AKS_RESOURCE_GROUP) --name $(AKS_CLUSTER_NAME)
          
    - task: AzureKeyVault@2
      displayName: 'Get secrets from KeyVault'
      inputs:
        azureSubscription: 'YourServiceConnection'
        KeyVaultName: 'Goodvault'
        SecretsFilter: 'azure-sp-client-id,azure-sp-client-secret'
          
    - task: Kubernetes@1
      displayName: 'Apply Grafana CRDs'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: 'your-k8s-connection'
        namespace: 'monitoring'
        command: 'apply'
        arguments: '-f monitoring/crds/'
        
    - task: Bash@3
      displayName: 'Apply Azure Monitor Dashboard CRs'
      inputs:
        targetType: 'inline'
        script: |
          # Process environment-specific variables
          envsubst < monitoring/dashboards/azure-monitor-overview.yaml | kubectl apply -f -
          envsubst < monitoring/dashboards/aks-performance.yaml | kubectl apply -f -
```

### 8. Sample Azure Monitor Dashboard CR

Create a sample dashboard CR:

**azure-monitor-overview.yaml**:
```yaml
apiVersion: grafana.com/v1alpha1
kind: GrafanaDashboard
metadata:
  name: azure-monitor-overview
  namespace: monitoring
spec:
  json: |
    {
      "annotations": {
        "list": []
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "datasource": "AzureMonitor",
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "options": {},
          "title": "AKS CPU Usage",
          "type": "timeseries",
          "targets": [
            {
              "appInsights": {
                "dimension": [],
                "metricName": "select",
                "timeGrain": "auto"
              },
              "azureLogAnalytics": {
                "query": "",
                "resultFormat": "time_series",
                "workspace": "${WORKSPACE_ID}"
              },
              "azureMonitor": {
                "aggregation": "Average",
                "alias": "CPU Usage",
                "allowedTimeGrainsMs": [],
                "dimensionFilters": [],
                "dimensions": [],
                "metricDefinition": "Microsoft.ContainerService/managedClusters",
                "metricName": "node_cpu_usage_percentage",
                "metricNamespace": "insights.container/nodes",
                "resourceGroup": "${AKS_RESOURCE_GROUP}",
                "resourceName": "${AKS_CLUSTER_NAME}",
                "timeGrain": "auto"
              },
              "queryType": "Azure Monitor",
              "refId": "A",
              "subscription": "${AZURE_SUBSCRIPTION_ID}"
            }
          ]
        }
      ],
      "schemaVersion": 27,
      "style": "dark",
      "tags": [],
      "timezone": "utc",
      "title": "Azure Monitor Overview",
      "version": 0
    }
```

## Integration Instructions

Here's how all components work together:

1. Azure DevOps pipeline deploys Grafana using Helm charts
2. The Grafana deployment is configured to connect to Azure Monitor
3. Secrets are retrieved from Goodvault for authentication
4. CRDs define custom resources for Grafana dashboards
5. Azure Monitor dashboards are deployed as custom resources
6. Environment-specific parameters control deployment configurations

## Parameter File Structure

For each environment, create a params file in the following structure:

```
deployments/
├── grafana/
│   ├── helm/
│   │   └── ... (helm chart files)
│   ├── values.yaml
│   ├── dev-params.yaml
│   ├── test-params.yaml
│   └── prod-params.yaml
├── monitoring/
│   ├── crds/
│   │   └── grafana-dashboard-crd.yaml
│   └── dashboards/
│       ├── azure-monitor-overview.yaml
│       └── aks-performance.yaml
└── pipelines/
    ├── azure-pipelines-grafana.yaml
    └── azure-pipelines-monitor-integration.yaml
```

## Variable Groups in Azure DevOps

Create a variable group named `azuremonitor-grafana-variables` containing:

```
AKS_RESOURCE_GROUP
AKS_CLUSTER_NAME
AZURE_SUBSCRIPTION_ID
AZURE_TENANT_ID
WORKSPACE_ID (Azure Log Analytics Workspace ID)
```

Sensitive values will be pulled from Goodvault directly.

These implementations should give you a complete setup for Azure Monitor Insights metrics for Grafana on your existing AKS cluster, with proper secrets management and CI/CD pipelines, all without Istio and with environment-specific configurations.
