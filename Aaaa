# Tech Spike Plan – Validate Option 3: OTel → Loki Integration via Event Hub

## 1. Objectives

Define the key questions this spike aims to answer:

* Can OpenTelemetry Collector reliably ingest Azure resource logs via Event Hub and push to Loki?
* What is the expected data latency and ingestion performance?
* What SRE overhead (e.g., maintenance, scaling) does this setup imply?
* Are there cost indicators that make this option viable or prohibitive?

## 2. Scope / Constraints

**In Scope:**

* Route logs from 1–2 Azure resources (e.g., App Service, Function App).
* Configure Event Hub → OpenTelemetry Collector → Loki flow.
* Push one trace sample into Jaeger.

**Out of Scope:**

* Full environment rollout or optimization.
* Automation, scaling, or CI/CD integration.
* Security hardening or production monitoring.

## 3. Experiments / Activities

1. Deploy a lightweight OTel Collector in subscription/AKS for testing.
2. Configure Event Hub namespace and set up diagnostics from one Azure resource.
3. Forward logs from Event Hub → OTel → Loki (validate ingestion).
4. Scrape sample metrics via OTel and confirm visibility in Grafana.
5. Send one test trace into Jaeger to validate end-to-end pipeline.
6. Record performance metrics (latency, resource consumption).

## 4. Time-box

Limit the spike to one sprint. The goal is to **learn fast**, not perfect the setup.

## 5. Outputs

Deliver concise, factual results:

* Findings: what worked, what didn’t.
* Evidence: screenshots, metrics, logs, or configuration snippets.
* Estimated cost: Event Hub + Collector resource cost baseline.
* Risks / Unknowns: integration challenges, scaling limits, support gaps.
* Recommendation: proceed, pivot, or drop.

## 6. Outcome

This spike should prove or disprove feasibility of Option 3 and reduce uncertainty in:

* Technical integration (Event Hub → OTel → Loki).
* Cost and operational complexity.
* Performance and maintainability.
