@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Container Diagram for Centralized Observability Platform (with Security + Non-Prod Consolidation, Landing Excluded)

Person(user, "End User", "Corporate user accessing observability dashboards via Azure AD SSO")

System_Boundary(central_observability_cluster, "Central Observability AKS Cluster") {
    Container(grafana, "Grafana", "Web Application", "Unified dashboard for all environment data")
    Container(otel, "OTel Collector", "Backend Service", "Central collector for telemetry data")
    Container(prometheus, "Prometheus", "Database", "Central metrics storage")
    Container(loki, "Loki", "Database", "Central log aggregation")
    Container(jaeger, "Jaeger", "Backend Service", "Central tracing system")
    Container(ingress, "NGINX Ingress", "Web Server", "Ingress for telemetry and Grafana")

    ContainerDb(prometheus_db, "Prometheus Storage", "TSDB", "Local metrics storage")
    ContainerDb(loki_db, "Loki Storage", "Object Storage", "Local log storage")
    ContainerDb(jaeger_db, "Jaeger Storage", "Database", "Trace storage")
}

' === Security & Identity Services ===
System_Ext(aad, "Azure AD", "Entra ID", "Identity Provider for SSO & Pod Identity")
System_Ext(akv, "Azure Key Vault", "Secrets Store", "Stores TLS certs, API keys, secrets")
System_Ext(nsg, "Network Security", "NSG / Network Policies", "Restricts ingress/egress")

ContainerDb(blob_storage, "Azure Blob Storage", "Cloud Object Storage", "Long-term retention")

' === Consolidated Non-Prod AKS (DEV + FT only) ===
System_Boundary(nonprod_aks, "Non-Prod AKS Environments (DEV + FT)") {
    Container(nonprod_apps, "Application Pods", "Kubernetes Pods", "Workload applications in DEV & FT")
    Container(nonprod_agents, "Node Agents", "Monitoring Agent", "Infra monitoring in DEV & FT")
}

' === Internal observability flows ===
Rel(ingress, otel, "Routes traffic", "HTTP/gRPC")
Rel(otel, prometheus, "Sends metrics", "HTTP")
Rel(otel, loki, "Sends logs", "HTTP")
Rel(otel, jaeger, "Sends traces", "HTTP")
Rel(prometheus, grafana, "Metrics queries", "HTTP")
Rel(loki, grafana, "Logs queries", "HTTP")
Rel(jaeger, grafana, "Traces queries", "HTTP")

Rel(prometheus, prometheus_db, "Stores metrics")
Rel(loki, loki_db, "Stores logs")
Rel(jaeger, jaeger_db, "Stores traces")
Rel(prometheus, blob_storage, "Exports snapshots")
Rel(loki, blob_storage, "Exports logs")

' === Security relationships ===
Rel(user, grafana, "Access dashboards", "HTTPS")
Rel(grafana, aad, "SSO Authentication", "OAuth2/OIDC")
Rel(aad, grafana, "Validates token")

Rel(ingress, akv, "Fetch TLS certs", "CSI Driver")
Rel(grafana, akv, "Retrieve secrets", "Managed Identity")
Rel(otel, akv, "Retrieve API keys", "Managed Identity")
Rel(blob_storage, aad, "Access with identity")

Rel(nsg, ingress, "Restricts ingress")
Rel(nsg, grafana, "Restricts UI access")
Rel(nsg, otel, "Restricts telemetry")

' === Non-prod telemetry flows ===
Rel(nonprod_apps, ingress, "Sends metrics, logs, traces", "OTLP/gRPC")
Rel(nonprod_agents, ingress, "Sends infra telemetry", "OTLP/gRPC")

@enduml
