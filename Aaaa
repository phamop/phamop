# Infrastructure as Code (IAC) - Observability Stack Components

This document outlines the detailed components of an observability stack deployed using **Helm** and **Kustomize** for Infrastructure as Code management.

## ðŸ”¹ Grafana Pod

The Grafana pod serves as the primary visualization and alerting interface for the observability stack.

### Core Components
- **Grafana Core** â€“ Handles dashboard rendering and serves as the alert manager interface
- **Data Source Plugins** â€“ Provides integrations with:
  - Prometheus (metrics)
  - Loki (logs) 
  - Jaeger (distributed tracing)
- **Alerting Engine** â€“ Sends notifications to external channels:
  - Slack
  - Microsoft Teams
  - PagerDuty
- **OAuth2 Proxy Sidecar** â€“ Manages Single Sign-On (SSO) authentication via Azure Active Directory
- **Config Provider** â€“ Dynamically loads dashboards and data sources from GitOps repositories using Helm charts and ConfigMaps

## ðŸ”¹ OpenTelemetry (OTel) Collector Pod

The OTel Collector acts as a central hub for telemetry data processing and routing.

### Receivers
- **OTLP (OpenTelemetry Protocol)** â€“ Accepts telemetry data via gRPC and HTTP protocols
- **Prometheus Receiver** â€“ Scrapes metrics from Prometheus-compatible endpoints
- **Jaeger Receiver** â€“ Ingests distributed tracing data in Jaeger format

### Processors
- **Batch Processor** â€“ Optimizes export throughput by batching telemetry data
- **Resource Processor** â€“ Enriches telemetry data with Kubernetes metadata (pod names, namespaces, labels)
- **Transform Processor** â€“ Performs data manipulation:
  - Renames metric labels
  - Redacts sensitive fields
  - Applies data normalization rules

### Exporters
- **Prometheus Remote Write** â€“ Exports metrics to Prometheus storage
- **Loki Push API** â€“ Sends log data to Loki for storage and querying
- **Jaeger gRPC** â€“ Forwards trace data to Jaeger backend
- **Azure Monitor** (optional) â€“ Integrates with Azure's native monitoring service

## ðŸ”¹ Prometheus + Thanos

Prometheus provides metrics collection and storage, enhanced with Thanos for long-term retention and querying.

### Components
- **Prometheus Server** â€“ Scrapes metrics from OTel Collector and application endpoints
- **Service Discovery** â€“ Automatically discovers targets via Kubernetes API integration
- **Thanos Sidecar** â€“ Uploads Prometheus data blocks to Azure Blob Storage for long-term retention
- **Query Layer** â€“ Enables efficient querying across short-term (Prometheus) and long-term (Thanos) data stores

## ðŸ”¹ Loki

Loki provides centralized log aggregation and querying capabilities.

### Architecture Components
- **Distributor** â€“ Receives incoming log streams and distributes them across ingestors
- **Ingester** â€“ Processes and writes log chunks to Azure Blob Storage
- **Querier** â€“ Handles log query requests and retrieves data from storage
- **Index Gateway** â€“ Manages log metadata and indexing for efficient querying

## ðŸ”¹ Jaeger

Jaeger handles distributed tracing for microservices observability.

### Core Services
- **Collector** â€“ Receives trace spans from OpenTelemetry Collector
- **Ingester** â€“ Processes and writes span data to Blob Storage or database backend
- **Query Service** â€“ Provides trace lookup capabilities for Grafana integration
- **UI (optional)** â€“ Native Jaeger interface (can be embedded or hidden behind Grafana)

## ðŸ”¹ Ingress Controller

The ingress controller manages external access and routing to observability services.

### Configuration
- **Ingress Rules** â€“ Defines routing for:
  - OTLP endpoint: `otlp.monitoring.internal` (internal telemetry ingestion)
  - Grafana endpoint: `grafana.monitoring.company.com` (external dashboard access)
- **TLS/mTLS Termination** â€“ Handles SSL certificate management integrated with Azure Key Vault CSI driver for secure certificate storage and rotation

## IAC Deployment Strategy

### Helm Charts
- **Package Management** â€“ Uses Helm for templating and versioning of Kubernetes manifests
- **Value Overrides** â€“ Environment-specific configurations managed through values files
- **Dependency Management** â€“ Coordinates deployment order and dependencies between services

### Kustomize
- **Configuration Management** â€“ Handles environment-specific customizations without duplicating base manifests
- **Patch Management** â€“ Applies targeted modifications for different deployment environments
- **Resource Composition** â€“ Combines base configurations with overlays for staging, production, and development environments

This architecture provides a comprehensive, cloud-native observability solution with proper separation of concerns and scalable data processing capabilities.
