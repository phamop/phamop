trigger:
  branches:
    include:
      - feature/devHbtFlexGrafana
      #- develop

pool: "CMHC-SCHL Agent Pool (Linux) - DEV"

parameters:
  - name: environment
    type: string
    default: "dev"
    values:
      - dev
      - prod
variables:
  - name: helmVersion
    value: "3.9.0"
  - name: k8sNamespace
    value: "monitoring"
  - name: k8sNamespace1
    value: "kube-system"
  - name: k8sNamespace2
    value: "eddv3-hbt"
  - name: releaseName
    value: "grafana"
  - name: chartVersion
    value: "9.2.3"
  - name: lokiChartVersion
    value: "5.41.5"
  - name: OtelChartVersion
    value: "latest"
  - name: csiChartVersion
    value: "1.5.2"
  - name: JaegarChartVersion
    value: "1.42.0"
  - name: vaultname
    value: EDDV-APP-EIKV01
  - name: SECRET_NAME
    value: azure-monitors
  - name: secret1Name
    value: "GRAFANA-SP-AZURE-MONITOR-CLIENT-SECRET"
  - name: secret2Name
    value: "GRAFANA-SP-AZURE-MONITOR-CLIENT-ID"
  - name: secret3Name
    value: "GRAFANA-SP-AZURE-MONITOR-TENANT-ID"
  - name: secret4Name
    value: 'HBT-GrafanaDEV-SSO-Client-ID'
  - name: secret5Name 
    value: 'HBT-GrafanaDEV-SSO-Client-Secret'
  - ${{ if eq(parameters.environment, 'dev')}}:
      - template: stages/config-dev.yaml
  - ${{ if eq(parameters.environment, 'prod')}}:
      - template: stages/config-prod.yaml
stages:
  - stage: CSI
    displayName: "Deploying CSI Driver Helm chart"
    jobs:
      - job: DeployCSIchart
        displayName: Deploy CSI using Helm
        steps:
          - checkout: self

          - script: |
              sudo apt-get update
              sudo apt-get install -y zip unzip
              curl -LO https://dl.k8s.io/release/v1.32.0/bin/linux/amd64/kubectl
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
              chmod +x kubectl
              mkdir -p ~/.local/bin
              mv ./kubectl ~/.local/bin/kubectl
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
              sudo apt-get install azure-cli -y
              echo "Checking files in $(Pipeline.Workspace)"
              ls -la $(Pipeline.Workspace)/s/
            displayName: "Package installation and files verification"

          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: latest

          - task: AzureCLI@2
            displayName: "Login to Azure and configure kubectl"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az aks get-credentials --admin --name $(clusterName) --resource-group $(resourceGroup) --overwrite-existing
           
          - task: KubeloginInstaller@0
            displayName: "Install kubelogin"

          - task: AzureKeyVault@2
            inputs:
              azureSubscription: $(azureSubscription)
              KeyVaultName: $(vaultname) 
              SecretsFilter: $(secret1Name),$(secret2Name),$(secret3Name),$(secret4name),,$(secret5Name)
              RunAsPreJob: false

          - script: |
              echo "Replacing placeholders with actual secret values..."
              sed -i 's/<CLIENTSECRET>/$(GRAFANA-SP-AZURE-MONITOR-CLIENT-SECRET)/g' $(Pipeline.Workspace)/s/devops/helm-charts/observability/azure-native/secretstore.yaml 
              sed -i 's/<CLIENTID>/$(GRAFANA-SP-AZURE-MONITOR-CLIENT-ID)/g' $(Pipeline.Workspace)/s/devops/helm-charts/observability/azure-native/secretstore.yaml 
              sed -i 's/<TENANTID>/$(GRAFANA-SP-AZURE-MONITOR-TENANT-ID)/g' $(Pipeline.Workspace)/s/devops/helm-charts/observability/azure-native/secretstore.yaml
              sed -i 's/<GRAFANA_CLIENT_ID>/$(HBT-GrafanaDEV-SSO-Client-ID)/g' $(Pipeline.Workspace)/s/devops/helm-charts/observability/azure-native/secretstore.yaml
              sed -i 's/<GRAFANA_SECRET>/$(HBT-GrafanaDEV-SSO-Client-Secret)/g' $(Pipeline.Workspace)/s/devops/helm-charts/observability/azure-native/secretstore.yaml

            displayName: "Update Secret Manifest with Secret Values"

          - task: Kubernetes@1
            displayName: "Apply Service Account and Secret Store"
            inputs:
              connectionType: "Azure Resource Manager"
              azureSubscriptionEndpoint: $(azureSubscription)
              azureResourceGroup: $(resourceGroup)
              kubernetesCluster: $(clusterName)
              command: "apply"
              arguments: "-f $(Pipeline.Workspace)/s/devops/helm-charts/observability/azure-native/sa.yaml -f $(Pipeline.Workspace)/s/devops/helm-charts/observability/azure-native/secretstore.yaml "
              #rguments: '-f $(Pipeline.Workspace)/s/helm-charts/sa.yaml -f $(Pipeline.Workspace)/s/helm-charts/secretstore.yaml '
              namespace: $(k8sNamespace)
            continueOnError: true      

  - stage: OpenTelemetry
    displayName: "Deploying Otel Collector"
    dependsOn: CSI
    jobs:
      - job: DeployOtelCollector
        displayName: Deploy OpenTelemetry Collector using Helm
        steps:
          - checkout: self

          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: latest

          - task: KubeloginInstaller@0
            displayName: "Install kubelogin"

          - script: |
              helm repo add grafana https://grafana.github.io/helm-charts
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo add bitnami https://charts.bitnami.com/bitnami
              helm repo update
            displayName: "Add Grafana  and Prometheus Helm repo"

          - script: |
              helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
              helm repo update
            displayName: "Add Jaegar Helm repo"

          - script: |
              helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
              helm repo update
            displayName: "Add OpenTelemetry Helm repo"

          - script: |
              helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-operator
              helm repo update
            displayName: "Add Operator OpenTelemetry Helm repo"          

          - task: HelmDeploy@0
            displayName: "Deploy Grafana kube-prometheus-stack Helm Chart with OTEL collector Scraping"
            inputs:
              azureSubscription: $(azureSubscription)
              command: "upgrade"
              chartType: "Name"
              chartName: "prometheus-community/kube-prometheus-stack"
              chartVersion: "latest"
              kubernetesCluster: $(clusterName)
              azureResourceGroup: $(resourceGroup)
              namespace: $(k8sNamespace)
              releaseName: 'kube-prometheus-stack'
              waitForExecution: true
              valueFile:  '$(Pipeline.Workspace)/s/devops/helm-charts/observability/OSS/metrics/prometheus-values.yaml'
              install: true 
              arguments: '--timeout 5m0s --create-namespace'              

          - task: HelmDeploy@0
            displayName: "Deploy Grafana Loki Helm Chart"
            inputs:
              azureSubscription: $(azureSubscription)
              command: "upgrade"
              chartType: "Name"
              chartName: "grafana/loki"
              chartVersion: "6.28.0"
              kubernetesCluster: $(clusterName)
              azureResourceGroup: $(resourceGroup)
              namespace: $(k8sNamespace)
              releaseName: "loki"
              #  valueFile: '$(Pipeline.Workspace)/s/devops/helm-charts/observability/loki.yaml'
              valueFile: "$(Pipeline.Workspace)/s/devops/helm-charts/observability/OSS/logging/$(lokiValuesFile)"
              install: true
              waitForExecution: true
              arguments: "--timeout 5m0s --create-namespace"

          - task: HelmDeploy@0
            displayName: "Deploy Jaeger Helm Chart"
            inputs:
              azureSubscription: $(azureSubscription)
              command: "upgrade"
              chartType: "Name"
              chartName: "jaegertracing/jaeger"
              chartVersion: "latest"
              kubernetesCluster: $(clusterName)
              azureResourceGroup: $(resourceGroup)
              namespace: $(k8sNamespace)
              releaseName: "jaeger"
              valueFile: "$(Pipeline.Workspace)/s/devops/helm-charts/observability/OSS/traces/$(JaegerValuesFile)"
              install: true
              waitForExecution: true
              arguments: "--timeout 5m0s --create-namespace"

          # - task: HelmDeploy@0
          #   displayName: "Deploy Opentelemetry operator Helm Chart"
          #   inputs:
          #     azureSubscription: $(azureSubscription)
          #     command: "upgrade"
          #     chartType: "Name"
          #     chartName: "open-telemetry/opentelemetry-operator"
          #     chartVersion: 0.28.0
          #     kubernetesCluster: $(clusterName)
          #     azureResourceGroup: $(resourceGroup)
          #     namespace: $(k8sNamespace)
          #     releaseName: "my-opentelemetry-operator"
          #     valueFile: "$(Pipeline.Workspace)/s/devops/helm-charts/observability/otelcollector/otel-collector-crd.yaml "
          #     install: true
          #     waitForExecution: true
          #     arguments: "--timeout 5m0s --create-namespace"
          # - script: |
          #     echo "Waiting for OpenTelemetry Operator pod to appear and become ready..."

          #     for i in {1..24}; do
          #       POD=$(kubectl get pod -n $(k8sNamespace) -l app.kubernetes.io/name=opentelemetry-operator -o jsonpath="{.items[0].metadata.name}" 2>/dev/null)
          #       if [ -n "$POD" ]; then
          #        echo "Found pod: $POD"
          #        kubectl wait --for=condition=Ready pod/$POD -n $(k8sNamespace) --timeout=60s && break
          #       fi
          #       echo "Waiting for pod... attempt $i"
          #       sleep 5
          #     done

          #     if [ -z "$POD" ]; then
          #      echo "no OpenTelemetry Operator pod not found after waiting."
          #      exit 1
          #     fi
          #   displayName: Wait for OpenTelemetry Operator webhook to be ready

          - task: HelmDeploy@0
            displayName: Deploy OpenTelemetry Operator Helm Chart
            inputs:
              azureSubscription: $(azureSubscription)
              command: upgrade
              chartType: Name
              chartName: open-telemetry/opentelemetry-operator
              chartVersion: 0.28.0
              kubernetesCluster: $(clusterName)
              azureResourceGroup: $(resourceGroup)
              namespace: $(k8sNamespace)
              releaseName: my-opentelemetry-operator
              valueFile: $(Pipeline.Workspace)/s/devops/helm-charts/observability/otelcollector/otel-operator-values.yaml
              install: true
              waitForExecution: true
              arguments: --timeout 5m0s --create-namespace
        

          - task: Kubernetes@1
            displayName: Apply OpenTelemetryCollector Custom Resource
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(azureSubscription)
              azureResourceGroup: $(resourceGroup)
              kubernetesCluster: $(clusterName)
              namespace: $(k8sNamespace)
              command: apply
              useConfigurationFile: true
              configuration: '$(Pipeline.Workspace)/s/devops/helm-charts/observability/otelcollector/otel-collector-crd.yaml'

          # - task: HelmDeploy@0
          #   displayName: "Deploy Otel Collector  Helm Chart"
          #   inputs:
          #     azureSubscription: $(azureSubscription)
          #     command: "upgrade"
          #     chartType: "Name"
          #     chartName: "open-telemetry/opentelemetry-collector"
          #     chartVersion: $(OtelChartVersion)
          #     #chartVersion: '0.67.0'
          #     kubernetesCluster: $(clusterName)
          #     azureResourceGroup: $(resourceGroup)
          #     namespace: $(k8sNamespace)
          #     releaseName: "my-opentelemetry-collector"
          #     valueFile: " $(Pipeline.Workspace)/s/devops/helm-charts/observability/otelcollector/$(otelValuesFile)"
          #     install: true
          #     waitForExecution: true
          #     arguments: "--timeout 5m0s --create-namespace"

  - stage: Grafana
    displayName: "Deploying Grafana"
    dependsOn: OpenTelemetry
    jobs:
      - job: DeployGrafana
        displayName: Deploy Grafana using Helm
        steps:
          - checkout: self

          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: latest

          - task: KubeloginInstaller@0
            displayName: "Install kubelogin"

          - script: |
              helm repo add grafana https://grafana.github.io/helm-charts
              helm repo update
            displayName: "Add Grafana Helm repo"

          - task: HelmDeploy@0
            displayName: "Deploy Grafana Helm Chart"
            inputs:
              azureSubscription: $(azureSubscription)
              command: "upgrade"
              chartType: "Name"
              chartName: "grafana/grafana"
              chartVersion: $(chartVersion)
              kubernetesCluster: $(clusterName)
              azureResourceGroup: $(resourceGroup)
              namespace: $(k8sNamespace)
              releaseName: $(releaseName)
              valueFile: "$(Pipeline.Workspace)/s/devops/helm-charts/observability/grafana/$(valuesFile)"
              install: true
              waitForExecution: true 
              arguments: "--timeout 5m0s --create-namespace"


          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: latest

          - task: HelmDeploy@0
            displayName: "Deploy Grafana Proxy via helm"
            inputs:
              azureSubscription: $(azureSubscription)
              command: 'upgrade'
              chartType: "$(Pipeline.Workspace)/s/devops/helm-charts/observability/grafana/grafana-proxy/Chart.yaml"
              chartPath: "$(Pipeline.Workspace)/s/devops/helm-charts/observability/grafana/grafana-proxy"
              kubernetesCluster: $(clusterName)
              azureResourceGroup: $(resourceGroup)
              namespace: $(k8sNamespace2)
              releaseName: 'grafana-proxy'
              valueFile: "$(Pipeline.Workspace)/s/devops/helm-charts/observability/grafana/grafana-proxy/values.yaml"
              install: true
              waitForExecution: true
              arguments: '--timeout 10m0s --create-namespace'

    
  



