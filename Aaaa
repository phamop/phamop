Based on the provided text, here is the information presented in a wiki format.

---

### Non-Functional Requirements (NFRs) for the Observability Platform

This document outlines the non-functional requirements (NFRs) for the Observability Platform. NFRs define *how* the system should operate, focusing on constraints and quality attributes rather than specific functions. They are crucial for ensuring the system is effective, secure, reliable, and maintainable.

#### NFR Categories

| Category | Description | Target / Goal | Technical Implementation |
| :--- | :--- | :--- | :--- |
| **Availability** | Ensures the platform is operational and accessible when needed. | 99.9% uptime for ingestion and Grafana UI. | • AKS cluster deployed across Availability Zones (AZs).<br>• Use of PodDisruptionBudgets for resilience. |
| **Security** | Protects the system and its data from unauthorized access and threats. | Secure access and data protection. | • Dedicated VNet deployment.<br>• Azure AD SSO for identity management.<br>• TLS 1.3 for encryption in transit.<br>• Blob storage Server-Side Encryption (SSE) with Customer-Managed Keys (CMK) for encryption at rest. |
| **Performance** | Addresses the speed and responsiveness of the system. | <5s query latency on "hot data" (<30 days old). | • Dedicated memory-optimized node pool for Prometheus.<br>• Fine-tuned data retention policies for Prometheus and Loki. |
| **Retention** | Defines the data lifecycle and storage policies. | • **Hot data:** 30 days.<br>• **Total data (hot + archive):** 90 days. | • Retention policies in Prometheus, Loki, and Jaeger.<br>• Blob Lifecycle Policy to manage storage and expiration. |
| **Operability** | Refers to the ease of operating and maintaining the system. | Proactive system management. | • **Self-monitoring** with Prometheus for metrics.<br>• **Centralized logging** with Loki.<br>• Alertmanager for notifications.<br>• **Future:** GitOps (ArgoCD/FluxCD) for automated deployment. |
| **Cost** | Optimizes the financial spend associated with the platform. | Cost-effective operations. | • Spot Node Pools for non-critical workloads.<br>• Cluster Autoscaler to right-size resources.<br>• Blob storage tiering.<br>• Azure Budgets and Cost Alerts for governance. |
| **Scalability** | The system's ability to handle increasing workload or users. | Scale resources based on demand. | • **Horizontal Pod Autoscaler (HPA)** for Grafana and OTel.<br>• **Vertical Pod Autoscaler (VPA)** in recommendation mode.<br>• Cluster Autoscaler for AKS nodes.<br>• **Future:** Multi-cluster federation via Azure Arc. |
| **Compliance & Auditability** | Ensures the platform adheres to industry standards and regulations. | Standardized, secure, and auditable configuration. | • Enforcement of CIS AKS baseline policies.<br>• Use of OPA Gatekeeper and Azure Policy.<br>• Blob Write Once, Read Many (WORM) storage for immutable audit logs. |
