# Loki Deployment Guide
## Azure Blob Storage with Managed Identity

### Prerequisites

1. **AKS Cluster with OIDC Issuer enabled**
2. **Azure Storage Account**: `eddv1sa`
3. **Managed Identity**: `oss-sa`
4. **Namespace**: `monitoring`
5. **Helm 3.x** or **Kustomize** installed
6. **Prometheus Operator** (for monitoring)

---

## Part 1: Azure Setup

### Step 1: Enable OIDC Issuer on AKS

```bash
# Enable OIDC issuer if not already enabled
az aks update \
  --resource-group <YOUR_RG> \
  --name <YOUR_CLUSTER> \
  --enable-oidc-issuer

# Get OIDC issuer URL
export AKS_OIDC_ISSUER=$(az aks show \
  --resource-group <YOUR_RG> \
  --name <YOUR_CLUSTER> \
  --query "oidcIssuerProfile.issuerUrl" \
  -o tsv)

echo $AKS_OIDC_ISSUER
```

### Step 2: Create Managed Identity

```bash
# Create user-assigned managed identity
az identity create \
  --name oss-sa \
  --resource-group <YOUR_RG>

# Get identity details
export USER_ASSIGNED_CLIENT_ID=$(az identity show \
  --name oss-sa \
  --resource-group <YOUR_RG> \
  --query 'clientId' \
  -o tsv)

export USER_ASSIGNED_OBJECT_ID=$(az identity show \
  --name oss-sa \
  --resource-group <YOUR_RG> \
  --query 'principalId' \
  -o tsv)

export TENANT_ID=$(az account show --query tenantId -o tsv)

echo "Client ID: $USER_ASSIGNED_CLIENT_ID"
echo "Object ID: $USER_ASSIGNED_OBJECT_ID"
echo "Tenant ID: $TENANT_ID"
```

### Step 3: Grant Storage Access

```bash
# Get storage account resource ID
export STORAGE_ACCOUNT_ID=$(az storage account show \
  --name eddv1sa \
  --resource-group <YOUR_RG> \
  --query 'id' \
  -o tsv)

# Grant Storage Blob Data Contributor role
az role assignment create \
  --assignee-object-id $USER_ASSIGNED_OBJECT_ID \
  --role "Storage Blob Data Contributor" \
  --scope $STORAGE_ACCOUNT_ID

# Verify role assignment
az role assignment list \
  --assignee $USER_ASSIGNED_OBJECT_ID \
  --scope $STORAGE_ACCOUNT_ID \
  --output table
```

### Step 4: Create Storage Container

```bash
# Create container for Loki data
az storage container create \
  --name loki \
  --account-name eddv1sa \
  --auth-mode login

# Create subcontainers (optional, Loki will create them)
az storage container create --name chunks --account-name eddv1sa --auth-mode login
az storage container create --name ruler --account-name eddv1sa --auth-mode login
az storage container create --name admin --account-name eddv1sa --auth-mode login
```

### Step 5: Create Federated Identity Credential

```bash
# Create federated credential for workload identity
az identity federated-credential create \
  --name loki-federated-identity \
  --identity-name oss-sa \
  --resource-group <YOUR_RG> \
  --issuer $AKS_OIDC_ISSUER \
  --subject system:serviceaccount:monitoring:oss-sa \
  --audience api://AzureADTokenExchange

# Verify federated credential
az identity federated-credential show \
  --name loki-federated-identity \
  --identity-name oss-sa \
  --resource-group <YOUR_RG>
```

---

## Part 2: Helm Deployment

### Step 1: Add Grafana Helm Repository

```bash
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
```

### Step 2: Create Namespace

```bash
kubectl create namespace monitoring

# Label namespace for workload identity
kubectl label namespace monitoring azure.workload.identity/enabled=true
```

### Step 3: Update Helm Values

Create a file `loki-values.yaml` with the provided configuration and update these fields:

```yaml
serviceAccount:
  annotations:
    azure.workload.identity/client-id: "<YOUR_CLIENT_ID>"
    azure.workload.identity/tenant-id: "<YOUR_TENANT_ID>"

loki:
  storage:
    azure:
      userAssignedId: "<YOUR_CLIENT_ID>"  # Optional for user-assigned identity
```

### Step 4: Install Loki

```bash
# Install with Helm
helm install loki grafana/loki \
  --namespace monitoring \
  --values loki-values.yaml \
  --version 6.0.0

# Or upgrade if already installed
helm upgrade loki grafana/loki \
  --namespace monitoring \
  --values loki-values.yaml \
  --version 6.0.0
```

### Step 5: Verify Installation

```bash
# Check pods
kubectl get pods -n monitoring -l app.kubernetes.io/name=loki

# Check service account
kubectl get serviceaccount oss-sa -n monitoring -o yaml

# Check logs
kubectl logs -n monitoring -l app.kubernetes.io/component=backend --tail=50

# Test connection to Azure
kubectl exec -n monitoring deployment/loki-backend -- \
  wget -O- http://localhost:3100/ready
```

---

## Part 3: Kustomize Deployment

### Step 1: Prepare Kustomize Files

Create directory structure:

```bash
mkdir -p loki-kustomize
cd loki-kustomize
```

Save the provided Kustomize files in this directory.

### Step 2: Update Configuration

Edit `serviceaccount.yaml` and `azure-workload-identity.yaml` with your values:

```bash
# Update with your actual values
sed -i "s|azure.workload.identity/client-id: \"\"|azure.workload.identity/client-id: \"$USER_ASSIGNED_CLIENT_ID\"|g" serviceaccount.yaml
sed -i "s|azure.workload.identity/tenant-id: \"\"|azure.workload.identity/tenant-id: \"$TENANT_ID\"|g" serviceaccount.yaml
```

### Step 3: Apply with Kustomize

```bash
# Build and preview
kubectl kustomize . | less

# Apply to cluster
kubectl apply -k .

# Or using kustomize directly
kustomize build . | kubectl apply -f -
```

### Step 4: Verify Deployment

```bash
# Check all resources
kubectl get all -n monitoring -l app.kubernetes.io/part-of=loki

# Check CRDs
kubectl get crds | grep loki

# Check LokiStack instance
kubectl get lokistack -n monitoring

# Check HPA status
kubectl get hpa -n monitoring
```

---

## Part 4: Monitoring Setup

### Step 1: Verify ServiceMonitor

```bash
# Check if ServiceMonitor is created
kubectl get servicemonitor -n monitoring loki -o yaml

# Verify Prometheus is scraping
kubectl port-forward -n monitoring svc/prometheus-operated 9090:9090
# Open http://localhost:9090 and check targets
```

### Step 2: Check PrometheusRule

```bash
# Verify alerts are loaded
kubectl get prometheusrule -n monitoring loki-alerts -o yaml

# Check in Prometheus UI
# Navigate to Alerts section
```

### Step 3: Access Loki

```bash
# Port forward to Loki gateway
kubectl port-forward -n monitoring svc/loki-gateway 3100:80

# Test query
curl http://localhost:3100/loki/api/v1/labels

# Or use LogCLI
logcli --addr=http://localhost:3100 labels
```

---

## Part 5: Testing & Validation

### Test 1: Verify Azure Blob Storage Connection

```bash
# Check if data is being written to Azure
az storage blob list \
  --container-name chunks \
  --account-name eddv1sa \
  --auth-mode login \
  --output table

# Should see index and chunk files
```

### Test 2: Send Test Logs

```bash
# Create test pod
kubectl run test-logger --image=busybox --restart=Never -- sh -c "while true; do echo 'Test log entry'; sleep 1; done"

# Wait a few minutes, then query
curl -G -s "http://localhost:3100/loki/api/v1/query" \
  --data-urlencode 'query={pod="test-logger"}' | jq
```

### Test 3: Verify Autoscaling

```bash
# Generate load
kubectl run -it --rm load-generator \
  --image=grafana/k6:latest \
  --restart=Never \
  -- run - <<EOF
import http from 'k6/http';
export default function () {
  http.post('http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push', 
    JSON.stringify({
      streams: [{ stream: { job: 'test' }, values: [[ '$(date +%s)000000000', 'test log' ]] }]
    })
  );
}
EOF

# Watch HPA scale up
kubectl get hpa -n monitoring -w
```

---

## Part 6: Troubleshooting

### Issue: Pods not starting

```bash
# Check pod status
kubectl describe pod -n monitoring -l app.kubernetes.io/name=loki

# Check events
kubectl get events -n monitoring --sort-by='.lastTimestamp'
```

### Issue: Authentication errors to Azure

```bash
# Verify workload identity labels
kubectl get pod -n monitoring -o yaml | grep -A 5 "workload.identity"

# Check service account token
kubectl exec -n monitoring deployment/loki-backend -- \
  cat /var/run/secrets/azure/tokens/azure-identity-token

# Test managed identity
kubectl run -it --rm debug \
  --image=mcr.microsoft.com/azure-cli \
  --serviceaccount=oss-sa \
  --namespace=monitoring \
  -- az storage blob list \
       --container-name loki \
       --account-name eddv1sa \
       --auth-mode login
```

### Issue: High memory usage

```bash
# Adjust limits in Helm values
# Increase memory limits and requests
# Consider scaling horizontally first

# Check current usage
kubectl top pods -n monitoring -l app.kubernetes.io/name=loki
```

### Issue: Slow queries

```bash
# Check query performance
kubectl logs -n monitoring -l app.kubernetes.io/component=querier | grep -i "query"

# Adjust query limits in Helm values
# Increase max_concurrent or split_queries_by_interval
```

---

## Part 7: Maintenance

### Backup Configuration

```bash
# Export Helm values
helm get values loki -n monitoring > loki-backup-values.yaml

# Backup CRDs
kubectl get crd lokistacks.loki.grafana.com -o yaml > lokistack-crd-backup.yaml

# Backup instance
kubectl get lokistack -n monitoring loki -o yaml > loki-instance-backup.yaml
```

### Upgrade Loki

```bash
# Using Helm
helm repo update
helm upgrade loki grafana/loki \
  --namespace monitoring \
  --values loki-values.yaml \
  --version <NEW_VERSION>

# Using Kustomize
# Update image versions in manifests, then:
kubectl apply -k .
```

### Clean Up

```bash
# Uninstall Helm release
helm uninstall loki -n monitoring

# Or delete Kustomize resources
kubectl delete -k .

# Delete namespace (careful!)
kubectl delete namespace monitoring

# Clean up Azure resources
az identity federated-credential delete \
  --name loki-federated-identity \
  --identity-name oss-sa \
  --resource-group <YOUR_RG>

az identity delete --name oss-sa --resource-group <YOUR_RG>
```

---

## Additional Resources

- **Loki Documentation**: https://grafana.com/docs/loki/latest/
- **Azure Workload Identity**: https://azure.github.io/azure-workload-identity/
- **Helm Chart**: https://github.com/grafana/loki/tree/main/production/helm/loki
- **Kustomize**: https://kustomize.io/

## Configuration Summary

| Component | Min Replicas | Max Replicas | CPU Request | Memory Request |
|-----------|--------------|--------------|-------------|----------------|
| Backend   | 3            | 10           | 200m        | 512Mi          |
| Read      | 3            | 10           | 200m        | 512Mi          |
| Write     | 3            | 10           | 200m        | 512Mi          |
| Gateway   | 2            | 5            | 100m        | 128Mi          |

**Storage**: Azure Blob Storage `eddv1sa` with Managed Identity `oss-sa`  
**Retention**: 31 days  
**Replication Factor**: 3  
**Autoscaling**: Enabled based on CPU (70%) and Memory (80%)
