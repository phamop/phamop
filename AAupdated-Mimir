Prep for Observability OSS Stack


Document Title: Discovery and Implementation Plan: AKS Observability Stack & Jaeger Refactoring

Version: 1.0
Date: September 09, 2025
Author: Oluwafemi - Femi
Status: Draft for Review

### 1. Description

This document serves as a comprehensive discovery and planning artifact for the deployment and optimization of our observability stack on Azure Kubernetes Service (AKS). 
The primary objectives are to ensure a seamless, secure, and production-ready deployment by gathering all necessary configuration details and requirements. 
A specific focus is placed on refactoring the Jaeger tracing component from its current proof-of-concept (POC) `allInOne` configuration to a highly available, scalable, and durable `production` strategy.

### 2. Implementation Approach

#### 2.1. Shared Technology Integration

##### i. Certificate Issuer (Complete)

To accelerate the initial setup of the Observability OSS stack, we will use a self-signed certificate for the development environment. 
This is a temporary measure to unblock development and testing. Once the stack is operational, we will follow the formal process to migrate to a certificate from our official issuer for final state.

Note:
Self-Signed certificate - pipeline https://dev.azure.com/cmhcvsts/CMHC-SCHL%20-%20DevOps/_git/CMHC-SCHL-DEVOPS-BUILD-PLATFORM?path=/devops/pipelines/setup/generate-aks-tls-certificates


Solution: cert-manager

##### ii. Ingress Controller (Complete)

   Solution: NGINX Ingress Controller (kubernetes.github.io/ingress-nginx)
   Rationale: The NGINX Ingress Controller is mature, feature-rich, well-supported, and aligns with our current technology footprint. 

##### iii. Group Sync & RBAC (Complete)

   Method: Azure Active Directory (AAD) Integration with AKS.
   Rationale: Leveraging AAD integration provides a seamless and secure identity layer for the cluster, eliminating the need for separate credential management and enabling centralized user and group lifecycle management.
   Implementation Details:
       AKS Cluster Configuration: The AKS cluster must be c reconfigured with the `--aad-admin-group-object-ids` parameter to grant specific AAD groups cluster-admin access.
       Group Synchronization: Azure AD groups (e.g., `aks-observability-admins`, `aks-observability-viewers`) will be used to manage access.
     

#### 3.1. Jaeger Optimization & Transition (In progress)

   Current State Analysis: The existing deployment uses the `allInOne` strategy, which combines agent, collector, query, and in a single pod with in-memory storage. This is unsuitable for production due to:
       Data Loss: Traces are lost on pod restart.
       Lack of Scalability: Components cannot be scaled independently.
       No Persistence: In-memory storage is ephemeral.
   Target State: `production` deployment strategy managed  by jaeger Operator
   Implementation Details:
       
	Deployment Mode: production

	Storage Backend: Elasticsearch. A highly available, persistent storage layer for trace data. (Complete)

	Implementation: Use the official Elasticsearch ECK (Elastic Cloud on Kubernetes) Operator or a managed Azure 	Elasticsearch/OpenSearch service for reduced operational overhead. (Complete)


	Uses the Jaeger ES Index Cleaner: The official Jaeger image provides an es-index-cleaner tool that can be run as a CronJob to delete indices older than a certain period (e.g., 30 days). (pending)

Current Risk in the testing stage.

There seems to be namespace that exist on the deployment that does not exist in the AKS (eddv-bld)


### 4 Value & Priority

   High Priority. This proactive discovery directly addresses operational and security risks.
   	Security Hardening: Defining RBAC and TLS upfront significantly reduces the attack surface and prevents unauthorized access to sensitive observability data.
   	Increased Reliability: The highly available Jaeger deployment on Elasticsearch eliminates single points of failure, ensuring tracing data is not lost during node failures.
	Operational Efficiency: Automation through the Jaeger Operator and Cert-Manager reduces manual toil and potential for human error.
	Cost Management: The archiving strategy allows for cost-effective long-term retention of trace data in cheap blob storage while maintaining high-performance querying on recent data in Elasticsearch.
   	Reduced Technical Debt: Replacing the POC Jaeger setup removes a significant anti-pattern and lays a foundation that is easier to maintain and support.

### 4. Done Criteria

A document is produced, cataloging all relevant AKS configuration details and the specific implementation details for:
i.  Certificate Issuer (Complete: Section 2.1.i)
ii. Ingress Controller (Complete: Section 2.1.ii)
iii. Group Sync & RBAC configuration (Complete: Section 2.1.iii)
 
Code verification is in the Repo - 

Validation:
The discovery document has been reviewed and signed off by the teams member.

---

Sign-off:
