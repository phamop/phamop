##[error]Script failed with error: Error: Input required: connectedServiceNameARM
    at Object.getInput (/azp/agent/_work/_tasks/AzureCLI_46e4be58-730b-4389-8a2f-ea10b3e5e815/2.254.0/node_modules/azure-pipelines-task-lib/task.js:231:15)
    at azureclitask.setAzureCloudBasedOnServiceEndpoint (/azp/agent/_work/_tasks/AzureCLI_46e4be58-730b-4389-8a2f-ea10b3e5e815/2.254.0/azureclitask.js:294:35)
    at azureclitask.<anonymous> (/azp/agent/_work/_tasks/AzureCLI_46e4be58-730b-4389-8a2f-ea10b3e5e815/2.254.0/azureclitask.js:61:22)
    at Generator.next (<anonymous>)
    at fulfilled (/azp/agent/_work/_tasks/AzureCLI_46e4be58-730b-4389-8a2f-ea10b3e5e815/2.254.0/azureclitask.js:5:58)
##[error]Script failed with error: Error: Input required: connectedServiceNameARM
    at Object.getInput (/azp/agent/_work/_tasks/AzureCLI_46e4be58-730b-4389-8a2f-ea10b3e5e815/2.254.0/node_modules/azure-pipelines-task-lib/task.js:231:15)
    at azureclitask.setAzureCloudBasedOnServiceEndpoint (/azp/agent/_work/_tasks/AzureCLI_46e4be58-730b-4389-8a2f-ea10b3e5e815/2.254.0/azureclitask.js:294:35)
    at azureclitask.<anonymous> (/azp/agent/_work/_tasks/AzureCLI_46e4be58-730b-4389-8a2f-ea10b3e5e815/2.254.0/azureclitask.js:61:22)
    at Generator.next (<anonymous>)
    at fulfilled (/azp/agent/_work/_tasks/AzureCLI_46e4be58-730b-4389-8a2f-ea10b3e5e815/2.254.0/azureclitask.js:5:58)
trigger:
  branches:
    include:
      - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: Environment
    type: string
    default: 'dev'
    values:
      - dev
      - prod

variables:
  - group: AzureCredentials  # Reference to your variable group containing secrets
  - name: helmVersion
    value: '3.9.0'
  - name: kubectlVersion
    value: 'v1.32.0'

stages:
  - ${{ if eq(parameters.Environment, 'dev') }}:
    - template: stages/config-dev.yml
  - ${{ if eq(parameters.Environment, 'prod') }}:
    - template: stages/config-prd.yml

  - stage: ESO
    displayName: 'Deploying ESO Helm chart'
    jobs:
      - job: DeployESOchart
        displayName: 'Deploy ESO using Helm'
        steps:
          - checkout: self

          - task: UsePythonVersion@0
            displayName: 'Use Python 3.x'
            inputs:
              versionSpec: '3.x'

          - script: |
              sudo apt-get update
              sudo apt-get install -y zip unzip
              curl -LO "https://dl.k8s.io/release/$(kubectlVersion)/bin/linux/amd64/kubectl"
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
              echo "Checking files in $(Pipeline.Workspace)"
              ls -la $(Pipeline.Workspace)/s/
            displayName: 'Install dependencies and verify files'

          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: $(helmVersion)

          - task: AzureCLI@2
            displayName: 'Login to Azure and configure kubectl'
            inputs:
              azureSubscription: $(AzureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az login --service-principal -u $(ServicePrincipalClientId) -p $(ServicePrincipalClientSecret) --tenant $(AzureTenantId)
                az account set --subscription $(AzureSubscriptionId)
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --admin --overwrite-existing
                kubectl config use-context $(aksClusterName)

          - task: KubeloginInstaller@0
            displayName: 'Install kubelogin'

          - task: AzureCLI@2
            displayName: 'Apply SecretProviderClass'
            inputs:
              azureSubscription: $(AzureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                cat <<EOF | kubectl apply -f -
                apiVersion: secrets-store.csi.x-k8s.io/v1
                kind: SecretProviderClass
                metadata:
                  name: azure-kv
                  namespace: $(namespace)
                spec:
                  provider: azure
                  parameters:
                    keyvaultName: "$(keyVaultName)"
                    objects: |
                      array:
                        - |
                          objectName: grafana-admin-user
                          objectType: secret
                        - |
                          objectName: grafana-admin-password
                          objectType: secret
                    tenantId: "$(AzureTenantId)"
                  secretObjects:
                  - secretName: grafana-secrets
                    type: Opaque
                    data:
                    - objectName: grafana-admin-user
                      key: admin-user
                    - objectName: grafana-admin-password
                      key: admin-password
                EOF

          - task: HelmDeploy@0
            displayName: 'Deploy Grafana via Helm'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: $(AzureSubscription)
              kubernetesCluster: $(aksClusterName)
              namespace: $(namespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: $(helmChartPath)
              releaseName: $(releaseName)
              install: true
              valueFile: '$(helmChartPath)/values.yaml'
              overrideValues: |
                azure.tenantId=$(AzureTenantId)
                azure.subscriptionId=$(AzureSubscriptionId)
                azure.resourceGroup=$(aksResourceGroup)
                azure.azureMonitorWorkspaceResourceId=$(azureMonitorWorkspaceResourceId)
                azure.servicePrincipalClientId=$(ServicePrincipalClientId)
                azure.servicePrincipalClientSecret=$(ServicePrincipalClientSecret)
                azure.keyVaultName=$(keyVaultName)

          - script: |
              kubectl get pods -n $(namespace) -l app.kubernetes.io/name=$(releaseName)
              kubectl rollout status deployment/$(releaseName) -n $(namespace) --timeout=300s
            displayName: 'Verify Grafana deployment'
