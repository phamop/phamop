# Azure Resource Manager Connection Implementation Details

This section provides comprehensive details on implementing the `connectionType: 'Azure Resource Manager'` in your Azure DevOps pipelines for Grafana deployment.

## 1. Service Connection Setup in Azure DevOps

### Prerequisites:
- Owner or Contributor access to the Azure subscription
- Azure DevOps Project Administrator permissions

### Step-by-Step Creation:

1. **Navigate to Service Connections**:
   - In Azure DevOps, go to your project
   - Click on "Project Settings" (gear icon)
   - Select "Service connections" under "Pipelines"

2. **Create New Service Connection**:
   - Click "New service connection"
   - Select "Azure Resource Manager"
   - Choose "Service principal (automatic)" (recommended) or "Service principal (manual)"

3. **Automatic Service Principal Configuration**:
   ```
   Subscription: Select your target Azure subscription
   Resource Group: (Optional) Specify if you want to limit to a specific RG
   Service connection name: Give a meaningful name (e.g., "Azure-Prod-Connection")
   Grant access permission to all pipelines: (Recommended) Check this box
   ```

4. **Manual Service Principal Configuration**:
   - Requires pre-created Azure AD App Registration
   - Provide:
     - Subscription ID
     - Subscription Name
     - Service Principal Client ID
     - Service Principal Key (secret)
     - Tenant ID

5. **Security Considerations**:
   - For production, use "Service principal (manual)" with limited permissions
   - Assign only required RBAC roles to the service principal

## 2. Required Azure RBAC Permissions

The service principal needs these minimum permissions:

```bash
# Assign Contributor role at subscription level (for Helm deployments)
az role assignment create \
  --assignee <service-principal-id> \
  --role "Contributor" \
  --scope "/subscriptions/<subscription-id>"

# Additional permissions for AKS
az role assignment create \
  --assignee <service-principal-id> \
  --role "Azure Kubernetes Service Cluster User Role" \
  --scope "/subscriptions/<subscription-id>/resourcegroups/<resource-group>/providers/Microsoft.ContainerService/managedClusters/<aks-name>"

# Key Vault permissions (if accessing secrets)
az keyvault set-policy \
  --name <key-vault-name> \
  --spn <service-principal-id> \
  --secret-permissions get list
```

## 3. Pipeline Task Configuration Details

### HelmDeploy Task with Azure Resource Manager:

```yaml
- task: HelmDeploy@0
  displayName: 'Deploy Grafana to AKS'
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscription: 'Azure-Prod-Connection' # Must match service connection name
    azureResourceGroup: 'prod-rg' # Resource group where AKS exists
    kubernetesCluster: 'prod-aks' # AKS cluster name
    namespace: 'monitoring'
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: '$(System.DefaultWorkingDirectory)/charts/grafana'
    releaseName: 'grafana'
    overrideValues: |
      image.tag=9.5.3
      service.type=LoadBalancer
    valueFile: '$(System.DefaultWorkingDirectory)/charts/grafana/values.yaml'
    waitForExecution: true
    arguments: '--atomic --timeout 5m0s'
```

### Key Configuration Parameters:

| Parameter | Required | Description |
|-----------|----------|-------------|
| `connectionType` | Yes | Must be 'Azure Resource Manager' |
| `azureSubscription` | Yes | Name of the Azure DevOps service connection |
| `azureResourceGroup` | Yes | Resource group containing the AKS cluster |
| `kubernetesCluster` | Yes | Name of the AKS cluster |
| `namespace` | No | Target Kubernetes namespace (default: 'default') |
| `command` | Yes | Helm command (install, upgrade, delete, etc.) |
| `chartType` | Yes | 'FilePath' or 'Name' (for repo charts) |
| `releaseName` | Yes | Name for the Helm release |

## 4. Authentication Flow

1. **Pipeline Execution**:
   - Azure DevOps uses the service principal credentials
   - Authenticates with Azure Resource Manager
   - Gets AKS cluster credentials automatically

2. **Behind the Scenes**:
   ```mermaid
   sequenceDiagram
     Azure DevOps->>Azure AD: Authenticate with Service Principal
     Azure AD->>Azure DevOps: OAuth Token
     Azure DevOps->>Azure Resource Manager: Get AKS Credentials
     Azure Resource Manager->>Azure DevOps: kubeconfig
     Azure DevOps->>AKS Cluster: Deploy Helm Chart
   ```

## 5. Troubleshooting Common Issues

### Error: "Could not find any Kubernetes cluster"
- Verify the service principal has "Azure Kubernetes Service Cluster User Role"
- Check the AKS cluster name is correct
- Ensure the resource group contains the AKS cluster

### Error: "Forbidden" or "Unauthorized"
- Verify RBAC assignments for the service principal
- Check if the service principal is expired
- Validate Key Vault access policies if retrieving secrets

### Debugging Tips:
```yaml
- task: AzureCLI@2
  displayName: 'Verify Access'
  inputs:
    azureSubscription: 'Azure-Prod-Connection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Verify AKS access
      az aks list -g $(azureResourceGroup) -o table
      
      # Verify Key Vault access
      az keyvault secret list --vault-name $(keyVaultName) --query [].name
```

## 6. Advanced Security Configuration

### 1. Scoped Service Principal:
```bash
# Limit to specific resource group only
az role assignment create \
  --assignee <service-principal-id> \
  --role "Contributor" \
  --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group>"
```

### 2. Temporary Credentials:
```yaml
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Azure-Prod-Connection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Get temporary cluster credentials
      az aks get-credentials \
        -g $(azureResourceGroup) \
        -n $(kubernetesCluster) \
        --admin \
        --file /tmp/kubeconfig
      
      # Use with Helm
      helm upgrade --install grafana ./charts/grafana \
        --namespace monitoring \
        --kubeconfig /tmp/kubeconfig
```

### 3. Audit Logging:
```bash
# Check service principal activity
az monitor activity-log list \
  --caller <service-principal-id> \
  --offset 90d \
  --query "[].{Operation:operationName.localizedValue, Status:status.value}"
```

## 7. Best Practices

1. **Naming Conventions**:
   - Use consistent naming for service connections
   - Include environment in names (e.g., "Azure-Prod-Connection")

2. **Secret Management**:
   - Never store credentials in pipeline variables
   - Always use Azure Key Vault integration

3. **Permission Management**:
   - Follow principle of least privilege
   - Regularly review and rotate service principal credentials

4. **Pipeline Design**:
   - Separate deployment stages (dev, staging, prod)
   - Use approval gates for production deployments

This implementation provides secure, auditable Helm deployments to AKS while leveraging Azure Resource Manager authentication through Azure DevOps service connections.
