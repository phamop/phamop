# Optimized OpenTelemetry Collector Configuration for DaemonSet
mode: "daemonset"

presets:
  logsCollection:
    enabled: true
    includeCollectorLogs: false
  hostMetrics:
    enabled: true
  kubeletMetrics:
    enabled: true

config:
  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
    
    # Enhanced Kubernetes service discovery
    prometheus:
      config:
        scrape_configs:
          - job_name: "kubernetes-pods"
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                action: replace
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: pod
    
    kubeletstats:
      auth_type: "serviceAccount"
      endpoint: "https://${KUBERNETES_SERVICE_HOST}:10250"
      insecure_skip_verify: true
      collection_interval: 10s

  processors:
    memory_limiter:
      check_interval: 5s
      limit_percentage: 80
      spike_limit_percentage: 25
    batch:
      send_batch_size: 10000
      timeout: 10s
    resourcedetection:
      detectors: [env, azure]
      timeout: 5s

  exporters:
    debug:
      verbosity: detailed
    
    azuremonitor:
      connection_string: "InstrumentationKey=a04b4a5d-40f2-4508-885a-6ba32f28d17b;IngestionEndpoint=https://eastus-8.in.applicationinsights.azure.com/"
    
    otlphttp/loki:
      endpoint: "http://loki:3100/otlp"
      tls:
        insecure: true
    
    prometheus:
      endpoint: "0.0.0.0:8889"

  extensions:
    health_check:
      endpoint: 0.0.0.0:13133
    k8s_observer:
      auth_type: serviceAccount
      node: "${K8S_NODE_NAME}"

  service:
    extensions: [health_check, k8s_observer]
    pipelines:
      metrics:
        receivers: [prometheus, kubeletstats]
        processors: [memory_limiter, batch, resourcedetection]
        exporters: [debug, azuremonitor, prometheus]
      logs:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [debug, azuremonitor, otlphttp/loki]
      traces:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [debug, azuremonitor]

# Resource configuration
resources:
  requests:
    cpu: 500m
    memory: 800Mi
  limits:
    cpu: 2000m
    memory: 2000Mi

# Security context
securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

# Probes configuration
livenessProbe:
  httpGet:
    path: /
    port: 13133
  initialDelaySeconds: 15
  periodSeconds: 20
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /
    port: 13133
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

image:
  repository: "otel/opentelemetry-collector-contrib"
  pullPolicy: IfNotPresent
  tag: "0.123.0"

serviceAccount:
  create: true
  annotations:
    azure.workload.identity/client-id: ""

useGOMEMLIMIT: true
