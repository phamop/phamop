Monitoring AKS with Azure Monitor and Grafana via Azure DevOps

I'll provide a detailed implementation for monitoring an existing AKS cluster using Azure Monitor metrics and Grafana, deployed through Azure DevOps CI/CD pipelines with Helm, while securing credentials in Azure Key Vault.

Architecture Overview

The solution will consist of:

Azure Monitor for collecting AKS metrics

Grafana for visualization

Azure DevOps pipelines for CI/CD

Helm charts for deployment

Azure Key Vault for secure credential storage

Implementation Steps

1. Enable Azure Monitor for AKS

First, enable Azure Monitor for your existing AKS cluster:

# Enable monitoring add-on for your AKS cluster
az aks enable-addons -a monitoring -n your-aks-cluster -g your-resource-group


This enables Container Insights, which collects metrics and logs from your AKS cluster.

2. Prepare Azure Key Vault

Create a Key Vault to store Grafana credentials:

# Create Key Vault
az keyvault create --name your-keyvault-name --resource-group your-resource-group --location your-location

# Add Grafana admin password
az keyvault secret set --vault-name your-keyvault-name --name grafana-admin-password --value "YourSecurePassword"

# Add service principal credentials for Grafana to access Azure Monitor
az keyvault secret set --vault-name your-keyvault-name --name grafana-sp-client-id --value "service-principal-client-id"
az keyvault secret set --vault-name your-keyvault-name --name grafana-sp-client-secret --value "service-principal-client-secret"

# Grant Azure DevOps service connection access to Key Vault
az keyvault set-policy --name your-keyvault-name --spn "azure-devops-service-principal-id" --secret-permissions get list


3. Create Helm Chart for Grafana

Create a Helm chart structure for Grafana with Azure Monitor data source:

grafana-chart/
├── Chart.yaml
├── templates/
│   ├── deployment.yaml
│   ├── service.yaml
│   ├── ingress.yaml
│   ├── configmap.yaml
│   ├── secret.yaml
│   └── azure-identity.yaml
└── values.yaml


Here's the content for key files:

Chart.yaml:

apiVersion: v2
name: grafana-monitoring
description: Grafana monitoring for AKS with Azure Monitor
version: 0.1.0
appVersion: "9.5.1"


values.yaml:

grafana:
  repository: grafana/grafana
  tag: 9.5.1
  replicas: 1
  service:
    type: LoadBalancer
    port: 80
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt
    hosts:
      - host: grafana.your-domain.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.your-domain.com
  persistence:
    enabled: true
    storageClassName: managed-premium
    size: 10Gi
  adminUser: admin
  # adminPassword will be replaced during deployment
  datasources:
    azuremonitor:
      name: Azure Monitor
      type: grafana-azure-monitor-datasource
      isDefault: true


templates/deployment.yaml:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: {{ .Values.grafana.replicas }}
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: {{ .Values.grafana.repository }}:{{ .Values.grafana.tag }}
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.grafana.adminUser }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-secret
                  key: admin-password
            - name: GF_SERVER_ROOT_URL
              value: https://{{ (index .Values.grafana.ingress.hosts 0).host }}
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-datasources
          configMap:
            name: grafana-datasources


templates/configmap.yaml:

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
data:
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: {{ .Values.grafana.datasources.azuremonitor.name }}
      type: {{ .Values.grafana.datasources.azuremonitor.type }}
      isDefault: {{ .Values.grafana.datasources.azuremonitor.isDefault }}
      jsonData:
        cloudName: azuremonitor
        tenantId: ${AZURE_TENANT_ID}
        clientId: ${AZURE_CLIENT_ID}
        subscriptionId: ${AZURE_SUBSCRIPTION_ID}
      secureJsonData:
        clientSecret: ${AZURE_CLIENT_SECRET}


templates/secret.yaml:

apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-secret
type: Opaque
data:
  admin-password: {{ .Values.grafana.adminPassword | b64enc }}


4. Azure DevOps CI/CD Pipeline

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - grafana-chart/**

variables:
  aksResourceGroup: 'your-resource-group'
  aksClusterName: 'your-aks-cluster'
  keyVaultName: 'your-keyvault-name'
  grafanaPasswordSecret: 'grafana-admin-password'
  grafanaClientIdSecret: 'grafana-sp-client-id'
  grafanaClientSecretSecret: 'grafana-sp-client-secret'
  helmChartPath: 'grafana-chart'
  helmReleaseName: 'grafana-monitoring'
  kubernetesNamespace: 'monitoring'

stages:
- stage: Build
  jobs:
  - job: PackageHelmChart
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'
    
    - task: Bash@3
      displayName: 'Lint Helm Chart'
      inputs:
        targetType: 'inline'
        script: |
          helm lint $(helmChartPath)
    
    - task: HelmDeploy@0
      displayName: 'Package Helm Chart'
      inputs:
        command: 'package'
        chartPath: '$(helmChartPath)'
        destination: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'helm-charts'
        publishLocation: 'Container'

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy to AKS'
    environment: 'Production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'helm-charts'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - task: AzureKeyVault@1
            inputs:
              azureSubscription: 'YourAzureServiceConnection'
              KeyVaultName: '$(keyVaultName)'
              SecretsFilter: '$(grafanaPasswordSecret),$(grafanaClientIdSecret),$(grafanaClientSecretSecret)'
          
          - task: AzureCLI@2
            displayName: 'Get AKS Credentials'
            inputs:
              azureSubscription: 'YourAzureServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials -g $(aksResourceGroup) -n $(aksClusterName) --overwrite-existing
          
          - task: Bash@3
            displayName: 'Create Namespace if not exists'
            inputs:
              targetType: 'inline'
              script: |
                kubectl get namespace $(kubernetesNamespace) || kubectl create namespace $(kubernetesNamespace)
          
          - task: HelmDeploy@0
            displayName: 'Deploy Grafana using Helm'
            inputs:
              connectionType: 'None'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(System.ArtifactsDirectory)/helm-charts/grafana-monitoring-0.1.0.tgz'
              releaseName: '$(helmReleaseName)'
              namespace: '$(kubernetesNamespace)'
              overrideValues: 'grafana.adminPassword=$(grafanaPasswordSecret),grafana.datasources.azuremonitor.jsonData.clientId=$(grafanaClientIdSecret),grafana.datasources.azuremonitor.secureJsonData.clientSecret=$(grafanaClientSecretSecret)'
              waitForExecution: true
          
          - task: Bash@3
            displayName: 'Check Deployment Status'
            inputs:
              targetType: 'inline'
              script: |
                kubectl get all -n $(kubernetesNamespace) -l app=grafana
                kubectl get ingress -n $(kubernetesNamespace)



5. Set Up Azure Service Principal for Grafana

Create a service principal for Grafana to access Azure Monitor:

# Create service principal
az ad sp create-for-rbac --name "GrafanaAzureMonitor" --role "Monitoring Reader" --scopes "/subscriptions/your-subscription-id"

# Note the appId (client_id), password (client_secret), and tenant


Store these credentials in Azure Key Vault as shown in step 2.

6. Configure Grafana Dashboards

After deployment, import useful AKS dashboards into Grafana:

Kubernetes Cluster Overview (10956)

Node Exporter Full (1860)

Kubernetes Capacity Planning (5228)

AKS Azure Monitor (10956)

You can either add these to your Helm chart as ConfigMaps, or manually import them after deployment.

7. Implement Advanced Monitoring Setup

For comprehensive monitoring, implement the following:

Set up metrics retention rules in Azure Monitor:

az monitor data-collection rule create --name "aks-metrics-retention" \
  --resource-group your-resource-group \
  --location your-location \
  --kind "Linux" \
  --data-sources @metrics-sources.json \
  --destinations @metrics-destinations.json


Create alert rules for critical metrics:

# Example: Create CPU usage alert
az monitor metrics alert create --name "aks-high-cpu" \
  --resource-group your-resource-group \
  --scopes "/subscriptions/your-subscription-id/resourceGroups/your-resource-group/providers/Microsoft.ContainerService/managedClusters/your-aks-cluster" \
  --condition "avg Percentage CPU > 80" \
  --window-size 5m \
  --evaluation-frequency 1m \
  --action-group "/subscriptions/your-subscription-id/resourceGroups/your-resource-group/providers/Microsoft.Insights/actionGroups/your-action-group"


8. Secure Access to Grafana

Configure Azure AD Authentication for Grafana:

Edit the Helm values.yaml to include:

grafana:
  auth:
    azuread:
      enabled: true
      clientId: "azure-ad-application-client-id"
      clientSecret: "azure-ad-application-client-secret"
      tenantId: "your-azure-tenant-id"
      allowSignUp: true


Set up network security:

grafana:
  networkPolicy:
    enabled: true
    ingress:
      - from:
          - podSelector:
              matchLabels:
                app: nginx-ingress


Testing the Setup

Verify Azure Monitor data collection:

Check Azure portal > AKS cluster > Insights

Verify Grafana deployment:

Access the Grafana UI using the configured ingress

Check data source connection status

Verify dashboard functionality

Test alerting:

Simulate high resource usage and verify alerts are triggered

Would you like me to provide more details on any particular aspect of this implementation?
