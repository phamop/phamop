@startuml observability-stack-enhanced
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' ==== THEME & STYLING ====
UpdateElementStyle(Person, $bgColor="#4A90E2", $fontColor="white", $borderColor="#3A70B2")
UpdateElementStyle(System, $bgColor="#1565C0", $fontColor="white")
UpdateElementStyle(Container, $bgColor="#2196F3", $fontColor="white")
UpdateElementStyle(System_Ext, $bgColor="#0078D4", $fontColor="white")
UpdateElementStyle(Deployment, $bgColor="#64B5F6", $fontColor="white", $borderColor="#1976D2")

skinparam backgroundColor #F8F9FA
skinparam defaultFontColor #333333
skinparam noteBackgroundColor #FFFFFF
skinparam noteBorderColor #999999
skinparam arrowColor #666666
skinparam arrowFontColor #333333
skinparam arrowFontSize 11

LAYOUT_WITH_LEGEND()

title <color:#0078D4>Observability OSS Stack on Azure</color>\n<size:12>C4 Container Diagram with NSG Rules</size>

' ==== Persons ====
Person(developer, "Developer", "Application Developer")
Person(sre, "SRE/DevOps", "Site Reliability Engineer")

' ==== Azure Network ====
System_Boundary(azure_network, "Azure Virtual Network") {
    
    ' ---- AKS Cluster ----
    System_Boundary(aks_cluster, "Azure Kubernetes Service (AKS)") {
        
        Container_Boundary(otel_namespace, "OpenTelemetry Namespace") {
            Container(otel_operator, "OTEL Operator", "Kubernetes Operator", "Manages OTEL Collector CRDs")
            Container(otel_collector, "OTEL Collector", "Deployment", "Receives, processes, and exports telemetry data")
        }
        
        Container_Boundary(monitoring_namespace, "Monitoring Namespace") {
            Container(prometheus, "Prometheus", "Time Series DB", "Stores and queries metrics data")
            Container(loki, "Loki", "Log Aggregation", "Stores and queries log data")
            Container(jaeger, "Jaeger", "Distributed Tracing", "Stores and queries trace data")
        }
        
        Container_Boundary(app_namespace, "Application Namespace") {
            Container(app_pods, "Application Pods", "Microservices", "Business applications with OTEL instrumentation")
        }
    }
    
    ' ---- VM Subnet ----
    System_Boundary(vm_subnet, "VM Subnet") {
        Container(grafana_vm, "Grafana VM", "Virtual Machine", "Visualization and dashboarding platform")
        Container(sso_provider, "SSO Provider", "Azure AD/OIDC", "Authentication service for Grafana")
        
        ' NSG for Grafana VM
        Container(nsg_grafana, "NSG Rules", "Network Security Group", "Controls inbound/outbound traffic to Grafana VM")
    }
    
    ' NSG for AKS to Grafana communication
    Container(nsg_aks_to_grafana, "NSG: AKS to Grafana", "Network Security Group", "Allows traffic from AKS to Grafana backends")
}

' ==== External System ====
System_Ext(azure_ad, "Azure Active Directory", "Identity Provider for SSO")

' ==== Relationships ====
' Users access Grafana directly
Rel(developer, grafana_vm, "Access dashboards (HTTPS)", "Browser")
Rel(sre, grafana_vm, "Access dashboards (HTTPS)", "Browser")

' App telemetry
Rel(app_pods, otel_collector, "Sends telemetry (OTLP/gRPC, HTTP)")

' Collector exports
Rel(otel_collector, prometheus, "Exports metrics", "Prometheus Remote Write")
Rel(otel_collector, loki, "Exports logs", "Loki HTTP API")
Rel(otel_collector, jaeger, "Exports traces", "Jaeger gRPC")

' Operator manages Collector
Rel(otel_operator, otel_collector, "Manages configuration", "Kubernetes API")

' Grafana queries backends through NSG
Rel(grafana_vm, nsg_aks_to_grafana, "Outbound queries", "HTTP/HTTPS")
Rel(nsg_aks_to_grafana, prometheus, "Allows metrics queries", "PromQL/HTTP (3100)")
Rel(nsg_aks_to_grafana, loki, "Allows log queries", "LogQL/HTTP (3100)")
Rel(nsg_aks_to_grafana, jaeger, "Allows trace queries", "Jaeger API/HTTP (16686)")

' Grafana authentication
Rel(grafana_vm, sso_provider, "SSO Authentication", "OIDC")
Rel(sso_provider, azure_ad, "Validates tokens", "OIDC/SAML")

' NSG for Grafana VM
Rel(nsg_grafana, grafana_vm, "Filters traffic", "Network Rules")

' Optional: SRE may still query Prometheus directly through NSG
Rel(sre, nsg_aks_to_grafana, "Direct queries", "CLI/API")
Rel(nsg_aks_to_grafana, prometheus, "Allows direct access", "PromQL/API (9090)")

SHOW_LEGEND()

' ==== Notes ====
note right of nsg_aks_to_grafana
<b>NSG Rules: AKS to Grafana</b>
- Allow HTTPS from AKS subnet to Grafana VM
- Allow HTTP from AKS subnet to Prometheus (port 9090)
- Allow HTTP from AKS subnet to Loki (port 3100)
- Allow HTTP from AKS subnet to Jaeger (port 16686)
- Deny all other inbound traffic
end note

note right of otel_collector
<b>OTEL Collector Configuration</b>
- Receivers: OTLP, Jaeger, Zipkin
- Processors: Batch, Memory Limiter
- Exporters: Prometheus, Loki, Jaeger
- Resource detection: K8s attributes
end note

note right of grafana_vm
<b>Grafana Configuration</b>
- Data Sources: Prometheus, Loki, Jaeger
- Auth: SSO via Azure AD/OIDC
- Dashboards: provisioned via config
- Direct access enabled (no ingress)
end note

note left of aks_cluster
<b>AKS Configuration</b>
- Network Policy enabled
- Azure CNI networking
- Managed Identity
- Private cluster option
- Auto-scaling enabled
end note

note right of prometheus
<b>Prometheus Config</b>
- Remote write enabled
- Retention: 15d local
- Scraping: via OTEL & serviceMonitor
end note

@enduml
