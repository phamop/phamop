# Install Azure Application Gateway Ingress Controller (AGIC)
# First, enable the AGIC add-on for your AKS cluster
# az aks enable-addons -n myCluster -g myResourceGroup -a ingress-appgw --appgw-name myApplicationGateway --appgw-subnet-cidr "10.2.0.0/16"

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: grafana

---
# Grafana Deployment (example - you may already have this)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"  # Change this or use a secret
        - name: GF_SERVER_ROOT_URL
          value: "https://grafana.yourdomain.com"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}

---
# Ingress Resource for Azure Application Gateway
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/connection-draining: "true"
    appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
    appgw.ingress.kubernetes.io/cookie-based-affinity: "true"
    appgw.ingress.kubernetes.io/request-timeout: "30"
    # Optional: Enable WAF if you have WAF-enabled Application Gateway
    # appgw.ingress.kubernetes.io/waf-policy-for-path: "/subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/xxx"
spec:
  tls:
  - hosts:
    - grafana.yourdomain.com
    secretName: grafana-tls-secret
  rules:
  - host: grafana.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 80

---
# Alternative: Using NGINX Ingress Controller
# If you prefer NGINX over Application Gateway, uncomment below:

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: grafana-nginx-ingress
#   namespace: monitoring
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     nginx.ingress.kubernetes.io/ssl-redirect: "true"
#     nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#     nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#     cert-manager.io/cluster-issuer: "letsencrypt-prod"  # If using cert-manager
# spec:
#   tls:
#   - hosts:
#     - grafana.yourdomain.com
#     secretName: grafana-nginx-tls
#   rules:
#   - host: grafana.yourdomain.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: grafana-service
#             port:
#               number: 80

---
# TLS Secret (if managing certificates manually)
apiVersion: v1
kind: Secret
metadata:
  name: grafana-tls-secret
  namespace: monitoring
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTi... # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # Base64 encoded private key

---
# Namespace creation (if not exists)
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring

---
# Optional: NetworkPolicy for additional security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-network-policy
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx  # Allow traffic from ingress controller
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - {} # Allow all egress traffic (customize as needed)
