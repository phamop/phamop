The pipeline is not valid. Job DeployESOchart: Step KubernetesManifest1 input kubernetesServiceEndpoint expects a service connection of type kubernetes but the provided service connection ARM-ServiceConnection-DEV is of type azurerm. 

# Azure Monitor Insights for Grafana on AKS 1.30.3

Here's a comprehensive walkthrough for setting up Azure Monitor Insights metrics for Grafana on your existing AKS 1.30.3 cluster with Azure Key Vault integration:

## Prerequisites

- Existing AKS 1.30.3 cluster
- Azure Key Vault for secrets management
- Azure DevOps environment for pipeline management
- Helm for deployment management

## Step 1: Configure Azure Monitor for your AKS cluster

First, ensure Azure Monitor is properly enabled for your AKS cluster:

```bash
# Enable Azure Monitor for your AKS cluster
az aks enable-addons -a monitoring -n your-aks-cluster -g your-resource-group
```

## Step 2: Set up Azure Monitor data source in Grafana

### Create an Azure AD Service Principal

```bash
# Create service principal for Grafana
az ad sp create-for-rbac --name GrafanaMonitoringApp --role "Monitoring Reader" --scope /subscriptions/your-subscription-id
```

Save the output containing `appId`, `password`, `tenant`, and `subscription` values. These will be needed for Grafana to connect to Azure Monitor.

### Store credentials in Azure Key Vault

```bash
# Store credentials in Key Vault
az keyvault secret set --vault-name your-keyvault-name --name grafana-azure-monitor-client-id --value "your-app-id"
az keyvault secret set --vault-name your-keyvault-name --name grafana-azure-monitor-client-secret --value "your-password"
az keyvault secret set --vault-name your-keyvault-name --name grafana-azure-monitor-tenant-id --value "your-tenant-id"
```

## Step 3: Create Helm chart for Grafana deployment

Create a custom Helm chart or modify the official Grafana chart to include Azure Monitor data source configuration:

### values.yaml configuration

```yaml
grafana:
  image:
    repository: grafana/grafana
    tag: latest

  podAnnotations:
    azure.workload.identity/use: "true"

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Azure Monitor
        type: grafana-azure-monitor-datasource
        isDefault: false
        jsonData:
          cloudName: azuremonitor
          subscriptionId: ${AZURE_SUBSCRIPTION_ID}
          tenantId: ${AZURE_TENANT_ID}
          clientId: ${AZURE_CLIENT_ID}
        secureJsonData:
          clientSecret: ${AZURE_CLIENT_SECRET}

  # Configure Azure Key Vault integration
  envFromSecret: grafana-azure-credentials
```

## Step 4: Create Kubernetes Secret for Grafana credentials

Create a template for the Kubernetes secret that will hold your Azure Monitor credentials:

```yaml
# grafana-credentials-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: grafana-azure-credentials
type: Opaque
stringData:
  AZURE_SUBSCRIPTION_ID: "your-subscription-id"
  AZURE_TENANT_ID: "your-tenant-id"
  AZURE_CLIENT_ID: "your-client-id"
  AZURE_CLIENT_SECRET: "your-client-secret"
```

## Step 5: Configure Azure Key Vault integration with AKS

### Install the CSI Secret Store driver

```bash
# Install the Secrets Store CSI Driver
helm repo add csi-secrets-store-provider-azure https://azure.github.io/secrets-store-csi-driver-provider-azure/charts
helm install csi-secrets-store-provider-azure/csi-secrets-store-provider-azure --generate-name
```

### Create a SecretProviderClass CRD

```yaml
# azure-keyvault-secretprovider.yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-keyvault-grafana
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "false"
    userAssignedIdentityID: ""
    keyvaultName: "your-keyvault-name"
    tenantId: "your-tenant-id"
    objects: |
      array:
        - |
          objectName: grafana-azure-monitor-client-id
          objectType: secret
          objectVersion: ""
        - |
          objectName: grafana-azure-monitor-client-secret
          objectType: secret
          objectVersion: ""
        - |
          objectName: grafana-azure-monitor-tenant-id
          objectType: secret
          objectVersion: ""
  secretObjects:
    - secretName: grafana-azure-credentials
      type: Opaque
      data:
        - objectName: grafana-azure-monitor-client-id
          key: AZURE_CLIENT_ID
        - objectName: grafana-azure-monitor-client-secret
          key: AZURE_CLIENT_SECRET
        - objectName: grafana-azure-monitor-tenant-id
          key: AZURE_TENANT_ID
```

## Step 6: Update Grafana deployment to use Key Vault secrets

Modify your Grafana deployment to mount secrets from Azure Key Vault:

```yaml
# In your Grafana Helm values or deployment YAML
volumes:
  - name: secrets-store-inline
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: azure-keyvault-grafana
volumeMounts:
  - name: secrets-store-inline
    mountPath: "/mnt/secrets-store"
    readOnly: true
```

## Step 7: Create Azure DevOps pipeline for deployment

Create an `azure-pipelines.yml` file:

```yaml
# azure-pipelines.yml
trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  helmVersion: 3.7.0
  acrName: 'yourACRName'
  resourceGroupName: 'your-resource-group'
  aksClusterName: 'your-aks-cluster'

stages:
- stage: Deploy
  jobs:
  - job: DeployGrafana
    steps:
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: $(helmVersion)
      displayName: 'Install Helm'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Your-Azure-Service-Connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials -g $(resourceGroupName) -n $(aksClusterName) --overwrite-existing
      displayName: 'Get AKS credentials'

    # Apply the SecretProviderClass CRD
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        manifests: 'manifests/azure-keyvault-secretprovider.yaml'
      displayName: 'Apply Secret Provider Class'

    # Deploy Grafana with Helm
    - task: HelmDeploy@0
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: 'Your-Azure-Service-Connection'
        azureResourceGroup: $(resourceGroupName)
        kubernetesCluster: $(aksClusterName)
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: './charts/grafana'
        releaseName: 'grafana'
        installTimeout: '5m'
        overrideValues: 'grafana.image.tag=latest'
        valueFile: './charts/grafana/values.yaml'
        arguments: '--create-namespace --namespace monitoring'
      displayName: 'Deploy Grafana with Helm'
```

## Step 8: Configure Grafana dashboards for Azure Monitor Insights

After Grafana is deployed, create or import dashboards for common AKS metrics:

### Common AKS metrics to monitor:

1. **Node metrics**: CPU, memory usage, disk space
2. **Pod metrics**: CPU, memory usage, restart count
3. **Container metrics**: CPU, memory usage
4. **Network metrics**: Traffic in/out, connection status
5. **API server metrics**: Request latency, request count
6. **etcd metrics**: Leader changes, commit latency
7. **Storage metrics**: PV/PVC usage
8. **Log analytics**: Error rates, warning patterns

### Sample Grafana dashboard JSON for AKS

You can use the Azure-provided dashboards or create custom ones. Azure provides several built-in dashboards for AKS through the Azure portal that you can export and modify for Grafana.

## Step 9: Set up alerts in Grafana

Configure alerting for critical metrics:

1. Navigate to Alerting in Grafana UI
2. Create new alert rules based on key metrics
3. Configure notification channels (email, Slack, webhook, etc.)

## Step 10: Verify metrics collection

Ensure metrics are being collected properly:

```bash
# Port-forward Grafana service
kubectl port-forward svc/grafana 3000:80 -n monitoring
```

Navigate to http://localhost:3000 in your browser, log in, and verify Azure Monitor data source is working by checking the Explore section.

If you need to further customize your monitoring setup or troubleshoot any issues, let me know!
