#!/bin/bash

# Variables
RESOURCE_GROUP="your-resource-group"
CLUSTER_NAME="your-aks-cluster"
OUTPUT_FILE="aks_inventory_$(date +%Y%m%d_%H%M%S).txt"

# Get AKS credentials
echo "Getting AKS credentials for cluster $CLUSTER_NAME in resource group $RESOURCE_GROUP..."
az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin

# Verify connection to cluster
kubectl cluster-info
if [ $? -ne 0 ]; then
    echo "Failed to connect to AKS cluster. Please check your credentials and try again."
    exit 1
fi

# Create output file
echo "AKS Inventory Report" > $OUTPUT_FILE
echo "Generated: $(date)" >> $OUTPUT_FILE
echo "Resource Group: $RESOURCE_GROUP" >> $OUTPUT_FILE
echo "Cluster Name: $CLUSTER_NAME" >> $OUTPUT_FILE
echo "=============================================" >> $OUTPUT_FILE

# Get nodes information
echo "Collecting node information..."
echo -e "\nNODES INFORMATION:" >> $OUTPUT_FILE
kubectl get nodes -o wide >> $OUTPUT_FILE

# Get namespaces
NAMESPACES=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')

# Get pods in each namespace
echo -e "\nPODS IN EACH NAMESPACE:" >> $OUTPUT_FILE
for ns in $NAMESPACES; do
    echo -e "\nNamespace: $ns" >> $OUTPUT_FILE
    kubectl get pods -n $ns -o wide >> $OUTPUT_FILE
    
    # Get detailed pod information
    echo -e "\nDetailed Pod Information:" >> $OUTPUT_FILE
    kubectl describe pods -n $ns >> $OUTPUT_FILE
done

# Get all ingresses with network details
echo -e "\nINGRESSES IN ALL NAMESPACES:" >> $OUTPUT_FILE
kubectl get ingress --all-namespaces -o wide >> $OUTPUT_FILE

# Get detailed ingress information
echo -e "\nDETAILED INGRESS INFORMATION:" >> $OUTPUT_FILE
for ns in $NAMESPACES; do
    INGRESSES=$(kubectl get ingress -n $ns -o jsonpath='{.items[*].metadata.name}')
    if [ -n "$INGRESSES" ]; then
        echo -e "\nNamespace: $ns" >> $OUTPUT_FILE
        for ingress in $INGRESSES; do
            kubectl describe ingress $ingress -n $ns >> $OUTPUT_FILE
            echo -e "\n" >> $OUTPUT_FILE
        done
    fi
done

# Get services information
echo -e "\nSERVICES INFORMATION:" >> $OUTPUT_FILE
kubectl get services --all-namespaces -o wide >> $OUTPUT_FILE

# Get network policies
echo -e "\nNETWORK POLICIES:" >> $OUTPUT_FILE
kubectl get networkpolicies --all-namespaces -o wide >> $OUTPUT_FILE

echo "Inventory collection complete. Report saved to $OUTPUT_FILE"







##############################





#!/bin/bash

# AKS Inventory Script
# This script lists all AKS clusters in a specified resource group or across the subscription
# Allows filtering by resource group and cluster name

# Variables (can be passed as parameters or modified here)
RESOURCE_GROUP=""  # Leave empty to search all resource groups
CLUSTER_NAME=""    # Leave empty to list all clusters

# Uncomment to use command line arguments
# while getopts "g:n:" opt; do
#   case $opt in
#     g) RESOURCE_GROUP="$OPTARG"
#     ;;
#     n) CLUSTER_NAME="$OPTARG"
#     ;;
#     \?) echo "Invalid option -$OPTARG" >&2
#     ;;
#   esac
# done

# Check if Azure CLI is installed
if ! command -v az &> /dev/null; then
    echo "Azure CLI could not be found. Please install it first."
    echo "Installation guide: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
    exit 1
fi

# Check if user is logged in to Azure
if ! az account show &> /dev/null; then
    echo "Please log in to Azure first:"
    echo "Run 'az login' and follow the instructions."
    exit 1
fi

# Get current subscription
SUBSCRIPTION=$(az account show --query "name" -o tsv)
echo "Checking AKS clusters in subscription: $SUBSCRIPTION"
echo "Resource group filter: ${RESOURCE_GROUP:-all}"
echo "Cluster name filter: ${CLUSTER_NAME:-all}"
echo ""

# Function to get AKS cluster details
get_aks_details() {
    local rg=$1
    local name=$2
    
    echo "Resource Group: $rg"
    echo "Cluster Name: $name"
    
    # Get basic cluster info
    cluster_info=$(az aks show --resource-group $rg --name $name --query "{ \
        location:location, \
        kubernetesVersion:kubernetesVersion, \
        provisioningState:provisioningState, \
        fqdn:fqdn, \
        nodeCount:agentPoolProfiles[0].count, \
        vmSize:agentPoolProfiles[0].vmSize, \
        osType:agentPoolProfiles[0].osType, \
        maxPods:agentPoolProfiles[0].maxPods \
    }" -o json)
    
    echo "$cluster_info" | jq .
    echo ""
    
    # Get node pool info
    echo "Node Pools:"
    az aks nodepool list --resource-group $rg --cluster-name $name --query "[].{ \
        name:name, \
        count:count, \
        vmSize:vmSize, \
        osType:osType, \
        maxPods:maxPods, \
        provisioningState:provisioningState \
    }" -o table
    
    echo ""
    echo "--------------------------------------------------"
    echo ""
}

# Main logic to find and display clusters
if [[ -n "$RESOURCE_GROUP" ]]; then
    # Search in specific resource group
    if [[ -n "$CLUSTER_NAME" ]]; then
        # Specific cluster in specific resource group
        clusters=$(az aks list --resource-group $RESOURCE_GROUP --query "[?name=='$CLUSTER_NAME'].{name:name, resourceGroup:resourceGroup}" -o tsv)
    else
        # All clusters in specific resource group
        clusters=$(az aks list --resource-group $RESOURCE_GROUP --query "[].{name:name, resourceGroup:resourceGroup}" -o tsv)
    fi
else
    # Search across all resource groups
    if [[ -n "$CLUSTER_NAME" ]]; then
        # Specific cluster name across all resource groups
        clusters=$(az aks list --query "[?name=='$CLUSTER_NAME'].{name:name, resourceGroup:resourceGroup}" -o tsv)
    else
        # All clusters in subscription
        clusters=$(az aks list --query "[].{name:name, resourceGroup:resourceGroup}" -o tsv)
    fi
fi

# Check if any clusters were found
if [[ -z "$clusters" ]]; then
    echo "No AKS clusters found matching your criteria."
    exit 0
fi

# Process each cluster found
echo "Found $(echo "$clusters" | wc -l) AKS cluster(s):"
echo ""

while read -r line; do
    rg=$(echo "$line" | awk '{print $2}')
    name=$(echo "$line" | awk '{print $1}')
    get_aks_details "$rg" "$name"
done <<< "$clusters"
