--- Current file: /azp/agent/_work/4/s/kustomize/overlays/EDIT/opentelemetry/kustomization-output.yaml ---
*** DRY-RUN *** Start kubectl apply
service/otel-collector configured (dry run)
opentelemetrycollector.opentelemetry.io/otel-collector configured (dry run)
error: resource mapping not found for name: "otel-collector-monitor" namespace: "monitoring" from "/azp/agent/_work/4/s/kustomize/overlays/EDIT/opentelemetry/kustomization-output.yaml": no matches for kind "ServiceMonitor" in version "monitoring.coreos.com/v1"
ensure CRDs are installed first
*** DRY-RUN *** Done
*** Start kubectl apply
service/otel-collector unchanged
opentelemetrycollector.opentelemetry.io/otel-collector configured
error: resource mapping not found for name: "otel-collector-monitor" namespace: "monitoring" from "/azp/agent/_work/4/s/kustomize/overlays/EDIT/opentelemetry/kustomization-output.yaml": no matches for kind "ServiceMonitor" in version "monitoring.coreos.com/v1"
ensure CRDs are installed first
*** Done

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
# namespace: eddv3-hbt
  labels:
    app: opentelemetry-collector
spec:
  selector:
    app: opentelemetry-collector
  ports:
    - name: prom-metrics
      port: 8889
      targetPort: 8889
    - name: metrics
      port: 8888
      targetPort: 8888
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
    - name: otlp-http
      port: 4318
      targetPort: 4318
---

 apiVersion: monitoring.coreos.com/v1
 kind: ServiceMonitor
 metadata:
   name: otel-collector-monitor
 # namespace: eddv3-hbt
   labels:
     release: kube-prometheus-stack
 spec:
   selector:
     matchLabels:
       app: opentelemetry-collector
   endpoints:
     - port: prom-metrics
       interval: 10s
       path: /metrics
       honorLabels: true
       relabelings:
         - action: labelmap
           regex: __meta_kubernetes_pod_label_(.+)

---

apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector  
# namespace: monitoring
  labels:
    app: opentelemetry-collector
spec:
  mode: deployment
  image: otel/opentelemetry-collector-contrib:0.128.0
  serviceAccount: opentelemetry-collector
  replicas: 2
  
  ports:
    - name: otlp-grpc
      port: 4317
      protocol: TCP
    - name: otlp-http
      port: 4318
      protocol: TCP
    - name: jaeger-grpc
      port: 14250
      protocol: TCP
    - name: jaeger-thrift-c  
      port: 6831
      protocol: TCP
    - name: jaeger-thrift-h  
      port: 14268
      protocol: TCP
    - name: metrics
      port: 8888
      protocol: TCP
    - name: prom-metrics
      port: 8889
      protocol: TCP
    - name: health
      port: 13133
      protocol: TCP

  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: K8S_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: K8S_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: K8S_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP

  resources:
    requests:
      cpu: 500m
      memory: 800Mi
    limits:
      cpu: 1000m
      memory: 1600Mi

  config:
    extensions:
      health_check:
        endpoint: "0.0.0.0:13133"
      pprof:
        endpoint: "0.0.0.0:1777"
      zpages:
        endpoint: "0.0.0.0:55679"

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
          http:
            endpoint: "0.0.0.0:4318"
      jaeger:
        protocols:
          grpc:
            endpoint: "0.0.0.0:14250"
          thrift_compact:
            endpoint: "0.0.0.0:6831"
          thrift_http:
            endpoint: "0.0.0.0:14268"
      loki:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
          http:
            endpoint: "0.0.0.0:4318"
            include_metadata: true
        use_incoming_timestamp: true
      prometheus/node:
        config:
          scrape_configs:
            - job_name: 'node-exporter'
              scrape_interval: 10s
              static_configs:
                - targets: ['prometheus-prometheus-node-exporter.monitoring.svc:9100']
                  labels:
                    job: 'node-exporter'
                    cluster: 'clustername'

    processors:
      batch:
        timeout: 200ms
        send_batch_size: 1024
        send_batch_max_size: 4096
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_mib: 64
        limit_mib: 512
      groupbytrace: {}
      resource:
        attributes:
          - key: service.name
            from_attribute: service.name
            action: insert
          - key: k8s.container.name
            from_attribute: k8s.container.name
            action: insert
          - key: k8s.namespace.name
            from_attribute: k8s.namespace.name
            action: insert
          - key: k8s.pod.name
            from_attribute: k8s.pod.name
            action: insert
          - key: k8s.node.name
            from_attribute: k8s.node.name
            action: insert
          - key: host.name
            from_attribute: host.name
            action: insert
          - key: service.name
            from_attribute: service.name
            action: upsert
          - key: service.namespace
            from_attribute: service.namespace
            action: upsert
          - key: cluster.name
            value: clustername
            action: insert
          - key: exporter
            value: "node-exporter"
            action: insert
      resourcedetection:
        detectors: [env, system]
        override: false
        timeout: 2s
      transform:
        log_statements:
          - context: log
            statements:
              - set(attributes["processing.note"], "Log enriched with resource and trace context")
              - set(attributes["service.name"], resource.attributes["service.name"])
              - set(attributes["k8s.pod.name"], resource.attributes["k8s.pod.name"])
              - set(attributes["k8s.node.name"], resource.attributes["k8s.node.name"])
              - set(attributes["host.name"], resource.attributes["host.name"])
              - set(attributes["cluster.name"], resource.attributes["cluster.name"])
              - set(attributes["trace_id"], trace_id)
              - set(attributes["span_id"], span_id)
      metricstransform:
        transforms:
          - include: system.cpu.usage
            action: update
            operations:
              - action: add_label
                new_label: host.name
                new_value: host.name
              - action: add_label
                new_label: cluster.name
                new_value: clustername
          - include: system.memory.usage
            action: update
            operations:
              - action: add_label
                new_label: host.name
                new_value: host.name
              - action: add_label
                new_label: cluster.name
                new_value: clustername

    exporters:
      debug:
        verbosity: detailed
      otlphttp:
        endpoint: http://loki-write.monitoring.svc.cluster.local:3100/otlp
        tls:
          insecure: true
        headers:
          X-Scope-OrgID: tenant-1
      prometheus:
        endpoint: "0.0.0.0:8889"  
        namespace: monitoring
        const_labels:
          k8s_cluster: clustername
        send_timestamps: true
        enable_open_metrics: true
      otlp/jaeger:
        endpoint: jaeger-collector.monitoring.svc.cluster.local:4317
        tls:
          insecure: true

    service:
      telemetry:
        metrics:
          level: detailed
      extensions: [health_check, pprof, zpages]
      pipelines:
        metrics:
          receivers: [otlp, prometheus/node]
          processors: [memory_limiter, resourcedetection, resource, metricstransform, batch]
          exporters: [debug, prometheus]
        traces:
          receivers: [otlp, jaeger]
          processors: [memory_limiter, resourcedetection, resource, groupbytrace, batch]
          exporters: [debug, otlp/jaeger]
        logs:
          receivers: [otlp, loki]
          processors: [memory_limiter, resourcedetection, resource, transform, batch]
          exporters: [debug, otlphttp]


## kustomization.yaml
namespace: monitoring

resources:
- collector.yaml
- serviceMetric.yaml



---



































kubectl patch deployment otel-collector -n <namespace> -p '{"metadata":{"finalizers":[]}}' --type=merge



kubectl get all -n monitoring -o json \
  | jq '.items[] | select(.metadata.finalizers != null) | {kind: .kind, name: .metadata.name, finalizers: .metadata.finalizers}'

kubectl get all -n monitoring -o yaml | grep -B5 "finalizers:"

# Delete all OpenTelemetry Collector instances in the namespace
kubectl delete opentelemetrycollectors --all -n <namespace>

# Delete the operator deployment (if installed in the namespace)
kubectl delete deployment opentelemetry-operator-controller-manager -n <namespace>

# Then delete the namespace
kubectl delete ns <namespace>





patches:
  - target:
      group: kustomize.config.k8s.io
      version: v1beta1
      kind: Kustomization
    patch: |
      - op: remove
        path: /helmCharts/0/valuesFile
      - op: add
        path: /helmCharts/0/valuesFiles
        value:
          - ../../base/grafana/helm-values.yaml       
          - grafana.values.patch.yaml
