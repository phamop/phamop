Here's a comprehensive implementation for Helm chart configuration, Grafana creation pipeline, and Azure Monitor integration via Azure DevOps CI/CD after the Azure AD application has been created:

## 1. Helm Chart Configuration for Grafana

### Directory Structure
```
grafana-aks/
├── Chart.yaml
├── values.yaml
├── templates/
│   ├── deployment.yaml
│   ├── service.yaml
│   ├── ingress.yaml
│   ├── configmap.yaml
│   ├── secret-azure-monitor.yaml
│   ├── secret-oauth.yaml
│   └── serviceaccount.yaml
└── crds/
    ├── grafana-dashboard-crd.yaml
    └── grafana-datasource-crd.yaml
```

### values.yaml
```yaml
# Grafana Image Configuration
image:
  repository: grafana/grafana
  tag: 9.5.3
  pullPolicy: IfNotPresent

# Persistence Configuration
persistence:
  enabled: true
  storageClassName: managed-premium
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  finalizers:
    - kubernetes.io/pvc-protection

# Service Configuration
service:
  type: LoadBalancer
  port: 3000
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"

# Ingress Configuration
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - grafana.yourdomain.com
  tls:
    - secretName: grafana-tls
      hosts:
        - grafana.yourdomain.com

# Grafana Configuration
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
    level: info
  auth:
    disable_login_form: false
    disable_signout_menu: false
    oauth_auto_login: true
  auth.generic_oauth:
    enabled: true
    name: "Azure AD"
    client_id: "$__file{/etc/grafana/secrets/oauth/client_id}"
    client_secret: "$__file{/etc/grafana/secrets/oauth/client_secret}"
    scopes: "openid email profile offline_access"
    auth_url: "https://login.microsoftonline.com/$__file{/etc/grafana/secrets/oauth/tenant_id}/oauth2/authorize"
    token_url: "https://login.microsoftonline.com/$__file{/etc/grafana/secrets/oauth/tenant_id}/oauth2/token"
    api_url: ""
    allowed_domains: "yourdomain.com"
    allow_sign_up: true
    role_attribute_path: "contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
    tls_skip_verify_insecure: false

# Datasources Configuration
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: AzureMonitor
      type: grafana-azure-monitor-datasource
      access: proxy
      url: /api/datasources/proxy/1
      jsonData:
        subscriptionId: "$__file{/etc/grafana/secrets/azure/subscription_id}"
        cloudName: azuremonitor
        azureAuthType: clientsecret
        tenantId: "$__file{/etc/grafana/secrets/azure/tenant_id}"
        clientId: "$__file{/etc/grafana/secrets/azure/client_id}"
      secureJsonData:
        clientSecret: "$__file{/etc/grafana/secrets/azure/client_secret}"
      editable: true
```

### secret-azure-monitor.yaml
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: grafana-azure-monitor-secrets
type: Opaque
stringData:
  subscription_id: {{ .Values.azureMonitor.subscriptionId | b64enc | quote }}
  tenant_id: {{ .Values.azureMonitor.tenantId | b64enc | quote }}
  client_id: {{ .Values.azureMonitor.clientId | b64enc | quote }}
  client_secret: {{ .Values.azureMonitor.clientSecret | b64enc | quote }}
```

## 2. Grafana Creation Pipeline (azure-pipelines-grafana.yaml)

```yaml
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'grafana-aks/**'

variables:
  - group: 'Grafana-Config'
  - name: namespace
    value: 'monitoring'
  - name: keyVaultName
    value: 'YourKeyVault'
  - name: helmReleaseName
    value: 'grafana'

stages:
- stage: DeployGrafana
  jobs:
  - job: Deploy
    steps:
    - task: AzureKeyVault@2
      displayName: 'Get Secrets from Key Vault'
      inputs:
        azureSubscription: 'Azure-Service-Connection'
        KeyVaultName: $(keyVaultName)
        SecretsFilter: 'grafana-client-id, grafana-client-secret, grafana-tenant-id, grafana-subscription-id'
        RunAsPreJob: true

    - task: HelmDeploy@0
      displayName: 'Deploy Grafana'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: 'Azure-Service-Connection'
        azureResourceGroup: 'Your-RG'
        kubernetesCluster: 'Your-AKS'
        namespace: $(namespace)
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '$(System.DefaultWorkingDirectory)/grafana-aks'
        releaseName: $(helmReleaseName)
        overrideValues: |
          azureMonitor.clientId=$(grafana-client-id)
          azureMonitor.clientSecret=$(grafana-client-secret)
          azureMonitor.tenantId=$(grafana-tenant-id)
          azureMonitor.subscriptionId=$(grafana-subscription-id)
          ingress.hosts[0]=grafana.$(azureMonitor.domain)
        valueFile: '$(System.DefaultWorkingDirectory)/grafana-aks/values.yaml'

    - task: AzureCLI@2
      displayName: 'Verify Deployment'
      inputs:
        azureSubscription: 'Azure-Service-Connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          kubectl get pods -n $(namespace)
          kubectl get svc -n $(namespace)
          echo "Grafana will be available at: https://grafana.$(azureMonitor.domain)"
```

## 3. Azure Monitor Integration Pipeline (azure-pipelines-monitor-integration.yaml)

```yaml
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'azure-monitor-config/**'

variables:
  - group: 'Azure-Monitor-Config'
  - name: namespace
    value: 'monitoring'

stages:
- stage: ConfigureAzureMonitor
  jobs:
  - job: Configure
    steps:
    - task: KubernetesManifest@0
      displayName: 'Deploy Azure Monitor Dashboards'
      inputs:
        action: 'deploy'
        namespace: $(namespace)
        manifests: |
          $(System.DefaultWorkingDirectory)/azure-monitor-config/dashboards/*.yaml
        strategy: 'kubectl'

    - task: KubernetesManifest@0
      displayName: 'Deploy Azure Monitor Alerts'
      inputs:
        action: 'deploy'
        namespace: $(namespace)
        manifests: |
          $(System.DefaultWorkingDirectory)/azure-monitor-config/alerts/*.yaml
        strategy: 'kubectl'

    - task: AzureCLI@2
      displayName: 'Verify Integration'
      inputs:
        azureSubscription: 'Azure-Service-Connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          kubectl get grafanadashboards -n $(namespace)
          kubectl get grafanaalerts -n $(namespace)
```

## 4. Sample Dashboard CRD (grafana-dashboard-crd.yaml)

```yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: grafanadashboards.integreatly.org
spec:
  group: integreatly.org
  names:
    kind: GrafanaDashboard
    listKind: GrafanaDashboardList
    plural: grafanadashboards
    singular: grafanadashboard
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              json:
                type: string
              name:
                type: string
              folder:
                type: string
            required:
            - json
            type: object
        type: object
    served: true
    storage: true
```

## 5. Sample Dashboard Definition (azure-monitor-dashboard.yaml)

```yaml
apiVersion: integreatly.org/v1alpha1
kind: GrafanaDashboard
metadata:
  name: azure-monitor-overview
  labels:
    app: grafana
spec:
  json: |
    {
      "title": "Azure Monitor Overview",
      "tags": ["azure", "monitor"],
      "timezone": "browser",
      "panels": [
        {
          "title": "AKS Cluster Metrics",
          "type": "row",
          "collapsed": false,
          "panels": [
            {
              "title": "Node CPU Usage",
              "type": "graph",
              "datasource": "AzureMonitor",
              "targets": [
                {
                  "refId": "A",
                  "queryType": "Azure Monitor",
                  "azureMonitor": {
                    "aggregation": "Average",
                    "metricName": "cpuUsageNanoCores",
                    "metricNamespace": "Microsoft.ContainerService/managedClusters",
                    "resourceGroup": "$(azureMonitor.resourceGroup)",
                    "resourceName": "$(azureMonitor.aksClusterName)",
                    "timeGrain": "auto"
                  }
                }
              ]
            }
          ]
        }
      ]
    }
```

## Implementation Steps:

1. **Store Secrets in Key Vault**:
   ```bash
   az keyvault secret set --vault-name YourKeyVault --name grafana-client-id --value "<APP_ID>"
   az keyvault secret set --vault-name YourKeyVault --name grafana-client-secret --value "<CLIENT_SECRET>"
   az keyvault secret set --vault-name YourKeyVault --name grafana-tenant-id --value "<TENANT_ID>"
   az keyvault secret set --vault-name YourKeyVault --name grafana-subscription-id --value "<SUBSCRIPTION_ID>"
   ```

2. **Create Variable Groups in Azure DevOps**:
   - `Grafana-Config`: Contains non-secret Grafana configuration
   - `Azure-Monitor-Config`: Contains Azure Monitor specific settings

3. **Run Pipelines in Order**:
   - First run the Grafana creation pipeline
   - Then run the Azure Monitor integration pipeline

4. **Verify Deployment**:
   ```bash
   kubectl get pods -n monitoring
   kubectl get svc -n monitoring
   ```

This implementation provides a complete, secure CI/CD pipeline for deploying Grafana with Azure Monitor integration on AKS, using Helm charts and Azure DevOps pipelines with proper secret management through Azure Key Vault.
