## Title  
Dev: Design for Dedicated AKS OSS Observability Stack

## 1. Description  
- **Problem/Need:**  
  Dev APIM/AKS ingress constraints block access to observability UIs (Grafana/Jaeger). A reviewed design is required to define a secure, private, and time-boxed approach for hosting an  OSS stack on a dedicated AKS.

- **Expected Outcome:**  
  Approved design  for the OSS observability stack that operates in dedicated AKS and integrates with package covering VM sizing/config, containerization (Docker/Compose), IaC (Ansible), networking/security posture, data flow, retention, access model, and C4 L2/L3 diagrams to guide implementation and ADR addendum.

- **Related Links:**  
  - 

## 2. Implementation Approach  
- **Key Steps:**  
  - Gather constraints and assumptions (existing subnet, existing network-only access, team access methods, retention targets).  
  - Propose VM sizing (CPU, RAM, SSD storage) with performance and retention headroom.  
  - Define architecture and data flow: AKS OpenTelemetry Collectors forward metrics (Prometheus remote write), logs (Loki HTTP), traces (OTLP) to VM endpoints; enumerate required ports.  
  - Containerization plan using Docker Compose for Grafana, Prometheus (remote write receiver), Loki, and Jaeger; outline service configs and restart policies.  
  - IaC plan using Ansible (roles/playbooks for VM provisioning, Docker install, Compose deployment, firewall rules, users/secrets).  
  - Security posture: credentials/RBAC, disable anonymous access, network allowlists; TLS if feasible within dev constraints.  
  - Observability retention targets for dev (e.g., 7â€“14 days metrics/logs) and disk sizing rationale.  
  - Deliver C4 L2 (logical) and C4 L3 (deployment) diagrams; review with stakeholders and incorporate feedback.  
  - Produce the design document package and submit for signoff.

## 3. Value & Priority  
- **Impact:**  
  Creates a clear, reviewable plan that unblocks implementation, aligns stakeholders, and feeds the ADR addendum while minimizing risk.





