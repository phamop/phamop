Error: invalid configuration: service::pipelines::logs: references exporter "logging" which is not configured
collector server run finished with error: invalid configuration: service::pipelines::logs: references exporter "logging" which is not configured






################################################
# Azure Monitor Insights Integration with Grafana on AKS: Implementation Guide

This guide provides a detailed implementation plan for integrating Azure Monitor Insights metrics with Grafana on an existing AKS cluster, using Azure Key Vault for secrets management, without Istio, and using Azure DevOps pipelines with Helm charts.

## Prerequisites

- Existing AKS cluster
- Existing Azure Monitor workspace
- Existing Azure Key Vault (Goodvault)
- Azure DevOps organization
- Helm 3.x installed
- kubectl configured for your AKS cluster

## Architecture Overview

1. Grafana deployed via Helm to AKS
2. Azure Monitor Metrics integrated via Grafana data source
3. Secrets managed via Azure Key Vault
4. Separate Azure DevOps pipelines for:
   - Grafana deployment
   - Azure Monitor integration
5. Environment-specific configuration via parameter files

## Implementation Steps

### 1. Set Up Azure Key Vault Secrets

First, populate your Goodvault with required secrets:

```bash
# Add Grafana admin credentials
az keyvault secret set --vault-name Goodvault --name grafana-admin-user --value "admin"
az keyvault secret set --vault-name Goodvault --name grafana-admin-password --value "SecurePassword123!"

# Add Azure Monitor credentials
az keyvault secret set --vault-name Goodvault --name azure-monitor-client-id --value "<your-client-id>"
az keyvault secret set --vault-name Goodvault --name azure-monitor-client-secret --value "<your-client-secret>"
az keyvault secret set --vault-name Goodvault --name azure-monitor-tenant-id --value "<your-tenant-id>"
az keyvault secret set --vault-name Goodvault --name azure-monitor-subscription-id --value "<your-subscription-id>"
```

### 2. Create Helm Chart for Grafana

Create a Helm chart structure:

```
grafana/
├── Chart.yaml
├── values.yaml
├── values-dev.yaml
├── values-prod.yaml
├── templates/
│   ├── deployment.yaml
│   ├── service.yaml
│   ├── configmap.yaml
│   ├── secrets.yaml
│   └── ingress.yaml
└── crds/
    └── grafana-dashboard-crd.yaml
```

#### Sample `values-dev.yaml` (no TLS/DNS for dev)

```yaml
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: grafana-dev.internal
      paths:
        - /
  tls: []

grafana.ini:
  server:
    domain: grafana-dev.internal
    root_url: http://grafana-dev.internal

env:
  GF_SECURITY_DISABLE_INITIAL_ADMIN_PASSWORD_CHANGE: "true"

service:
  type: LoadBalancer
```

#### Sample `values-prod.yaml` (with TLS/DNS for production)

```yaml
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: grafana.yourcompany.com
      paths:
        - /
  tls:
    - hosts:
        - grafana.yourcompany.com
      secretName: grafana-tls

grafana.ini:
  server:
    domain: grafana.yourcompany.com
    root_url: https://grafana.yourcompany.com

env:
  GF_SECURITY_DISABLE_INITIAL_ADMIN_PASSWORD_CHANGE: "false"

service:
  type: ClusterIP
```

### 3. Create Custom Resource Definition (CRD) for Grafana Dashboards

`crd/grafana-dashboard-crd.yaml`:

```yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: grafanadashboards.integrations.grafana.com
spec:
  group: integrations.grafana.com
  names:
    kind: GrafanaDashboard
    listKind: GrafanaDashboardList
    plural: grafanadashboards
    singular: grafanadashboard
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                json:
                  type: string
```

### 4. Azure DevOps Pipeline for Grafana Deployment

Create a new pipeline `azure-pipelines-grafana-deploy.yml`:

```yaml
variables:
  - group: 'Grafana-Dev-Environment'
  - name: helmReleaseName
    value: 'grafana-dev'
  - name: namespace
    value: 'monitoring'

stages:
- stage: Deploy
  jobs:
  - job: DeployGrafana
    steps:
    - task: HelmInstaller@1
      inputs:
        helmVersion: '3.8.1'
    
    - task: HelmDeploy@0
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: '$(azureSubscription)'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(aksClusterName)'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '$(System.DefaultWorkingDirectory)/grafana'
        releaseName: '$(helmReleaseName)'
        overrideValues: 'ingress.hosts[0].host=$(grafanaHost)'
        valueFile: '$(System.DefaultWorkingDirectory)/grafana/values-$(environment).yaml'
        install: true
        waitForExecution: true
        namespace: '$(namespace)'
    
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        namespace: '$(namespace)'
        manifests: '$(System.DefaultWorkingDirectory)/grafana/crds/*.yaml'
```

### 5. Azure DevOps Pipeline for Azure Monitor Integration

Create `azure-pipelines-azuremonitor-integration.yml`:

```yaml
variables:
  - group: 'AzureMonitor-Integration'
  - name: namespace
    value: 'monitoring'

stages:
- stage: ConfigureAzureMonitorDataSource
  jobs:
  - job: ConfigureGrafana
    steps:
    - task: AzureKeyVault@1
      inputs:
        azureSubscription: '$(azureSubscription)'
        KeyVaultName: 'Goodvault'
        SecretsFilter: '*'
    
    - bash: |
        # Create Kubernetes secret for Azure Monitor credentials
        kubectl create secret generic azure-monitor-secrets \
          --namespace $(namespace) \
          --from-literal=clientId=$(azure-monitor-client-id) \
          --from-literal=clientSecret=$(azure-monitor-client-secret) \
          --from-literal=tenantId=$(azure-monitor-tenant-id) \
          --from-literal=subscriptionId=$(azure-monitor-subscription-id) \
          --dry-run=client -o yaml | kubectl apply -f -
      displayName: 'Create Azure Monitor Secrets'
    
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        namespace: '$(namespace)'
        manifests: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-azure-monitor-datasource
          data:
            azure-monitor-datasource.yaml: |
              apiVersion: 1
              datasources:
              - name: AzureMonitor
                type: grafana-azure-monitor-datasource
                access: proxy
                orgId: 1
                url: /api/datasources/proxy/1
                jsonData:
                  subscriptionId: "$(azure-monitor-subscription-id)"
                  cloudName: azuremonitor
                  azureAuthType: clientsecret
                  tenantId: "$(azure-monitor-tenant-id)"
                  clientId: "$(azure-monitor-client-id)"
                secureJsonData:
                  clientSecret: "$(azure-monitor-client-secret)"
                version: 1
                editable: false
    
    - bash: |
        # Restart Grafana pod to pick up new config
        kubectl rollout restart deployment/grafana --namespace $(namespace)
      displayName: 'Restart Grafana'
```

### 6. Create Variable Groups in Azure DevOps

Create two variable groups:

1. **Grafana-Dev-Environment**
   - `environment`: dev
   - `grafanaHost`: grafana-dev.internal
   - `aksClusterName`: your-aks-dev
   - `resourceGroup`: your-rg-dev
   - `azureSubscription`: Your Azure Subscription Name/ID

2. **AzureMonitor-Integration**
   - `azure-monitor-subscription-id`: $(azure-monitor-subscription-id) [linked to Key Vault]
   - `azure-monitor-tenant-id`: $(azure-monitor-tenant-id) [linked to Key Vault]
   - `azure-monitor-client-id`: $(azure-monitor-client-id) [linked to Key Vault]
   - `azure-monitor-client-secret`: $(azure-monitor-client-secret) [linked to Key Vault]

### 7. Pipeline Execution Strategy

1. **Grafana Deployment Pipeline**:
   - Triggered on changes to the Grafana Helm chart
   - Deploys Grafana with environment-specific configuration
   - Creates necessary CRDs

2. **Azure Monitor Integration Pipeline**:
   - Triggered manually or on schedule
   - Configures Azure Monitor data source in Grafana
   - Updates configuration without redeploying entire Grafana

### 8. Post-Deployment Verification

```bash
# Verify Grafana deployment
kubectl get pods -n monitoring

# Check Azure Monitor data source
kubectl exec -it <grafana-pod> -n monitoring -- \
  curl -u admin:$(grafana-admin-password) http://localhost:3000/api/datasources

# Access Grafana UI (for dev)
kubectl port-forward svc/grafana 3000:3000 -n monitoring
```

## Security Considerations

1. **Development Environment**:
   - No TLS as requested
   - Internal hostnames only
   - Basic authentication (consider adding more security for production)

2. **Production Environment**:
   - Add TLS configuration in values-prod.yaml
   - Configure DNS resolution
   - Enable additional security features in Grafana

3. **Secret Management**:
   - All sensitive data stored in Azure Key Vault
   - Secrets injected at deployment time
   - No hardcoded credentials in Helm charts or pipelines

## Maintenance and Scaling

1. **Dashboard Management**:
   - Store dashboard JSON definitions as CRDs
   - Version control dashboards alongside Helm charts

2. **Scaling**:
   - Adjust Grafana replica count in values.yaml
   - Configure persistent storage for Grafana data

3. **Updates**:
   - Update Helm chart version for Grafana upgrades
   - Test in dev before promoting to production

This implementation provides a secure, maintainable integration of Azure Monitor Insights with Grafana on AKS, with proper separation of concerns between deployment and configuration pipelines.
