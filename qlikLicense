#!/usr/bin/env python3
"""
GitLab Billable Users Monitor

This script monitors GitLab billable user counts via the GitLab API and sends
notifications when certain thresholds are reached.

Requirements:
    - requests
    - python-dotenv

Usage:
    1. Configure settings in .env file
    2. Run the script manually or as a scheduled task/cron job
"""

import os
import sys
import json
import logging
import smtplib
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("gitlab_monitor.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("gitlab-monitor")

# Load environment variables from .env file
load_dotenv()

# GitLab API Configuration
GITLAB_URL = os.getenv("GITLAB_URL", "https://gitlab.com")
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")
if not GITLAB_TOKEN:
    logger.error("GitLab API token not set. Please set GITLAB_TOKEN in .env file.")
    sys.exit(1)

# Notification Configuration
NOTIFICATION_THRESHOLD = int(os.getenv("NOTIFICATION_THRESHOLD", 80))  # Percentage of license usage
WARNING_THRESHOLD = int(os.getenv("WARNING_THRESHOLD", 90))  # Percentage for warning
CRITICAL_THRESHOLD = int(os.getenv("CRITICAL_THRESHOLD", 95))  # Percentage for critical warning

# Email Configuration
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.example.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", 587))
SMTP_USERNAME = os.getenv("SMTP_USERNAME")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
EMAIL_FROM = os.getenv("EMAIL_FROM", "gitlab-monitor@example.com")
EMAIL_TO = os.getenv("EMAIL_TO", "admin@example.com").split(",")
EMAIL_SUBJECT_PREFIX = os.getenv("EMAIL_SUBJECT_PREFIX", "[GitLab Monitor]")

# Slack Configuration
SLACK_WEBHOOK_URL = os.getenv("SLACK_WEBHOOK_URL")

# Teams Configuration
TEAMS_WEBHOOK_URL = os.getenv("TEAMS_WEBHOOK_URL")

def get_billable_users():
    """
    Get billable user counts from GitLab API
    
    Returns:
        dict: Information about billable users and license
    """
    headers = {
        "Authorization": f"Bearer {GITLAB_TOKEN}",
        "Content-Type": "application/json"
    }
    
    # Get license information
    try:
        response = requests.get(f"{GITLAB_URL}/api/v4/license", headers=headers)
        response.raise_for_status()
        license_info = response.json()
        
        # Get billable users count
        response = requests.get(f"{GITLAB_URL}/api/v4/billable_members", headers=headers)
        response.raise_for_status()
        billable_users = response.json()
        
        result = {
            "timestamp": datetime.now().isoformat(),
            "license": license_info,
            "billable_users": len(billable_users),
            "license_limit": license_info.get("user_limit", 0),
            "usage_percentage": 0
        }
        
        # Calculate usage percentage
        if result["license_limit"] > 0:
            result["usage_percentage"] = (result["billable_users"] / result["license_limit"]) * 100
        
        return result
    
    except requests.exceptions.RequestException as e:
        logger.error(f"Error connecting to GitLab API: {e}")
        return None

def should_send_notification(usage_data):
    """
    Determine if notification should be sent based on thresholds
    
    Args:
        usage_data (dict): Usage data from GitLab API
        
    Returns:
        bool, str: Whether to send notification and notification level
    """
    if not usage_data:
        return False, None
    
    percentage = usage_data["usage_percentage"]
    
    if percentage >= CRITICAL_THRESHOLD:
        return True, "CRITICAL"
    elif percentage >= WARNING_THRESHOLD:
        return True, "WARNING"
    elif percentage >= NOTIFICATION_THRESHOLD:
        return True, "INFO"
    
    return False, None

def send_email_notification(usage_data, level):
    """
    Send email notification about license usage
    
    Args:
        usage_data (dict): Usage data from GitLab API
        level (str): Notification level (INFO, WARNING, CRITICAL)
    """
    if not all([SMTP_SERVER, SMTP_USERNAME, SMTP_PASSWORD]):
        logger.warning("Email notification skipped: SMTP configuration incomplete")
        return
    
    subject_prefix = {
        "INFO": f"{EMAIL_SUBJECT_PREFIX} License Usage Alert",
        "WARNING": f"{EMAIL_SUBJECT_PREFIX} License Usage Warning",
        "CRITICAL": f"{EMAIL_SUBJECT_PREFIX} CRITICAL License Usage Alert"
    }.get(level, f"{EMAIL_SUBJECT_PREFIX} License Usage")
    
    usage_percentage = round(usage_data["usage_percentage"], 2)
    
    subject = f"{subject_prefix}: {usage_percentage}% of GitLab licenses in use"
    
    html_content = f"""
    <html>
    <body>
        <h2>GitLab License Usage Alert</h2>
        <p>Current license usage has reached <strong>{usage_percentage}%</strong> ({usage_data['billable_users']} of {usage_data['license_limit']} licenses).</p>
        
        <h3>License Details:</h3>
        <ul>
            <li>Total licenses: {usage_data['license_limit']}</li>
            <li>Billable users: {usage_data['billable_users']}</li>
            <li>Usage percentage: {usage_percentage}%</li>
            <li>License plan: {usage_data['license'].get('plan', 'Unknown')}</li>
            <li>License expires: {usage_data['license'].get('expires_at', 'Unknown')}</li>
        </ul>
        
        <p>Please review your GitLab license allocation if necessary.</p>
        <p><small>This message was sent by the GitLab License Monitor at {usage_data['timestamp']}.</small></p>
    </body>
    </html>
    """
    
    text_content = f"""
    GitLab License Usage Alert
    
    Current license usage has reached {usage_percentage}% ({usage_data['billable_users']} of {usage_data['license_limit']} licenses).
    
    License Details:
    - Total licenses: {usage_data['license_limit']}
    - Billable users: {usage_data['billable_users']}
    - Usage percentage: {usage_percentage}%
    - License plan: {usage_data['license'].get('plan', 'Unknown')}
    - License expires: {usage_data['license'].get('expires_at', 'Unknown')}
    
    Please review your GitLab license allocation if necessary.
    
    This message was sent by the GitLab License Monitor at {usage_data['timestamp']}.
    """
    
    try:
        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = EMAIL_FROM
        msg['To'] = ", ".join(EMAIL_TO)
        
        msg.attach(MIMEText(text_content, 'plain'))
        msg.attach(MIMEText(html_content, 'html'))
        
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
        
        logger.info(f"Email notification sent to {', '.join(EMAIL_TO)}")
    except Exception as e:
        logger.error(f"Failed to send email notification: {e}")

def send_slack_notification(usage_data, level):
    """
    Send Slack notification about license usage
    
    Args:
        usage_data (dict): Usage data from GitLab API
        level (str): Notification level (INFO, WARNING, CRITICAL)
    """
    if not SLACK_WEBHOOK_URL:
        logger.warning("Slack notification skipped: webhook URL not configured")
        return
    
    color = {
        "INFO": "#36a64f",  # Green
        "WARNING": "#ffcc00",  # Yellow
        "CRITICAL": "#ff0000"  # Red
    }.get(level, "#36a64f")
    
    usage_percentage = round(usage_data["usage_percentage"], 2)
    
    payload = {
        "attachments": [
            {
                "fallback": f"GitLab License Alert: {usage_percentage}% of licenses in use",
                "color": color,
                "title": f"GitLab License Usage: {level}",
                "fields": [
                    {
                        "title": "Usage Percentage",
                        "value": f"{usage_percentage}%",
                        "short": True
                    },
                    {
                        "title": "Billable Users",
                        "value": f"{usage_data['billable_users']} of {usage_data['license_limit']}",
                        "short": True
                    },
                    {
                        "title": "License Plan",
                        "value": usage_data['license'].get('plan', 'Unknown'),
                        "short": True
                    },
                    {
                        "title": "Expires At",
                        "value": usage_data['license'].get('expires_at', 'Unknown'),
                        "short": True
                    }
                ],
                "footer": "GitLab License Monitor",
                "ts": int(datetime.now().timestamp())
            }
        ]
    }
    
    try:
        response = requests.post(
            SLACK_WEBHOOK_URL,
            data=json.dumps(payload),
            headers={'Content-Type': 'application/json'}
        )
        response.raise_for_status()
        logger.info("Slack notification sent successfully")
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to send Slack notification: {e}")

def send_teams_notification(usage_data, level):
    """
    Send Microsoft Teams notification about license usage
    
    Args:
        usage_data (dict): Usage data from GitLab API
        level (str): Notification level (INFO, WARNING, CRITICAL)
    """
    if not TEAMS_WEBHOOK_URL:
        logger.warning("Teams notification skipped: webhook URL not configured")
        return
    
    usage_percentage = round(usage_data["usage_percentage"], 2)
    
    # Set color based on alert level
    theme_color = {
        "INFO": "0076D7",
        "WARNING": "FFC107",
        "CRITICAL": "D9534F"
    }.get(level, "0076D7")
    
    payload = {
        "@type": "MessageCard",
        "@context": "http://schema.org/extensions",
        "themeColor": theme_color,
        "title": f"GitLab License Usage Alert: {level}",
        "summary": f"GitLab License Usage at {usage_percentage}%",
        "sections": [
            {
                "facts": [
                    {
                        "name": "Usage",
                        "value": f"{usage_percentage}%"
                    },
                    {
                        "name": "Billable Users",
                        "value": f"{usage_data['billable_users']}"
                    },
                    {
                        "name": "License Limit",
                        "value": f"{usage_data['license_limit']}"
                    },
                    {
                        "name": "License Plan",
                        "value": usage_data['license'].get('plan', 'Unknown')
                    },
                    {
                        "name": "Expires At",
                        "value": usage_data['license'].get('expires_at', 'Unknown')
                    }
                ],
                "text": f"Current license usage has reached **{usage_percentage}%** ({usage_data['billable_users']} of {usage_data['license_limit']} licenses)."
            }
        ]
    }
    
    try:
        response = requests.post(
            TEAMS_WEBHOOK_URL,
            data=json.dumps(payload),
            headers={'Content-Type': 'application/json'}
        )
        response.raise_for_status()
        logger.info("Microsoft Teams notification sent successfully")
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to send Microsoft Teams notification: {e}")

def save_history(usage_data):
    """
    Save usage data to history file for trending
    
    Args:
        usage_data (dict): Usage data from GitLab API
    """
    history_file = "gitlab_license_history.json"
    history = []
    
    # Read existing history if available
    if os.path.exists(history_file):
        try:
            with open(history_file, 'r') as f:
                history = json.load(f)
        except json.JSONDecodeError:
            logger.warning(f"Could not decode history file {history_file}, starting new history")
    
    # Add new data point
    history_entry = {
        "timestamp": usage_data["timestamp"],
        "billable_users": usage_data["billable_users"],
        "license_limit": usage_data["license_limit"],
        "usage_percentage": usage_data["usage_percentage"]
    }
    history.append(history_entry)
    
    # Limit history size to last 90 data points (for 90 days if run daily)
    if len(history) > 90:
        history = history[-90:]
    
    # Save updated history
    try:
        with open(history_file, 'w') as f:
            json.dump(history, f, indent=2)
        logger.info(f"Usage history updated in {history_file}")
    except Exception as e:
        logger.error(f"Failed to save history file: {e}")

def main():
    """Main function to check GitLab license usage and send notifications"""
    logger.info("Starting GitLab license usage check")
    
    # Get usage data
    usage_data = get_billable_users()
    if not usage_data:
        logger.error("Failed to get usage data from GitLab API")
        return
    
    logger.info(f"Current usage: {usage_data['billable_users']} of {usage_data['license_limit']} licenses "
                f"({round(usage_data['usage_percentage'], 2)}%)")
    
    # Save to history
    save_history(usage_data)
    
    # Check if notification needed
    should_notify, level = should_send_notification(usage_data)
    if should_notify:
        logger.info(f"License usage alert level: {level}")
        
        # Send notifications
        send_email_notification(usage_data, level)
        send_slack_notification(usage_data, level)
        send_teams_notification(usage_data, level)
    else:
        logger.info("No alerts triggered")
    
    logger.info("GitLab license usage check completed")

if __name__ == "__main__":
    main()
