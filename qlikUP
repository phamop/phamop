# Qlik Sense On-Premise Multi-Node Upgrade Implementation (Windows) - February 2024 to May 2024

This guide details the step-by-step implementation for upgrading and expanding an existing Qlik Sense February 2024 multi-node environment on Windows Server.

## Current Environment Assessment (February 2024)

### Existing Infrastructure:
- **Primary Node**: qlik-primary01 (Windows Server 2019, 12 cores, 48GB RAM)
- **Worker Node**: qlik-worker01 (Windows Server 2019, 8 cores, 32GB RAM)
- **Version**: Qlik Sense February 2024 (14.114.6)
- **Components**: Central node, Proxy, Scheduler, Engine services

### Upgrade Requirements:
- Add 2 new worker nodes for increased capacity
- Upgrade to May 2024 patch release
- Implement high availability for critical services
- Migrate 15 existing applications with zero downtime

## Phase 1: Preparation (February 2024 - March 2024)

### Step 1: Environment Documentation
1. Document current configuration:
```powershell
# Export current node configuration
Get-QlikNode -full | Export-Clixml -Path "C:\QlikBackup\node_config_$(Get-Date -Format yyyyMMdd).xml"
```

2. Inventory existing apps and connections:
```sql
-- Query repository database for app inventory
SELECT * FROM QRS_APP WHERE ModifiedDate > '2023-01-01' ORDER BY ModifiedDate DESC
```

### Step 2: New Server Provisioning
- **New Nodes**:
  - qlik-worker02: Windows Server 2022, 16 cores, 64GB RAM
  - qlik-worker03: Windows Server 2022, 16 cores, 64GB RAM
- **Storage**: Configured 500GB SSD for each node

### Step 3: Backup Current Environment
1. Full repository backup:
```powershell
Backup-QlikRepository -Path "C:\QlikBackup\repo_backup_$(Get-Date -Format yyyyMMdd).zip"
```

2. Export critical apps:
```powershell
$apps = Get-QlikApp -filter "published eq true"
foreach ($app in $apps) {
    Export-QlikApp -id $app.id -filename "C:\QlikBackup\Apps\$($app.name).qvf"
}
```

## Phase 2: Node Expansion (March 2024)

### Step 4: New Worker Node Installation
1. On qlik-worker02:
```powershell
# Silent installation with shared persistence
.\Qlik_Sense_setup.exe -s user=domain\qlikadmin password=P@ssw0rd123 accepteula=yes installtype=engine sharedPersistence=yes centralnode=qlik-primary01.company.com
```

2. Verify node registration:
```powershell
Get-QlikNode -filter "name eq 'qlik-worker02'"
```

### Step 5: Load Balancing Configuration
1. Update proxy settings on primary node:
```json
// C:\ProgramData\Qlik\Sense\Proxy\custom.properties
{
  "loadBalancing": {
    "strategy": "roundrobin",
    "nodes": [
      "qlik-worker01:4747",
      "qlik-worker02:4747",
      "qlik-worker03:4747"
    ]
  }
}
```

2. Restart proxy service:
```powershell
Restart-Service QlikSenseProxy
```

## Phase 3: Service Upgrade (April 2024)

### Step 6: In-Place Upgrade to May 2024 Release
1. Download Qlik Sense May 2024 Patch (14.115.2)
2. Run upgrade on primary node:
```powershell
Start-Process -FilePath "Qlik_Sense_update.exe" -ArgumentList "-s accepteula=yes" -Wait
```

3. Verify version:
```powershell
Get-QlikVersion
# Expected output: 14.115.2
```

### Step 7: Rolling Upgrade of Worker Nodes
1. Drain sessions from qlik-worker01:
```powershell
Set-QlikNode -id (Get-QlikNode -filter "name eq 'qlik-worker01'").id -operational false
```

2. Perform upgrade:
```powershell
\\qlik-primary01\updates\Qlik_Sense_update.exe -s accepteula=yes
```

3. Repeat for all worker nodes

## Phase 4: High Availability Configuration (May 2024)

### Step 8: Configure Repository HA
1. Set up PostgreSQL streaming replication:
```sql
-- On primary repository
CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD 'RepPass123';
ALTER SYSTEM SET wal_level = replica;
ALTER SYSTEM SET max_wal_senders = 3;
ALTER SYSTEM SET wal_keep_segments = 32;
```

2. Configure standby node (qlik-worker03):
```powershell
# Install repository service only
.\Qlik_Sense_setup.exe -s components=repository user=domain\qlikadmin password=P@ssw0rd123 accepteula=yes
```

### Step 9: Failover Testing
1. Simulate primary repository failure:
```powershell
Stop-Service QlikSenseRepository
```

2. Verify failover to standby:
```powershell
Test-NetConnection qlik-worker03 -Port 443
```

## Post-Upgrade Tasks

### Step 10: Performance Optimization
1. Configure engine allocation:
```powershell
Set-QlikNode -id (Get-QlikNode -filter "name eq 'qlik-worker02'").id -engineEnabled $true -engineBalancingMode static -engineCount 4
```

2. Update app reload schedules:
```powershell
$reloadTasks = Get-QlikReloadTask
foreach ($task in $reloadTasks) {
    if ($task.name -like "*Daily*") {
        Set-QlikReloadTask -id $task.id -startDateTime "02:00:00" -enabled $true
    }
}
```

### Step 11: Monitoring Implementation
1. Deploy updated monitoring app:
```powershell
Publish-QlikApp -Id (Import-QlikApp -Path "C:\Qlik\Monitoring\QS_Monitoring_May2024.qvf").id -Stream "Monitoring"
```

2. Configure alerts:
```json
// QMC Alert Rules
{
  "rules": [
    {
      "name": "EngineHighMemory",
      "condition": "engine.memory.usage > 85",
      "action": "email:admin@company.com"
    }
  ]
}
```

## Verification Process

1. Validate all services:
```powershell
Get-Service QlikSense* | Select-Object Name, Status, StartType
```

2. Test app functionality:
```powershell
$testApps = Get-QlikApp -filter "stream.name eq 'Sales'"
foreach ($app in $testApps) {
    Invoke-QlikReload -AppId $app.id
    Start-Sleep -Seconds 30
    $status = Get-QlikReloadTask -filter "app.id eq '$($app.id)'" | Select-Object -Last 1
    Write-Host "$($app.name): $($status.status)"
}
```

This implementation successfully expanded the Qlik Sense environment from 2 to 4 nodes, upgraded to the May 2024 release with zero downtime, and implemented high availability for critical services. The entire process was completed by May 15, 2024, with full user access restored and verified by May 18, 2024.




################################################################################################################################
################################################################################################################################



# Qlik Sense On-Premises Upgrade & Expansion (Windows) - Multi-Node Implementation
# February 2024 to May 2024

This guide details the steps to upgrade and expand an existing Qlik Sense Enterprise February 2024 multi-node Windows environment (1 Central + 1 Worker) with additional capabilities and optimizations.

## Current Environment (February 2024 Baseline)
- **Central Node**: QS-CENTRAL01 (Windows Server 2019, Qlik Sense Feb 2024)
- **Worker Node**: QS-WORKER01 (Windows Server 2019, Qlik Sense Feb 2024)
- **Version**: 14.114.6
- **Users**: 35 concurrent
- **Data Sources**: SQL Server, SharePoint, Flat Files

## Phase 1: Planning & Preparation (February 2024)

### Step 1: Environment Assessment
1. Document current configuration:
```powershell
Get-QlikNode -full | Select-Object name, hostname, roles, version
```
2. Performance baseline:
   - CPU usage: Avg 65% during peak
   - Memory: 75% utilized
   - Disk I/O: 120MB/s during reloads

### Step 2: Upgrade Planning
- **Target Version**: May 2024 Release (14.117.3)
- **New Worker Node**: QS-WORKER02 (Windows Server 2022)
- **New Capabilities**:
  - Advanced Analytics Integration
  - Dynamic Views
  - Enhanced Kubernetes orchestration

### Step 3: Backup Preparation
1. Create full backup:
```powershell
Export-QlikConfiguration -Path "D:\Backups\Qlik\PreUpgrade_Config_20240215.zip"
```
2. Document custom settings:
   - 5 custom virtual proxies
   - 3 security rules
   - 2 custom extensions

## Phase 2: Worker Node Expansion (March 2024)

### Step 4: New Worker Node Provisioning
1. Install prerequisites on QS-WORKER02:
```powershell
Install-WindowsFeature Web-Server, NET-Framework-45-Features
```
2. Install Qlik Sense Worker components:
```cmd
msiexec /i "Qlik_Sense_Worker_x64.msi" /quiet TRANSFORMS="worker.mst" 
SERVICESTARTTYPE="auto" INSTALLDIR="C:\Program Files\Qlik\Sense" 
HOSTNAME="QS-CENTRAL01.company.com" USERDOMAIN="COMPANY" 
USERNAME="qlikservice" PASSWORD="SecureP@ss123"
```

### Step 5: Node Configuration
1. Join to existing cluster:
```powershell
Connect-QlikNode -hostname QS-CENTRAL01.company.com -username admin@company.com
```
2. Verify node status:
```powershell
Get-QlikNode -filter "name eq 'QS-WORKER02'"
```
Output should show status "Ready"

### Step 6: Load Balancing Configuration
1. Update proxy settings in QMC:
   - Added new worker to rotation pool
   - Configured session affinity rules
2. Test distribution:
```javascript
// Sample load test script
for (let i=0; i<100; i++) {
  fetch('https://qlik.company.com/hub/', {credentials: 'include'});
}
```

## Phase 3: In-Place Upgrade (April 2024)

### Step 7: Staged Upgrade Process
1. First upgrade worker nodes (starting with QS-WORKER01):
```powershell
Stop-QlikService -name QlikSenseEngineService
Start-Process "Qlik_Sense_Upgrade_14.117.3.exe" -ArgumentList "/silent /norestart" -Wait
```
2. Verify worker upgrade:
```powershell
Get-QlikNode -filter "name eq 'QS-WORKER01'" | Select version
```
3. Upgrade central node (QS-CENTRAL01):
```powershell
Stop-QlikService -name QlikSenseRepositoryService
.\Qlik_Sense_Upgrade_14.117.3.exe /silent /norestart
```

### Step 8: Post-Upgrade Validation
1. Verify all services:
```powershell
Get-Service | Where-Object {$_.Name -like "Qlik*"}
```
2. Test critical paths:
   - Hub access
   - App opening
   - Data reloads
3. Validate custom extensions:
```powershell
Get-QlikExtension | Where-Object {$_.approved -eq $false}
```

## Phase 4: New Capabilities Implementation (May 2024)

### Step 9: Advanced Analytics Setup
1. Install Python integration:
```powershell
Install-QlikAnalyticsConnection -Name "Python3" -Host "localhost" -Port 50051 -Auth None
```
2. Configure in app:
```qlik
LIB CONNECT TO 'Python3';

Python:
LOAD
  PredictSales(ProductID, Month) as ForecastedSales
EXTENSION PyTools.PredictSales(ProductID, Month);
```

### Step 10: Dynamic Views Implementation
1. Create security rule in QMC:
```json
{
  "name": "SalesRegionFilter",
  "rule": "user.region = view.region",
  "resourceFilter": "view.type eq 'dynamic'"
}
```
2. Implement in app:
```javascript
// In app script
const dynamicView = qlik.createDynamicView({
  "region": "user.region",
  "productLine": "user.productAccess"
});
```

### Step 11: Performance Optimization
1. Configure distributed reloads:
```powershell
Set-QlikLoadBalancing -Engine -Mode RoundRobin -WorkerNodes @("QS-WORKER01","QS-WORKER02")
```
2. Implement incremental loads:
```qlik
// In data load script
IF $(vIncrementalLoad) = true THEN
  WHERE OrderDate >= Date(Today()-30);
ENDIF
```

## Final Environment Configuration (May 2024)

**Node Configuration**:
- Central Node: QS-CENTRAL01 (v14.117.3)
- Worker Nodes: 
  - QS-WORKER01 (v14.117.3)
  - QS-WORKER02 (v14.117.3)

**Performance Improvements**:
- Reduced average reload time by 40%
- Increased concurrent user capacity to 75
- Improved failover capabilities

**Monitoring Setup**:
```powershell
New-QlikMonitoringSubscription -Name "EngineAlerts" -ResourceType "engine" -Conditions @{
  "cpu" = @{threshold=90};
  "memory" = @{threshold=85}
} -Actions @{
  "email" = @{addresses="qlikadmins@company.com"}
}
```

**Rollback Plan Documented**:
1. Stop services
2. Restore from backup:
```powershell
Import-QlikConfiguration -Path "D:\Backups\Qlik\PreUpgrade_Config_20240215.zip" -Force
```

This implementation successfully expanded capacity and upgraded the environment with zero downtime during business hours, completing on May 15, 2024.
